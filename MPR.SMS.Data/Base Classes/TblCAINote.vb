' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:30 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblCAINote.
	''' </summary>

	Public Class TblCAINote
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _logicalStatus As SqlString
		Private _logicalStatusOld As SqlString
		Private _currentStatus As SqlString
		Private _currentStatusOld As SqlString

		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _contactNum As SqlInt32
		Private _contactNumOld As SqlInt32
		Private _noteID As SqlInt32
		Private _noteIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _instrumentTypeID As SqlInt32
		Private _instrumentTypeIDOld As SqlInt32

		Private _dateOfContact As SqlDateTime
		Private _dateOfContactOld As SqlDateTime

		Private _userName As SqlString
		Private _userNameOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _phoneNumAttempted As SqlString
		Private _phoneNumAttemptedOld As SqlString
		Private _source As SqlString
		Private _sourceOld As SqlString

#End Region

		''' <overloads>
		''' The TblCAINote constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblCAINote class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCAINote class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCAINote class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_noteID = New SqlInt32(CType(objDataRow("NoteID"), Integer))
			
			_noteIDOld = _noteID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("InstrumentTypeID") Is System.DBNull.Value Then
				_instrumentTypeID = SqlInt32.Null
			Else
				_instrumentTypeID = New SqlInt32(CType(objDataRow("InstrumentTypeID"), Integer))
			End If
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("Source") Is System.DBNull.Value Then
				_source = New SqlString("")
			Else
				_source = New SqlString(CType(objDataRow("Source"), String))
			End If
			
			_sourceOld = _source
			
			If objDataRow("DateOfContact") Is System.DBNull.Value Then
				_dateOfContact = SqlDateTime.Null
			Else
				_dateOfContact = New SqlDateTime(CType(objDataRow("DateOfContact"), Date))
			End If
			
			_dateOfContactOld = _dateOfContact
			
			If objDataRow("PhoneNumAttempted") Is System.DBNull.Value Then
				_phoneNumAttempted = New SqlString("")
			Else
				_phoneNumAttempted = New SqlString(CType(objDataRow("PhoneNumAttempted"), String))
			End If
			
			_phoneNumAttemptedOld = _phoneNumAttempted
			
			If objDataRow("ContactNum") Is System.DBNull.Value Then
				_contactNum = SqlInt32.Null
			Else
				_contactNum = New SqlInt32(CType(objDataRow("ContactNum"), Integer))
			End If
			
			_contactNumOld = _contactNum
			
			If objDataRow("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objDataRow("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objDataRow("LogicalStatus") Is System.DBNull.Value Then
				_logicalStatus = New SqlString("")
			Else
				_logicalStatus = New SqlString(CType(objDataRow("LogicalStatus"), String))
			End If
			
			_logicalStatusOld = _logicalStatus
			
			If objDataRow("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objDataRow("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_noteID = New SqlInt32(CType(objSqlDataReader("NoteID"), Integer))
			
			_noteIDOld = _noteID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("InstrumentTypeID") Is System.DBNull.Value Then
				_instrumentTypeID = SqlInt32.Null
			Else
				_instrumentTypeID = New SqlInt32(CType(objSqlDataReader("InstrumentTypeID"), Integer))
			End If
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("Source") Is System.DBNull.Value Then
				_source = New SqlString("")
			Else
				_source = New SqlString(CType(objSqlDataReader("Source"), String))
			End If
			
			_sourceOld = _source
			
			If objSqlDataReader("DateOfContact") Is System.DBNull.Value Then
				_dateOfContact = SqlDateTime.Null
			Else
				_dateOfContact = New SqlDateTime(CType(objSqlDataReader("DateOfContact"), Date))
			End If
			
			_dateOfContactOld = _dateOfContact
			
			If objSqlDataReader("PhoneNumAttempted") Is System.DBNull.Value Then
				_phoneNumAttempted = New SqlString("")
			Else
				_phoneNumAttempted = New SqlString(CType(objSqlDataReader("PhoneNumAttempted"), String))
			End If
			
			_phoneNumAttemptedOld = _phoneNumAttempted
			
			If objSqlDataReader("ContactNum") Is System.DBNull.Value Then
				_contactNum = SqlInt32.Null
			Else
				_contactNum = New SqlInt32(CType(objSqlDataReader("ContactNum"), Integer))
			End If
			
			_contactNumOld = _contactNum
			
			If objSqlDataReader("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objSqlDataReader("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objSqlDataReader("LogicalStatus") Is System.DBNull.Value Then
				_logicalStatus = New SqlString("")
			Else
				_logicalStatus = New SqlString(CType(objSqlDataReader("LogicalStatus"), String))
			End If
			
			_logicalStatusOld = _logicalStatus
			
			If objSqlDataReader("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objSqlDataReader("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			_source = New SqlString("")
			_sourceOld = _source
			
			
			_phoneNumAttempted = New SqlString("")
			_phoneNumAttemptedOld = _phoneNumAttempted
			
			
			_currentStatus = New SqlString("")
			_currentStatusOld = _currentStatus
			
			_logicalStatus = New SqlString("")
			_logicalStatusOld = _logicalStatus
			
			_userName = New SqlString("")
			_userNameOld = _userName
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_noteID = _noteIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_instrumentTypeID = _instrumentTypeIDOld
			
			_round = _roundOld
			
			_source = _sourceOld
			
			_dateOfContact = _dateOfContactOld
			
			_phoneNumAttempted = _phoneNumAttemptedOld
			
			_contactNum = _contactNumOld
			
			_currentStatus = _currentStatusOld
			
			_logicalStatus = _logicalStatusOld
			
			_userName = _userNameOld
			
			_notes = _notesOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>InstrumentTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Source. May be SqlString.Null</LI>
		'''		 <LI>DateOfContact. May be SqlDateTime.Null</LI>
		'''		 <LI>PhoneNumAttempted. May be SqlString.Null</LI>
		'''		 <LI>ContactNum. May be SqlInt32.Null</LI>
		'''		 <LI>CurrentStatus. May be SqlString.Null</LI>
		'''		 <LI>LogicalStatus. May be SqlString.Null</LI>
		'''		 <LI>UserName. May be SqlString.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Source", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _source))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfContact", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfContact))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneNumAttempted", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phoneNumAttempted))
				cmdToExecute.Parameters.Add(New SqlParameter("@ContactNum", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _contactNum))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@LogicalStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _logicalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(new SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_noteID = CType(cmdToExecute.Parameters.Item("@NoteID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>InstrumentTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Source. May be SqlString.Null</LI>
		'''		 <LI>DateOfContact. May be SqlDateTime.Null</LI>
		'''		 <LI>PhoneNumAttempted. May be SqlString.Null</LI>
		'''		 <LI>ContactNum. May be SqlInt32.Null</LI>
		'''		 <LI>CurrentStatus. May be SqlString.Null</LI>
		'''		 <LI>LogicalStatus. May be SqlString.Null</LI>
		'''		 <LI>UserName. May be SqlString.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Source", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _source))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfContact", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfContact))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneNumAttempted", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phoneNumAttempted))
				cmdToExecute.Parameters.Add(New SqlParameter("@ContactNum", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _contactNum))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@LogicalStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _logicalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>NoteID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>Source</LI>
		'''		 <LI>DateOfContact</LI>
		'''		 <LI>PhoneNumAttempted</LI>
		'''		 <LI>ContactNum</LI>
		'''		 <LI>CurrentStatus</LI>
		'''		 <LI>LogicalStatus</LI>
		'''		 <LI>UserName</LI>
		'''		 <LI>Notes</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCAINote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCAINote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCAINote_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCAINote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCAINote_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCAINote::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NoteID]() As SqlInt32
			Get
				Return _noteID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _noteID.Equals(Value) Then
					If _noteIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _noteID.Equals(_noteIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim noteIDTmp As SqlInt32 = Value
				If noteIDTmp.IsNull Then
					Throw New NullValueException("NoteID", "NoteID can't be NULL")
				End If
				_noteID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentTypeID]() As SqlInt32
			Get
				Return _instrumentTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentTypeID.Equals(Value) Then
					If _instrumentTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentTypeID.Equals(_instrumentTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_instrumentTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Source]() As SqlString
			Get
				Return _source
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _source.IsNull Then
					CurrentValue = _source.Value
				End If
				If Not _sourceOld.IsNull Then
					OldValue = _sourceOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_source = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateOfContact]() As SqlDateTime
			Get
				Return _dateOfContact
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateOfContact.Equals(Value) Then
					If _dateOfContactOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateOfContact.Equals(_dateOfContactOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateOfContact = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneNumAttempted]() As SqlString
			Get
				Return _phoneNumAttempted
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _phoneNumAttempted.IsNull Then
					CurrentValue = _phoneNumAttempted.Value
				End If
				If Not _phoneNumAttemptedOld.IsNull Then
					OldValue = _phoneNumAttemptedOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_phoneNumAttempted = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ContactNum]() As SqlInt32
			Get
				Return _contactNum
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _contactNum.Equals(Value) Then
					If _contactNumOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _contactNum.Equals(_contactNumOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_contactNum = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentStatus]() As SqlString
			Get
				Return _currentStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _currentStatus.IsNull Then
					CurrentValue = _currentStatus.Value
				End If
				If Not _currentStatusOld.IsNull Then
					OldValue = _currentStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_currentStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LogicalStatus]() As SqlString
			Get
				Return _logicalStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _logicalStatus.IsNull Then
					CurrentValue = _logicalStatus.Value
				End If
				If Not _logicalStatusOld.IsNull Then
					OldValue = _logicalStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_logicalStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [UserName]() As SqlString
			Get
				Return _userName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _userName.IsNull Then
					CurrentValue = _userName.Value
				End If
				If Not _userNameOld.IsNull Then
					OldValue = _userNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_userName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
