' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:40 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpStatus.
	''' </summary>

	Public Class TlkpStatus
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isCAWIStatus As SqlBoolean
		Private _isCAWIStatusOld As SqlBoolean
		Private _isHardcopyStatus As SqlBoolean
		Private _isHardcopyStatusOld As SqlBoolean
		Private _isFieldInterviewStatus As SqlBoolean
		Private _isFieldInterviewStatusOld As SqlBoolean
		Private _isCAPIStatus As SqlBoolean
		Private _isCAPIStatusOld As SqlBoolean
		Private _isCaseInLocating As SqlBoolean
		Private _isCaseInLocatingOld As SqlBoolean
		Private _isStatusAvailableInLocatingSupervisor As SqlBoolean
		Private _isStatusAvailableInLocatingSupervisorOld As SqlBoolean
		Private _isSentToCATI As SqlBoolean
		Private _isSentToCATIOld As SqlBoolean
		Private _isCaseInLocatingSupervisor As SqlBoolean
		Private _isCaseInLocatingSupervisorOld As SqlBoolean
		Private _isStatusAvailableInLocating As SqlBoolean
		Private _isStatusAvailableInLocatingOld As SqlBoolean
		Private _isActive As SqlBoolean
		Private _isActiveOld As SqlBoolean
		Private _isCATIStatus As SqlBoolean
		Private _isCATIStatusOld As SqlBoolean
		Private _isComplete As SqlBoolean
		Private _isCompleteOld As SqlBoolean
		Private _isInterimStatus As SqlBoolean
		Private _isInterimStatusOld As SqlBoolean
		Private _isFinalStatus As SqlBoolean
		Private _isFinalStatusOld As SqlBoolean

		Private _description As SqlString
		Private _descriptionOld As SqlString
		Private _code As SqlString
		Private _codeOld As SqlString
		Private _statusType As SqlString
		Private _statusTypeOld As SqlString
		Private _blaiseReturnCode As SqlString
		Private _blaiseReturnCodeOld As SqlString
		Private _altCode As SqlString
		Private _altCodeOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpStatus constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpStatus class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpStatus class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpStatus class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_code = New SqlString(CType(objDataRow("Code"), String))
			
			_codeOld = _code
			
			If objDataRow("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objDataRow("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objDataRow("AltCode") Is System.DBNull.Value Then
				_altCode = New SqlString("")
			Else
				_altCode = New SqlString(CType(objDataRow("AltCode"), String))
			End If
			
			_altCodeOld = _altCode
			
			If objDataRow("BlaiseReturnCode") Is System.DBNull.Value Then
				_blaiseReturnCode = New SqlString("")
			Else
				_blaiseReturnCode = New SqlString(CType(objDataRow("BlaiseReturnCode"), String))
			End If
			
			_blaiseReturnCodeOld = _blaiseReturnCode
			
			If objDataRow("StatusType") Is System.DBNull.Value Then
				_statusType = New SqlString("")
			Else
				_statusType = New SqlString(CType(objDataRow("StatusType"), String))
			End If
			
			_statusTypeOld = _statusType
			
			_isActive = New SqlBoolean(CType(objDataRow("IsActive"), Boolean))
			
			_isActiveOld = _isActive
			
			_isComplete = New SqlBoolean(CType(objDataRow("IsComplete"), Boolean))
			
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(CType(objDataRow("IsFinalStatus"), Boolean))
			
			_isFinalStatusOld = _isFinalStatus
			
			_isInterimStatus = New SqlBoolean(CType(objDataRow("IsInterimStatus"), Boolean))
			
			_isInterimStatusOld = _isInterimStatus
			
			_isCATIStatus = New SqlBoolean(CType(objDataRow("IsCATIStatus"), Boolean))
			
			_isCATIStatusOld = _isCATIStatus
			
			_isCAPIStatus = New SqlBoolean(CType(objDataRow("IsCAPIStatus"), Boolean))
			
			_isCAPIStatusOld = _isCAPIStatus
			
			_isCAWIStatus = New SqlBoolean(CType(objDataRow("IsCAWIStatus"), Boolean))
			
			_isCAWIStatusOld = _isCAWIStatus
			
			_isHardcopyStatus = New SqlBoolean(CType(objDataRow("IsHardcopyStatus"), Boolean))
			
			_isHardcopyStatusOld = _isHardcopyStatus
			
			_isCaseInLocating = New SqlBoolean(CType(objDataRow("IsCaseInLocating"), Boolean))
			
			_isCaseInLocatingOld = _isCaseInLocating
			
			_isCaseInLocatingSupervisor = New SqlBoolean(CType(objDataRow("IsCaseInLocatingSupervisor"), Boolean))
			
			_isCaseInLocatingSupervisorOld = _isCaseInLocatingSupervisor
			
			_isStatusAvailableInLocating = New SqlBoolean(CType(objDataRow("IsStatusAvailableInLocating"), Boolean))
			
			_isStatusAvailableInLocatingOld = _isStatusAvailableInLocating
			
			_isStatusAvailableInLocatingSupervisor = New SqlBoolean(CType(objDataRow("IsStatusAvailableInLocatingSupervisor"), Boolean))
			
			_isStatusAvailableInLocatingSupervisorOld = _isStatusAvailableInLocatingSupervisor
			
			_isSentToCATI = New SqlBoolean(CType(objDataRow("IsSentToCATI"), Boolean))
			
			_isSentToCATIOld = _isSentToCATI
			
			_isFieldInterviewStatus = New SqlBoolean(CType(objDataRow("IsFieldInterviewStatus"), Boolean))
			
			_isFieldInterviewStatusOld = _isFieldInterviewStatus
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_code = New SqlString(CType(objSqlDataReader("Code"), String))
			
			_codeOld = _code
			
			If objSqlDataReader("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objSqlDataReader("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objSqlDataReader("AltCode") Is System.DBNull.Value Then
				_altCode = New SqlString("")
			Else
				_altCode = New SqlString(CType(objSqlDataReader("AltCode"), String))
			End If
			
			_altCodeOld = _altCode
			
			If objSqlDataReader("BlaiseReturnCode") Is System.DBNull.Value Then
				_blaiseReturnCode = New SqlString("")
			Else
				_blaiseReturnCode = New SqlString(CType(objSqlDataReader("BlaiseReturnCode"), String))
			End If
			
			_blaiseReturnCodeOld = _blaiseReturnCode
			
			If objSqlDataReader("StatusType") Is System.DBNull.Value Then
				_statusType = New SqlString("")
			Else
				_statusType = New SqlString(CType(objSqlDataReader("StatusType"), String))
			End If
			
			_statusTypeOld = _statusType
			
			_isActive = New SqlBoolean(CType(objSqlDataReader("IsActive"), Boolean))
			
			_isActiveOld = _isActive
			
			_isComplete = New SqlBoolean(CType(objSqlDataReader("IsComplete"), Boolean))
			
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(CType(objSqlDataReader("IsFinalStatus"), Boolean))
			
			_isFinalStatusOld = _isFinalStatus
			
			_isInterimStatus = New SqlBoolean(CType(objSqlDataReader("IsInterimStatus"), Boolean))
			
			_isInterimStatusOld = _isInterimStatus
			
			_isCATIStatus = New SqlBoolean(CType(objSqlDataReader("IsCATIStatus"), Boolean))
			
			_isCATIStatusOld = _isCATIStatus
			
			_isCAPIStatus = New SqlBoolean(CType(objSqlDataReader("IsCAPIStatus"), Boolean))
			
			_isCAPIStatusOld = _isCAPIStatus
			
			_isCAWIStatus = New SqlBoolean(CType(objSqlDataReader("IsCAWIStatus"), Boolean))
			
			_isCAWIStatusOld = _isCAWIStatus
			
			_isHardcopyStatus = New SqlBoolean(CType(objSqlDataReader("IsHardcopyStatus"), Boolean))
			
			_isHardcopyStatusOld = _isHardcopyStatus
			
			_isCaseInLocating = New SqlBoolean(CType(objSqlDataReader("IsCaseInLocating"), Boolean))
			
			_isCaseInLocatingOld = _isCaseInLocating
			
			_isCaseInLocatingSupervisor = New SqlBoolean(CType(objSqlDataReader("IsCaseInLocatingSupervisor"), Boolean))
			
			_isCaseInLocatingSupervisorOld = _isCaseInLocatingSupervisor
			
			_isStatusAvailableInLocating = New SqlBoolean(CType(objSqlDataReader("IsStatusAvailableInLocating"), Boolean))
			
			_isStatusAvailableInLocatingOld = _isStatusAvailableInLocating
			
			_isStatusAvailableInLocatingSupervisor = New SqlBoolean(CType(objSqlDataReader("IsStatusAvailableInLocatingSupervisor"), Boolean))
			
			_isStatusAvailableInLocatingSupervisorOld = _isStatusAvailableInLocatingSupervisor
			
			_isSentToCATI = New SqlBoolean(CType(objSqlDataReader("IsSentToCATI"), Boolean))
			
			_isSentToCATIOld = _isSentToCATI
			
			_isFieldInterviewStatus = New SqlBoolean(CType(objSqlDataReader("IsFieldInterviewStatus"), Boolean))
			
			_isFieldInterviewStatusOld = _isFieldInterviewStatus
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			_code = New SqlString("")
			_codeOld = _code
			
			_description = New SqlString("")
			_descriptionOld = _description
			
			_altCode = New SqlString("")
			_altCodeOld = _altCode
			
			_blaiseReturnCode = New SqlString("")
			_blaiseReturnCodeOld = _blaiseReturnCode
			
			_statusType = New SqlString("")
			_statusTypeOld = _statusType
			
			_isActive = New SqlBoolean(False)
			_isActiveOld = _isActive
			
			_isComplete = New SqlBoolean(False)
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(False)
			_isFinalStatusOld = _isFinalStatus
			
			_isInterimStatus = New SqlBoolean(False)
			_isInterimStatusOld = _isInterimStatus
			
			_isCATIStatus = New SqlBoolean(False)
			_isCATIStatusOld = _isCATIStatus
			
			_isCAPIStatus = New SqlBoolean(False)
			_isCAPIStatusOld = _isCAPIStatus
			
			_isCAWIStatus = New SqlBoolean(False)
			_isCAWIStatusOld = _isCAWIStatus
			
			_isHardcopyStatus = New SqlBoolean(False)
			_isHardcopyStatusOld = _isHardcopyStatus
			
			_isCaseInLocating = New SqlBoolean(False)
			_isCaseInLocatingOld = _isCaseInLocating
			
			_isCaseInLocatingSupervisor = New SqlBoolean(False)
			_isCaseInLocatingSupervisorOld = _isCaseInLocatingSupervisor
			
			_isStatusAvailableInLocating = New SqlBoolean(False)
			_isStatusAvailableInLocatingOld = _isStatusAvailableInLocating
			
			_isStatusAvailableInLocatingSupervisor = New SqlBoolean(False)
			_isStatusAvailableInLocatingSupervisorOld = _isStatusAvailableInLocatingSupervisor
			
			_isSentToCATI = New SqlBoolean(False)
			_isSentToCATIOld = _isSentToCATI
			
			_isFieldInterviewStatus = New SqlBoolean(False)
			_isFieldInterviewStatusOld = _isFieldInterviewStatus
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_code = _codeOld
			
			_description = _descriptionOld
			
			_altCode = _altCodeOld
			
			_blaiseReturnCode = _blaiseReturnCodeOld
			
			_statusType = _statusTypeOld
			
			_isActive = _isActiveOld
			
			_isComplete = _isCompleteOld
			
			_isFinalStatus = _isFinalStatusOld
			
			_isInterimStatus = _isInterimStatusOld
			
			_isCATIStatus = _isCATIStatusOld
			
			_isCAPIStatus = _isCAPIStatusOld
			
			_isCAWIStatus = _isCAWIStatusOld
			
			_isHardcopyStatus = _isHardcopyStatusOld
			
			_isCaseInLocating = _isCaseInLocatingOld
			
			_isCaseInLocatingSupervisor = _isCaseInLocatingSupervisorOld
			
			_isStatusAvailableInLocating = _isStatusAvailableInLocatingOld
			
			_isStatusAvailableInLocatingSupervisor = _isStatusAvailableInLocatingSupervisorOld
			
			_isSentToCATI = _isSentToCATIOld
			
			_isFieldInterviewStatus = _isFieldInterviewStatusOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Code</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>AltCode. May be SqlString.Null</LI>
		'''		 <LI>BlaiseReturnCode. May be SqlString.Null</LI>
		'''		 <LI>StatusType. May be SqlString.Null</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>IsComplete</LI>
		'''		 <LI>IsFinalStatus</LI>
		'''		 <LI>IsInterimStatus</LI>
		'''		 <LI>IsCATIStatus</LI>
		'''		 <LI>IsCAPIStatus</LI>
		'''		 <LI>IsCAWIStatus</LI>
		'''		 <LI>IsHardcopyStatus</LI>
		'''		 <LI>IsCaseInLocating</LI>
		'''		 <LI>IsCaseInLocatingSupervisor</LI>
		'''		 <LI>IsStatusAvailableInLocating</LI>
		'''		 <LI>IsStatusAvailableInLocatingSupervisor</LI>
		'''		 <LI>IsSentToCATI</LI>
		'''		 <LI>IsFieldInterviewStatus</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpStatus_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Code", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _code))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaiseReturnCode", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _blaiseReturnCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusType", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusType))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsComplete", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isComplete))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFinalStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFinalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsInterimStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isInterimStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCATIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCATIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAPIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCAPIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAWIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCAWIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHardcopyStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isHardcopyStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCaseInLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCaseInLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCaseInLocatingSupervisor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCaseInLocatingSupervisor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsStatusAvailableInLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isStatusAvailableInLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsStatusAvailableInLocatingSupervisor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isStatusAvailableInLocatingSupervisor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSentToCATI", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isSentToCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldInterviewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFieldInterviewStatus))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpStatus_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpStatus::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Code</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>AltCode. May be SqlString.Null</LI>
		'''		 <LI>BlaiseReturnCode. May be SqlString.Null</LI>
		'''		 <LI>StatusType. May be SqlString.Null</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>IsComplete</LI>
		'''		 <LI>IsFinalStatus</LI>
		'''		 <LI>IsInterimStatus</LI>
		'''		 <LI>IsCATIStatus</LI>
		'''		 <LI>IsCAPIStatus</LI>
		'''		 <LI>IsCAWIStatus</LI>
		'''		 <LI>IsHardcopyStatus</LI>
		'''		 <LI>IsCaseInLocating</LI>
		'''		 <LI>IsCaseInLocatingSupervisor</LI>
		'''		 <LI>IsStatusAvailableInLocating</LI>
		'''		 <LI>IsStatusAvailableInLocatingSupervisor</LI>
		'''		 <LI>IsSentToCATI</LI>
		'''		 <LI>IsFieldInterviewStatus</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpStatus_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Code", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _code))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaiseReturnCode", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _blaiseReturnCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusType", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusType))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsComplete", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isComplete))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFinalStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFinalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsInterimStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isInterimStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCATIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCATIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAPIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCAPIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAWIStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCAWIStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHardcopyStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isHardcopyStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCaseInLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCaseInLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCaseInLocatingSupervisor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isCaseInLocatingSupervisor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsStatusAvailableInLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isStatusAvailableInLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsStatusAvailableInLocatingSupervisor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isStatusAvailableInLocatingSupervisor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSentToCATI", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isSentToCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldInterviewStatus", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFieldInterviewStatus))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpStatus_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpStatus::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Code</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpStatus_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Code", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _code))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpStatus_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpStatus::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Code</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>Code</LI>
		'''		 <LI>Description</LI>
		'''		 <LI>AltCode</LI>
		'''		 <LI>BlaiseReturnCode</LI>
		'''		 <LI>StatusType</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>IsComplete</LI>
		'''		 <LI>IsFinalStatus</LI>
		'''		 <LI>IsInterimStatus</LI>
		'''		 <LI>IsCATIStatus</LI>
		'''		 <LI>IsCAPIStatus</LI>
		'''		 <LI>IsCAWIStatus</LI>
		'''		 <LI>IsHardcopyStatus</LI>
		'''		 <LI>IsCaseInLocating</LI>
		'''		 <LI>IsCaseInLocatingSupervisor</LI>
		'''		 <LI>IsStatusAvailableInLocating</LI>
		'''		 <LI>IsStatusAvailableInLocatingSupervisor</LI>
		'''		 <LI>IsSentToCATI</LI>
		'''		 <LI>IsFieldInterviewStatus</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpStatus_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@Code", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _code))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpStatus_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpStatus::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpStatus_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpStatus_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpStatus::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Code]() As SqlString
			Get
				Return _code
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _code.IsNull Then
					CurrentValue = _code.Value
				End If
				If Not _codeOld.IsNull Then
					OldValue = _codeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim codeTmp As SqlString = Value
				If codeTmp.IsNull Then
					Throw New NullValueException("Code", "Code can't be NULL")
				End If
				_code = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Description]() As SqlString
			Get
				Return _description
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _description.IsNull Then
					CurrentValue = _description.Value
				End If
				If Not _descriptionOld.IsNull Then
					OldValue = _descriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_description = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltCode]() As SqlString
			Get
				Return _altCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altCode.IsNull Then
					CurrentValue = _altCode.Value
				End If
				If Not _altCodeOld.IsNull Then
					OldValue = _altCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BlaiseReturnCode]() As SqlString
			Get
				Return _blaiseReturnCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _blaiseReturnCode.IsNull Then
					CurrentValue = _blaiseReturnCode.Value
				End If
				If Not _blaiseReturnCodeOld.IsNull Then
					OldValue = _blaiseReturnCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_blaiseReturnCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusType]() As SqlString
			Get
				Return _statusType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _statusType.IsNull Then
					CurrentValue = _statusType.Value
				End If
				If Not _statusTypeOld.IsNull Then
					OldValue = _statusTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_statusType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsActive]() As SqlBoolean
			Get
				Return _isActive
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isActive.Equals(Value) Then
					If _isActiveOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isActive.Equals(_isActiveOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isActive = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsComplete]() As SqlBoolean
			Get
				Return _isComplete
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isComplete.Equals(Value) Then
					If _isCompleteOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isComplete.Equals(_isCompleteOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isComplete = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsFinalStatus]() As SqlBoolean
			Get
				Return _isFinalStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isFinalStatus.Equals(Value) Then
					If _isFinalStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isFinalStatus.Equals(_isFinalStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isFinalStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsInterimStatus]() As SqlBoolean
			Get
				Return _isInterimStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isInterimStatus.Equals(Value) Then
					If _isInterimStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isInterimStatus.Equals(_isInterimStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isInterimStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCATIStatus]() As SqlBoolean
			Get
				Return _isCATIStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCATIStatus.Equals(Value) Then
					If _isCATIStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCATIStatus.Equals(_isCATIStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCATIStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCAPIStatus]() As SqlBoolean
			Get
				Return _isCAPIStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCAPIStatus.Equals(Value) Then
					If _isCAPIStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCAPIStatus.Equals(_isCAPIStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCAPIStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCAWIStatus]() As SqlBoolean
			Get
				Return _isCAWIStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCAWIStatus.Equals(Value) Then
					If _isCAWIStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCAWIStatus.Equals(_isCAWIStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCAWIStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsHardcopyStatus]() As SqlBoolean
			Get
				Return _isHardcopyStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isHardcopyStatus.Equals(Value) Then
					If _isHardcopyStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isHardcopyStatus.Equals(_isHardcopyStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isHardcopyStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCaseInLocating]() As SqlBoolean
			Get
				Return _isCaseInLocating
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCaseInLocating.Equals(Value) Then
					If _isCaseInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCaseInLocating.Equals(_isCaseInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCaseInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCaseInLocatingSupervisor]() As SqlBoolean
			Get
				Return _isCaseInLocatingSupervisor
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCaseInLocatingSupervisor.Equals(Value) Then
					If _isCaseInLocatingSupervisorOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCaseInLocatingSupervisor.Equals(_isCaseInLocatingSupervisorOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCaseInLocatingSupervisor = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsStatusAvailableInLocating]() As SqlBoolean
			Get
				Return _isStatusAvailableInLocating
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isStatusAvailableInLocating.Equals(Value) Then
					If _isStatusAvailableInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isStatusAvailableInLocating.Equals(_isStatusAvailableInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isStatusAvailableInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsStatusAvailableInLocatingSupervisor]() As SqlBoolean
			Get
				Return _isStatusAvailableInLocatingSupervisor
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isStatusAvailableInLocatingSupervisor.Equals(Value) Then
					If _isStatusAvailableInLocatingSupervisorOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isStatusAvailableInLocatingSupervisor.Equals(_isStatusAvailableInLocatingSupervisorOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isStatusAvailableInLocatingSupervisor = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsSentToCATI]() As SqlBoolean
			Get
				Return _isSentToCATI
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSentToCATI.Equals(Value) Then
					If _isSentToCATIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSentToCATI.Equals(_isSentToCATIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSentToCATI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsFieldInterviewStatus]() As SqlBoolean
			Get
				Return _isFieldInterviewStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isFieldInterviewStatus.Equals(Value) Then
					If _isFieldInterviewStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isFieldInterviewStatus.Equals(_isFieldInterviewStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isFieldInterviewStatus = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
