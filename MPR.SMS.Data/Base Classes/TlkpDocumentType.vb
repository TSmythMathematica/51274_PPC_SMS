' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:36 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpDocumentType.
	''' </summary>

	Public Class TlkpDocumentType
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isDisplayed As SqlBoolean
		Private _isDisplayedOld As SqlBoolean
		Private _allowMultipleAdds As SqlBoolean
		Private _allowMultipleAddsOld As SqlBoolean
		Private _allowOnTheFlyAdd As SqlBoolean
		Private _allowOnTheFlyAddOld As SqlBoolean
		Private _isDocument As SqlBoolean
		Private _isDocumentOld As SqlBoolean
		Private _isSSRS As SqlBoolean
		Private _isSSRSOld As SqlBoolean
		Private _isSendToLocating As SqlBoolean
		Private _isSendToLocatingOld As SqlBoolean
		Private _isActive As SqlBoolean
		Private _isActiveOld As SqlBoolean
		Private _isForwardingAddressRemail As SqlBoolean
		Private _isForwardingAddressRemailOld As SqlBoolean
		Private _isNoForwardingAddressRemail As SqlBoolean
		Private _isNoForwardingAddressRemailOld As SqlBoolean

		Private _mailType As SqlString
		Private _mailTypeOld As SqlString

		Private _instrumentTypeId As SqlInt32
		Private _instrumentTypeIdOld As SqlInt32
		Private _useMapping As SqlInt32
		Private _useMappingOld As SqlInt32
		Private _groupOrder As SqlInt32
		Private _groupOrderOld As SqlInt32
		Private _documentGroupID As SqlInt32
		Private _documentGroupIDOld As SqlInt32
		Private _documentTypeID As SqlInt32
		Private _documentTypeIDOld As SqlInt32
		Private _baseDocTypeID As SqlInt32
		Private _baseDocTypeIDOld As SqlInt32
		Private _documentOutputTypeID As SqlInt32
		Private _documentOutputTypeIDOld As SqlInt32

		Private _crystalReportShellFileName As SqlString
		Private _crystalReportShellFileNameOld As SqlString
		Private _name As SqlString
		Private _nameOld As SqlString
		Private _description As SqlString
		Private _descriptionOld As SqlString
		Private _outputFileName As SqlString
		Private _outputFileNameOld As SqlString
		Private _outputFilePath As SqlString
		Private _outputFilePathOld As SqlString
		Private _crystalReportShellFilePath As SqlString
		Private _crystalReportShellFilePathOld As SqlString
		Private _sampleFilePathName As SqlString
		Private _sampleFilePathNameOld As SqlString
		Private _dataSourceStoredProc As SqlString
		Private _dataSourceStoredProcOld As SqlString
		Private _actionOnSend As SqlString
		Private _actionOnSendOld As SqlString
		Private _actionOnScanning As SqlString
		Private _actionOnScanningOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpDocumentType constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpDocumentType class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpDocumentType class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpDocumentType class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_documentTypeID = New SqlInt32(CType(objDataRow("DocumentTypeID"), Integer))
			
			_documentTypeIDOld = _documentTypeID
			
			If objDataRow("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objDataRow("Name"), String))
			End If
			
			_nameOld = _name
			
			If objDataRow("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objDataRow("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objDataRow("DocumentGroupID") Is System.DBNull.Value Then
				_documentGroupID = SqlInt32.Null
			Else
				_documentGroupID = New SqlInt32(CType(objDataRow("DocumentGroupID"), Integer))
			End If
			
			_documentGroupIDOld = _documentGroupID
			
			If objDataRow("GroupOrder") Is System.DBNull.Value Then
				_groupOrder = SqlInt32.Null
			Else
				_groupOrder = New SqlInt32(CType(objDataRow("GroupOrder"), Integer))
			End If
			
			_groupOrderOld = _groupOrder
			
			If objDataRow("IsActive") Is System.DBNull.Value Then
				_isActive = New SqlBoolean(False)
			Else
				_isActive = New SqlBoolean(CType(objDataRow("IsActive"), Boolean))
			End If
			
			_isActiveOld = _isActive
			
			If objDataRow("IsDisplayed") Is System.DBNull.Value Then
				_isDisplayed = New SqlBoolean(False)
			Else
				_isDisplayed = New SqlBoolean(CType(objDataRow("IsDisplayed"), Boolean))
			End If
			
			_isDisplayedOld = _isDisplayed
			
			If objDataRow("BaseDocTypeID") Is System.DBNull.Value Then
				_baseDocTypeID = SqlInt32.Null
			Else
				_baseDocTypeID = New SqlInt32(CType(objDataRow("BaseDocTypeID"), Integer))
			End If
			
			_baseDocTypeIDOld = _baseDocTypeID
			
			If objDataRow("AllowOnTheFlyAdd") Is System.DBNull.Value Then
				_allowOnTheFlyAdd = New SqlBoolean(False)
			Else
				_allowOnTheFlyAdd = New SqlBoolean(CType(objDataRow("AllowOnTheFlyAdd"), Boolean))
			End If
			
			_allowOnTheFlyAddOld = _allowOnTheFlyAdd
			
			If objDataRow("AllowMultipleAdds") Is System.DBNull.Value Then
				_allowMultipleAdds = New SqlBoolean(False)
			Else
				_allowMultipleAdds = New SqlBoolean(CType(objDataRow("AllowMultipleAdds"), Boolean))
			End If
			
			_allowMultipleAddsOld = _allowMultipleAdds
			
			If objDataRow("DataSourceStoredProc") Is System.DBNull.Value Then
				_dataSourceStoredProc = New SqlString("")
			Else
				_dataSourceStoredProc = New SqlString(CType(objDataRow("DataSourceStoredProc"), String))
			End If
			
			_dataSourceStoredProcOld = _dataSourceStoredProc
			
			_documentOutputTypeID = New SqlInt32(CType(objDataRow("DocumentOutputTypeID"), Integer))
			
			_documentOutputTypeIDOld = _documentOutputTypeID
			
			If objDataRow("CrystalReportShellFilePath") Is System.DBNull.Value Then
				_crystalReportShellFilePath = New SqlString("")
			Else
				_crystalReportShellFilePath = New SqlString(CType(objDataRow("CrystalReportShellFilePath"), String))
			End If
			
			_crystalReportShellFilePathOld = _crystalReportShellFilePath
			
			If objDataRow("CrystalReportShellFileName") Is System.DBNull.Value Then
				_crystalReportShellFileName = New SqlString("")
			Else
				_crystalReportShellFileName = New SqlString(CType(objDataRow("CrystalReportShellFileName"), String))
			End If
			
			_crystalReportShellFileNameOld = _crystalReportShellFileName
			
			If objDataRow("OutputFilePath") Is System.DBNull.Value Then
				_outputFilePath = New SqlString("")
			Else
				_outputFilePath = New SqlString(CType(objDataRow("OutputFilePath"), String))
			End If
			
			_outputFilePathOld = _outputFilePath
			
			If objDataRow("OutputFileName") Is System.DBNull.Value Then
				_outputFileName = New SqlString("")
			Else
				_outputFileName = New SqlString(CType(objDataRow("OutputFileName"), String))
			End If
			
			_outputFileNameOld = _outputFileName
			
			If objDataRow("SampleFilePathName") Is System.DBNull.Value Then
				_sampleFilePathName = New SqlString("")
			Else
				_sampleFilePathName = New SqlString(CType(objDataRow("SampleFilePathName"), String))
			End If
			
			_sampleFilePathNameOld = _sampleFilePathName
			
			If objDataRow("ActionOnScanning") Is System.DBNull.Value Then
				_actionOnScanning = New SqlString("")
			Else
				_actionOnScanning = New SqlString(CType(objDataRow("ActionOnScanning"), String))
			End If
			
			_actionOnScanningOld = _actionOnScanning
			
			If objDataRow("ActionOnSend") Is System.DBNull.Value Then
				_actionOnSend = New SqlString("")
			Else
				_actionOnSend = New SqlString(CType(objDataRow("ActionOnSend"), String))
			End If
			
			_actionOnSendOld = _actionOnSend
			
			If objDataRow("UseMapping") Is System.DBNull.Value Then
				_useMapping = SqlInt32.Null
			Else
				_useMapping = New SqlInt32(CType(objDataRow("UseMapping"), Integer))
			End If
			
			_useMappingOld = _useMapping
			
			If objDataRow("IsDocument") Is System.DBNull.Value Then
				_isDocument = New SqlBoolean(False)
			Else
				_isDocument = New SqlBoolean(CType(objDataRow("IsDocument"), Boolean))
			End If
			
			_isDocumentOld = _isDocument
			
			If objDataRow("IsSSRS") Is System.DBNull.Value Then
				_isSSRS = New SqlBoolean(False)
			Else
				_isSSRS = New SqlBoolean(CType(objDataRow("IsSSRS"), Boolean))
			End If
			
			_isSSRSOld = _isSSRS
			
			If objDataRow("IsForwardingAddressRemail") Is System.DBNull.Value Then
				_isForwardingAddressRemail = New SqlBoolean(False)
			Else
				_isForwardingAddressRemail = New SqlBoolean(CType(objDataRow("IsForwardingAddressRemail"), Boolean))
			End If
			
			_isForwardingAddressRemailOld = _isForwardingAddressRemail
			
			If objDataRow("IsNoForwardingAddressRemail") Is System.DBNull.Value Then
				_isNoForwardingAddressRemail = New SqlBoolean(False)
			Else
				_isNoForwardingAddressRemail = New SqlBoolean(CType(objDataRow("IsNoForwardingAddressRemail"), Boolean))
			End If
			
			_isNoForwardingAddressRemailOld = _isNoForwardingAddressRemail
			
			If objDataRow("IsSendToLocating") Is System.DBNull.Value Then
				_isSendToLocating = New SqlBoolean(False)
			Else
				_isSendToLocating = New SqlBoolean(CType(objDataRow("IsSendToLocating"), Boolean))
			End If
			
			_isSendToLocatingOld = _isSendToLocating
			
			If objDataRow("MailType") Is System.DBNull.Value Then
				_mailType = New SqlString("")
			Else
				_mailType = New SqlString(CType(objDataRow("MailType"), String))
			End If
			
			_mailTypeOld = _mailType
			
			If objDataRow("InstrumentTypeId") Is System.DBNull.Value Then
				_instrumentTypeId = SqlInt32.Null
			Else
				_instrumentTypeId = New SqlInt32(CType(objDataRow("InstrumentTypeId"), Integer))
			End If
			
			_instrumentTypeIdOld = _instrumentTypeId
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_documentTypeID = New SqlInt32(CType(objSqlDataReader("DocumentTypeID"), Integer))
			
			_documentTypeIDOld = _documentTypeID
			
			If objSqlDataReader("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objSqlDataReader("Name"), String))
			End If
			
			_nameOld = _name
			
			If objSqlDataReader("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objSqlDataReader("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objSqlDataReader("DocumentGroupID") Is System.DBNull.Value Then
				_documentGroupID = SqlInt32.Null
			Else
				_documentGroupID = New SqlInt32(CType(objSqlDataReader("DocumentGroupID"), Integer))
			End If
			
			_documentGroupIDOld = _documentGroupID
			
			If objSqlDataReader("GroupOrder") Is System.DBNull.Value Then
				_groupOrder = SqlInt32.Null
			Else
				_groupOrder = New SqlInt32(CType(objSqlDataReader("GroupOrder"), Integer))
			End If
			
			_groupOrderOld = _groupOrder
			
			If objSqlDataReader("IsActive") Is System.DBNull.Value Then
				_isActive = New SqlBoolean(False)
			Else
				_isActive = New SqlBoolean(CType(objSqlDataReader("IsActive"), Boolean))
			End If
			
			_isActiveOld = _isActive
			
			If objSqlDataReader("IsDisplayed") Is System.DBNull.Value Then
				_isDisplayed = New SqlBoolean(False)
			Else
				_isDisplayed = New SqlBoolean(CType(objSqlDataReader("IsDisplayed"), Boolean))
			End If
			
			_isDisplayedOld = _isDisplayed
			
			If objSqlDataReader("BaseDocTypeID") Is System.DBNull.Value Then
				_baseDocTypeID = SqlInt32.Null
			Else
				_baseDocTypeID = New SqlInt32(CType(objSqlDataReader("BaseDocTypeID"), Integer))
			End If
			
			_baseDocTypeIDOld = _baseDocTypeID
			
			If objSqlDataReader("AllowOnTheFlyAdd") Is System.DBNull.Value Then
				_allowOnTheFlyAdd = New SqlBoolean(False)
			Else
				_allowOnTheFlyAdd = New SqlBoolean(CType(objSqlDataReader("AllowOnTheFlyAdd"), Boolean))
			End If
			
			_allowOnTheFlyAddOld = _allowOnTheFlyAdd
			
			If objSqlDataReader("AllowMultipleAdds") Is System.DBNull.Value Then
				_allowMultipleAdds = New SqlBoolean(False)
			Else
				_allowMultipleAdds = New SqlBoolean(CType(objSqlDataReader("AllowMultipleAdds"), Boolean))
			End If
			
			_allowMultipleAddsOld = _allowMultipleAdds
			
			If objSqlDataReader("DataSourceStoredProc") Is System.DBNull.Value Then
				_dataSourceStoredProc = New SqlString("")
			Else
				_dataSourceStoredProc = New SqlString(CType(objSqlDataReader("DataSourceStoredProc"), String))
			End If
			
			_dataSourceStoredProcOld = _dataSourceStoredProc
			
			_documentOutputTypeID = New SqlInt32(CType(objSqlDataReader("DocumentOutputTypeID"), Integer))
			
			_documentOutputTypeIDOld = _documentOutputTypeID
			
			If objSqlDataReader("CrystalReportShellFilePath") Is System.DBNull.Value Then
				_crystalReportShellFilePath = New SqlString("")
			Else
				_crystalReportShellFilePath = New SqlString(CType(objSqlDataReader("CrystalReportShellFilePath"), String))
			End If
			
			_crystalReportShellFilePathOld = _crystalReportShellFilePath
			
			If objSqlDataReader("CrystalReportShellFileName") Is System.DBNull.Value Then
				_crystalReportShellFileName = New SqlString("")
			Else
				_crystalReportShellFileName = New SqlString(CType(objSqlDataReader("CrystalReportShellFileName"), String))
			End If
			
			_crystalReportShellFileNameOld = _crystalReportShellFileName
			
			If objSqlDataReader("OutputFilePath") Is System.DBNull.Value Then
				_outputFilePath = New SqlString("")
			Else
				_outputFilePath = New SqlString(CType(objSqlDataReader("OutputFilePath"), String))
			End If
			
			_outputFilePathOld = _outputFilePath
			
			If objSqlDataReader("OutputFileName") Is System.DBNull.Value Then
				_outputFileName = New SqlString("")
			Else
				_outputFileName = New SqlString(CType(objSqlDataReader("OutputFileName"), String))
			End If
			
			_outputFileNameOld = _outputFileName
			
			If objSqlDataReader("SampleFilePathName") Is System.DBNull.Value Then
				_sampleFilePathName = New SqlString("")
			Else
				_sampleFilePathName = New SqlString(CType(objSqlDataReader("SampleFilePathName"), String))
			End If
			
			_sampleFilePathNameOld = _sampleFilePathName
			
			If objSqlDataReader("ActionOnScanning") Is System.DBNull.Value Then
				_actionOnScanning = New SqlString("")
			Else
				_actionOnScanning = New SqlString(CType(objSqlDataReader("ActionOnScanning"), String))
			End If
			
			_actionOnScanningOld = _actionOnScanning
			
			If objSqlDataReader("ActionOnSend") Is System.DBNull.Value Then
				_actionOnSend = New SqlString("")
			Else
				_actionOnSend = New SqlString(CType(objSqlDataReader("ActionOnSend"), String))
			End If
			
			_actionOnSendOld = _actionOnSend
			
			If objSqlDataReader("UseMapping") Is System.DBNull.Value Then
				_useMapping = SqlInt32.Null
			Else
				_useMapping = New SqlInt32(CType(objSqlDataReader("UseMapping"), Integer))
			End If
			
			_useMappingOld = _useMapping
			
			If objSqlDataReader("IsDocument") Is System.DBNull.Value Then
				_isDocument = New SqlBoolean(False)
			Else
				_isDocument = New SqlBoolean(CType(objSqlDataReader("IsDocument"), Boolean))
			End If
			
			_isDocumentOld = _isDocument
			
			If objSqlDataReader("IsSSRS") Is System.DBNull.Value Then
				_isSSRS = New SqlBoolean(False)
			Else
				_isSSRS = New SqlBoolean(CType(objSqlDataReader("IsSSRS"), Boolean))
			End If
			
			_isSSRSOld = _isSSRS
			
			If objSqlDataReader("IsForwardingAddressRemail") Is System.DBNull.Value Then
				_isForwardingAddressRemail = New SqlBoolean(False)
			Else
				_isForwardingAddressRemail = New SqlBoolean(CType(objSqlDataReader("IsForwardingAddressRemail"), Boolean))
			End If
			
			_isForwardingAddressRemailOld = _isForwardingAddressRemail
			
			If objSqlDataReader("IsNoForwardingAddressRemail") Is System.DBNull.Value Then
				_isNoForwardingAddressRemail = New SqlBoolean(False)
			Else
				_isNoForwardingAddressRemail = New SqlBoolean(CType(objSqlDataReader("IsNoForwardingAddressRemail"), Boolean))
			End If
			
			_isNoForwardingAddressRemailOld = _isNoForwardingAddressRemail
			
			If objSqlDataReader("IsSendToLocating") Is System.DBNull.Value Then
				_isSendToLocating = New SqlBoolean(False)
			Else
				_isSendToLocating = New SqlBoolean(CType(objSqlDataReader("IsSendToLocating"), Boolean))
			End If
			
			_isSendToLocatingOld = _isSendToLocating
			
			If objSqlDataReader("MailType") Is System.DBNull.Value Then
				_mailType = New SqlString("")
			Else
				_mailType = New SqlString(CType(objSqlDataReader("MailType"), String))
			End If
			
			_mailTypeOld = _mailType
			
			If objSqlDataReader("InstrumentTypeId") Is System.DBNull.Value Then
				_instrumentTypeId = SqlInt32.Null
			Else
				_instrumentTypeId = New SqlInt32(CType(objSqlDataReader("InstrumentTypeId"), Integer))
			End If
			
			_instrumentTypeIdOld = _instrumentTypeId
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_name = New SqlString("")
			_nameOld = _name
			
			_description = New SqlString("")
			_descriptionOld = _description
			
			
			
			_isActive = New SqlBoolean(False)
			_isActiveOld = _isActive
			
			_isDisplayed = New SqlBoolean(False)
			_isDisplayedOld = _isDisplayed
			
			
			_allowOnTheFlyAdd = New SqlBoolean(False)
			_allowOnTheFlyAddOld = _allowOnTheFlyAdd
			
			_allowMultipleAdds = New SqlBoolean(False)
			_allowMultipleAddsOld = _allowMultipleAdds
			
			_dataSourceStoredProc = New SqlString("")
			_dataSourceStoredProcOld = _dataSourceStoredProc
			
			
			_crystalReportShellFilePath = New SqlString("")
			_crystalReportShellFilePathOld = _crystalReportShellFilePath
			
			_crystalReportShellFileName = New SqlString("")
			_crystalReportShellFileNameOld = _crystalReportShellFileName
			
			_outputFilePath = New SqlString("")
			_outputFilePathOld = _outputFilePath
			
			_outputFileName = New SqlString("")
			_outputFileNameOld = _outputFileName
			
			_sampleFilePathName = New SqlString("")
			_sampleFilePathNameOld = _sampleFilePathName
			
			_actionOnScanning = New SqlString("")
			_actionOnScanningOld = _actionOnScanning
			
			_actionOnSend = New SqlString("")
			_actionOnSendOld = _actionOnSend
			
			
			_isDocument = New SqlBoolean(False)
			_isDocumentOld = _isDocument
			
			_isSSRS = New SqlBoolean(False)
			_isSSRSOld = _isSSRS
			
			_isForwardingAddressRemail = New SqlBoolean(False)
			_isForwardingAddressRemailOld = _isForwardingAddressRemail
			
			_isNoForwardingAddressRemail = New SqlBoolean(False)
			_isNoForwardingAddressRemailOld = _isNoForwardingAddressRemail
			
			_isSendToLocating = New SqlBoolean(False)
			_isSendToLocatingOld = _isSendToLocating
			
			_mailType = New SqlString("")
			_mailTypeOld = _mailType
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_documentTypeID = _documentTypeIDOld
			
			_name = _nameOld
			
			_description = _descriptionOld
			
			_documentGroupID = _documentGroupIDOld
			
			_groupOrder = _groupOrderOld
			
			_isActive = _isActiveOld
			
			_isDisplayed = _isDisplayedOld
			
			_baseDocTypeID = _baseDocTypeIDOld
			
			_allowOnTheFlyAdd = _allowOnTheFlyAddOld
			
			_allowMultipleAdds = _allowMultipleAddsOld
			
			_dataSourceStoredProc = _dataSourceStoredProcOld
			
			_documentOutputTypeID = _documentOutputTypeIDOld
			
			_crystalReportShellFilePath = _crystalReportShellFilePathOld
			
			_crystalReportShellFileName = _crystalReportShellFileNameOld
			
			_outputFilePath = _outputFilePathOld
			
			_outputFileName = _outputFileNameOld
			
			_sampleFilePathName = _sampleFilePathNameOld
			
			_actionOnScanning = _actionOnScanningOld
			
			_actionOnSend = _actionOnSendOld
			
			_useMapping = _useMappingOld
			
			_isDocument = _isDocumentOld
			
			_isSSRS = _isSSRSOld
			
			_isForwardingAddressRemail = _isForwardingAddressRemailOld
			
			_isNoForwardingAddressRemail = _isNoForwardingAddressRemailOld
			
			_isSendToLocating = _isSendToLocatingOld
			
			_mailType = _mailTypeOld
			
			_instrumentTypeId = _instrumentTypeIdOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentTypeID</LI>
		'''		 <LI>Name. May be SqlString.Null</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>DocumentGroupID. May be SqlInt32.Null</LI>
		'''		 <LI>GroupOrder. May be SqlInt32.Null</LI>
		'''		 <LI>IsActive. May be SqlBoolean.Null</LI>
		'''		 <LI>IsDisplayed. May be SqlBoolean.Null</LI>
		'''		 <LI>BaseDocTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>AllowOnTheFlyAdd. May be SqlBoolean.Null</LI>
		'''		 <LI>AllowMultipleAdds. May be SqlBoolean.Null</LI>
		'''		 <LI>DataSourceStoredProc. May be SqlString.Null</LI>
		'''		 <LI>DocumentOutputTypeID</LI>
		'''		 <LI>CrystalReportShellFilePath. May be SqlString.Null</LI>
		'''		 <LI>CrystalReportShellFileName. May be SqlString.Null</LI>
		'''		 <LI>OutputFilePath. May be SqlString.Null</LI>
		'''		 <LI>OutputFileName. May be SqlString.Null</LI>
		'''		 <LI>SampleFilePathName. May be SqlString.Null</LI>
		'''		 <LI>ActionOnScanning. May be SqlString.Null</LI>
		'''		 <LI>ActionOnSend. May be SqlString.Null</LI>
		'''		 <LI>UseMapping. May be SqlInt32.Null</LI>
		'''		 <LI>IsDocument. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSSRS. May be SqlBoolean.Null</LI>
		'''		 <LI>IsForwardingAddressRemail. May be SqlBoolean.Null</LI>
		'''		 <LI>IsNoForwardingAddressRemail. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSendToLocating. May be SqlBoolean.Null</LI>
		'''		 <LI>MailType. May be SqlString.Null</LI>
		'''		 <LI>InstrumentTypeId. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Name", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _name))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentGroupID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentGroupID))
				cmdToExecute.Parameters.Add(New SqlParameter("@GroupOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _groupOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsDisplayed", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isDisplayed))
				cmdToExecute.Parameters.Add(New SqlParameter("@BaseDocTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _baseDocTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowOnTheFlyAdd", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _allowOnTheFlyAdd))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowMultipleAdds", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _allowMultipleAdds))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataSourceStoredProc", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataSourceStoredProc))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentOutputTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentOutputTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CrystalReportShellFilePath", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _crystalReportShellFilePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@CrystalReportShellFileName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _crystalReportShellFileName))
				cmdToExecute.Parameters.Add(New SqlParameter("@OutputFilePath", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _outputFilePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@OutputFileName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _outputFileName))
				cmdToExecute.Parameters.Add(New SqlParameter("@SampleFilePathName", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sampleFilePathName))
				cmdToExecute.Parameters.Add(New SqlParameter("@ActionOnScanning", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _actionOnScanning))
				cmdToExecute.Parameters.Add(New SqlParameter("@ActionOnSend", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _actionOnSend))
				cmdToExecute.Parameters.Add(New SqlParameter("@UseMapping", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _useMapping))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsDocument", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isDocument))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSSRS", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSSRS))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForwardingAddressRemail", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isForwardingAddressRemail))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsNoForwardingAddressRemail", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isNoForwardingAddressRemail))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSendToLocating", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSendToLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@MailType", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mailType))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeId", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeId))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentTypeID</LI>
		'''		 <LI>Name. May be SqlString.Null</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>DocumentGroupID. May be SqlInt32.Null</LI>
		'''		 <LI>GroupOrder. May be SqlInt32.Null</LI>
		'''		 <LI>IsActive. May be SqlBoolean.Null</LI>
		'''		 <LI>IsDisplayed. May be SqlBoolean.Null</LI>
		'''		 <LI>BaseDocTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>AllowOnTheFlyAdd. May be SqlBoolean.Null</LI>
		'''		 <LI>AllowMultipleAdds. May be SqlBoolean.Null</LI>
		'''		 <LI>DataSourceStoredProc. May be SqlString.Null</LI>
		'''		 <LI>DocumentOutputTypeID</LI>
		'''		 <LI>CrystalReportShellFilePath. May be SqlString.Null</LI>
		'''		 <LI>CrystalReportShellFileName. May be SqlString.Null</LI>
		'''		 <LI>OutputFilePath. May be SqlString.Null</LI>
		'''		 <LI>OutputFileName. May be SqlString.Null</LI>
		'''		 <LI>SampleFilePathName. May be SqlString.Null</LI>
		'''		 <LI>ActionOnScanning. May be SqlString.Null</LI>
		'''		 <LI>ActionOnSend. May be SqlString.Null</LI>
		'''		 <LI>UseMapping. May be SqlInt32.Null</LI>
		'''		 <LI>IsDocument. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSSRS. May be SqlBoolean.Null</LI>
		'''		 <LI>IsForwardingAddressRemail. May be SqlBoolean.Null</LI>
		'''		 <LI>IsNoForwardingAddressRemail. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSendToLocating. May be SqlBoolean.Null</LI>
		'''		 <LI>MailType. May be SqlString.Null</LI>
		'''		 <LI>InstrumentTypeId. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Name", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _name))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentGroupID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentGroupID))
				cmdToExecute.Parameters.Add(New SqlParameter("@GroupOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _groupOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsDisplayed", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isDisplayed))
				cmdToExecute.Parameters.Add(New SqlParameter("@BaseDocTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _baseDocTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowOnTheFlyAdd", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _allowOnTheFlyAdd))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowMultipleAdds", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _allowMultipleAdds))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataSourceStoredProc", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataSourceStoredProc))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentOutputTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentOutputTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CrystalReportShellFilePath", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _crystalReportShellFilePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@CrystalReportShellFileName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _crystalReportShellFileName))
				cmdToExecute.Parameters.Add(New SqlParameter("@OutputFilePath", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _outputFilePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@OutputFileName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _outputFileName))
				cmdToExecute.Parameters.Add(New SqlParameter("@SampleFilePathName", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sampleFilePathName))
				cmdToExecute.Parameters.Add(New SqlParameter("@ActionOnScanning", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _actionOnScanning))
				cmdToExecute.Parameters.Add(New SqlParameter("@ActionOnSend", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _actionOnSend))
				cmdToExecute.Parameters.Add(New SqlParameter("@UseMapping", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _useMapping))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsDocument", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isDocument))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSSRS", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSSRS))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForwardingAddressRemail", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isForwardingAddressRemail))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsNoForwardingAddressRemail", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isNoForwardingAddressRemail))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSendToLocating", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSendToLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@MailType", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mailType))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeId", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeId))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'DocumentOutputTypeID.
		''' It will reset the field 'DocumentOutputTypeID' in
		''' all rows which have as value for this field the value as set in property 'DocumentOutputTypeIDOld' to 
		''' the value as set in property 'DocumentOutputTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>DocumentOutputTypeID</LI>
		'''		 <LI>DocumentOutputTypeIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWDocumentOutputTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_UpdateAllWDocumentOutputTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentOutputTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _documentOutputTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentOutputTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentOutputTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_UpdateAllWDocumentOutputTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::UpdateAllWDocumentOutputTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>DocumentTypeID</LI>
		'''		 <LI>Name</LI>
		'''		 <LI>Description</LI>
		'''		 <LI>DocumentGroupID</LI>
		'''		 <LI>GroupOrder</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>IsDisplayed</LI>
		'''		 <LI>BaseDocTypeID</LI>
		'''		 <LI>AllowOnTheFlyAdd</LI>
		'''		 <LI>AllowMultipleAdds</LI>
		'''		 <LI>DataSourceStoredProc</LI>
		'''		 <LI>DocumentOutputTypeID</LI>
		'''		 <LI>CrystalReportShellFilePath</LI>
		'''		 <LI>CrystalReportShellFileName</LI>
		'''		 <LI>OutputFilePath</LI>
		'''		 <LI>OutputFileName</LI>
		'''		 <LI>SampleFilePathName</LI>
		'''		 <LI>ActionOnScanning</LI>
		'''		 <LI>ActionOnSend</LI>
		'''		 <LI>UseMapping</LI>
		'''		 <LI>IsDocument</LI>
		'''		 <LI>IsSSRS</LI>
		'''		 <LI>IsForwardingAddressRemail</LI>
		'''		 <LI>IsNoForwardingAddressRemail</LI>
		'''		 <LI>IsSendToLocating</LI>
		'''		 <LI>MailType</LI>
		'''		 <LI>InstrumentTypeId</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpDocumentType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpDocumentType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'DocumentOutputTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>DocumentOutputTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWDocumentOutputTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentType_SelectAllWDocumentOutputTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpDocumentType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentOutputTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentOutputTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentType_SelectAllWDocumentOutputTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentType::SelectAllWDocumentOutputTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DocumentTypeID]() As SqlInt32
			Get
				Return _documentTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentTypeID.Equals(Value) Then
					If _documentTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentTypeID.Equals(_documentTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim documentTypeIDTmp As SqlInt32 = Value
				If documentTypeIDTmp.IsNull Then
					Throw New NullValueException("DocumentTypeID", "DocumentTypeID can't be NULL")
				End If
				_documentTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Name]() As SqlString
			Get
				Return _name
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _name.IsNull Then
					CurrentValue = _name.Value
				End If
				If Not _nameOld.IsNull Then
					OldValue = _nameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_name = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Description]() As SqlString
			Get
				Return _description
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _description.IsNull Then
					CurrentValue = _description.Value
				End If
				If Not _descriptionOld.IsNull Then
					OldValue = _descriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_description = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DocumentGroupID]() As SqlInt32
			Get
				Return _documentGroupID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentGroupID.Equals(Value) Then
					If _documentGroupIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentGroupID.Equals(_documentGroupIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_documentGroupID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [GroupOrder]() As SqlInt32
			Get
				Return _groupOrder
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _groupOrder.Equals(Value) Then
					If _groupOrderOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _groupOrder.Equals(_groupOrderOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_groupOrder = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [IsActive]() As SqlBoolean
			Get
				Return _isActive
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isActive.Equals(Value) Then
					If _isActiveOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isActive.Equals(_isActiveOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isActive = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [IsDisplayed]() As SqlBoolean
			Get
				Return _isDisplayed
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isDisplayed.Equals(Value) Then
					If _isDisplayedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isDisplayed.Equals(_isDisplayedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isDisplayed = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BaseDocTypeID]() As SqlInt32
			Get
				Return _baseDocTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _baseDocTypeID.Equals(Value) Then
					If _baseDocTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _baseDocTypeID.Equals(_baseDocTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_baseDocTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [AllowOnTheFlyAdd]() As SqlBoolean
			Get
				Return _allowOnTheFlyAdd
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _allowOnTheFlyAdd.Equals(Value) Then
					If _allowOnTheFlyAddOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _allowOnTheFlyAdd.Equals(_allowOnTheFlyAddOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_allowOnTheFlyAdd = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [AllowMultipleAdds]() As SqlBoolean
			Get
				Return _allowMultipleAdds
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _allowMultipleAdds.Equals(Value) Then
					If _allowMultipleAddsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _allowMultipleAdds.Equals(_allowMultipleAddsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_allowMultipleAdds = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DataSourceStoredProc]() As SqlString
			Get
				Return _dataSourceStoredProc
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _dataSourceStoredProc.IsNull Then
					CurrentValue = _dataSourceStoredProc.Value
				End If
				If Not _dataSourceStoredProcOld.IsNull Then
					OldValue = _dataSourceStoredProcOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_dataSourceStoredProc = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [DocumentOutputTypeID]() As SqlInt32
			Get
				Return _documentOutputTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentOutputTypeID.Equals(Value) Then
					If _documentOutputTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentOutputTypeID.Equals(_documentOutputTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_documentOutputTypeID = Value
			End Set
		End Property
		Protected Property [DocumentOutputTypeIDOld]() As SqlInt32
			Get
				Return _documentOutputTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim documentOutputTypeIDOldTmp As SqlInt32 = Value
				If documentOutputTypeIDOldTmp.IsNull Then
					Throw New NullValueException("DocumentOutputTypeIDOld", "DocumentOutputTypeIDOld can't be NULL")
				End If
				_documentOutputTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CrystalReportShellFilePath]() As SqlString
			Get
				Return _crystalReportShellFilePath
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _crystalReportShellFilePath.IsNull Then
					CurrentValue = _crystalReportShellFilePath.Value
				End If
				If Not _crystalReportShellFilePathOld.IsNull Then
					OldValue = _crystalReportShellFilePathOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_crystalReportShellFilePath = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CrystalReportShellFileName]() As SqlString
			Get
				Return _crystalReportShellFileName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _crystalReportShellFileName.IsNull Then
					CurrentValue = _crystalReportShellFileName.Value
				End If
				If Not _crystalReportShellFileNameOld.IsNull Then
					OldValue = _crystalReportShellFileNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_crystalReportShellFileName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OutputFilePath]() As SqlString
			Get
				Return _outputFilePath
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _outputFilePath.IsNull Then
					CurrentValue = _outputFilePath.Value
				End If
				If Not _outputFilePathOld.IsNull Then
					OldValue = _outputFilePathOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_outputFilePath = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OutputFileName]() As SqlString
			Get
				Return _outputFileName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _outputFileName.IsNull Then
					CurrentValue = _outputFileName.Value
				End If
				If Not _outputFileNameOld.IsNull Then
					OldValue = _outputFileNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_outputFileName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SampleFilePathName]() As SqlString
			Get
				Return _sampleFilePathName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sampleFilePathName.IsNull Then
					CurrentValue = _sampleFilePathName.Value
				End If
				If Not _sampleFilePathNameOld.IsNull Then
					OldValue = _sampleFilePathNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sampleFilePathName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ActionOnScanning]() As SqlString
			Get
				Return _actionOnScanning
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _actionOnScanning.IsNull Then
					CurrentValue = _actionOnScanning.Value
				End If
				If Not _actionOnScanningOld.IsNull Then
					OldValue = _actionOnScanningOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_actionOnScanning = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ActionOnSend]() As SqlString
			Get
				Return _actionOnSend
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _actionOnSend.IsNull Then
					CurrentValue = _actionOnSend.Value
				End If
				If Not _actionOnSendOld.IsNull Then
					OldValue = _actionOnSendOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_actionOnSend = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [UseMapping]() As SqlInt32
			Get
				Return _useMapping
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _useMapping.Equals(Value) Then
					If _useMappingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _useMapping.Equals(_useMappingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_useMapping = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsDocument]() As SqlBoolean
			Get
				Return _isDocument
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isDocument.Equals(Value) Then
					If _isDocumentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isDocument.Equals(_isDocumentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isDocument = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsSSRS]() As SqlBoolean
			Get
				Return _isSSRS
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSSRS.Equals(Value) Then
					If _isSSRSOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSSRS.Equals(_isSSRSOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSSRS = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsForwardingAddressRemail]() As SqlBoolean
			Get
				Return _isForwardingAddressRemail
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForwardingAddressRemail.Equals(Value) Then
					If _isForwardingAddressRemailOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForwardingAddressRemail.Equals(_isForwardingAddressRemailOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForwardingAddressRemail = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsNoForwardingAddressRemail]() As SqlBoolean
			Get
				Return _isNoForwardingAddressRemail
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isNoForwardingAddressRemail.Equals(Value) Then
					If _isNoForwardingAddressRemailOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isNoForwardingAddressRemail.Equals(_isNoForwardingAddressRemailOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isNoForwardingAddressRemail = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsSendToLocating]() As SqlBoolean
			Get
				Return _isSendToLocating
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSendToLocating.Equals(Value) Then
					If _isSendToLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSendToLocating.Equals(_isSendToLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSendToLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MailType]() As SqlString
			Get
				Return _mailType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mailType.IsNull Then
					CurrentValue = _mailType.Value
				End If
				If Not _mailTypeOld.IsNull Then
					OldValue = _mailTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mailType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentTypeId]() As SqlInt32
			Get
				Return _instrumentTypeId
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentTypeId.Equals(Value) Then
					If _instrumentTypeIdOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentTypeId.Equals(_instrumentTypeIdOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_instrumentTypeId = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
