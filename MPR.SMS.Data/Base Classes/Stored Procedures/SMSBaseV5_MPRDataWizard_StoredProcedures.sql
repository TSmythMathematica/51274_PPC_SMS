-- Stored Procedures generated by the MPR.Data.Access.Wizard on Sunday, October 01, 2017, 3:34:37 PM
SET NOCOUNT ON
GO
USE [SMSBaseV5]
GO

-- [Stored Procedures generated for table:  tblAddress]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblAddress'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @Facility1 varchar(60)
-- Gets: @Facility2 varchar(60)
-- Gets: @Address1 varchar(60)
-- Gets: @Address2 varchar(60)
-- Gets: @Address3 varchar(60)
-- Gets: @Address4 varchar(60)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @County varchar(50)
-- Gets: @Country varchar(50)
-- Gets: @CountryCode varchar(50)
-- Gets: @Longitude float(53)
-- Gets: @Latitude float(53)
-- Gets: @AddressTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @ReturnedMailReasonID int
-- Gets: @IsCleaned bit
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Returns: @AddressID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@Facility1 varchar(60),
	@Facility2 varchar(60),
	@Address1 varchar(60),
	@Address2 varchar(60),
	@Address3 varchar(60),
	@Address4 varchar(60),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@County varchar(50),
	@Country varchar(50),
	@CountryCode varchar(50),
	@Longitude float(53),
	@Latitude float(53),
	@AddressTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@ReturnedMailReasonID int,
	@IsCleaned bit,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@AddressID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblAddress]
(
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@Round,
	@Facility1,
	@Facility2,
	@Address1,
	@Address2,
	@Address3,
	@Address4,
	@City,
	@State,
	@PostalCode,
	@County,
	@Country,
	@CountryCode,
	@Longitude,
	@Latitude,
	@AddressTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@ReturnedMailReasonID,
	@IsCleaned,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@FieldLocatingStatusID
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @AddressID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblAddress'
-- Gets: @AddressID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @Facility1 varchar(60)
-- Gets: @Facility2 varchar(60)
-- Gets: @Address1 varchar(60)
-- Gets: @Address2 varchar(60)
-- Gets: @Address3 varchar(60)
-- Gets: @Address4 varchar(60)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @County varchar(50)
-- Gets: @Country varchar(50)
-- Gets: @CountryCode varchar(50)
-- Gets: @Longitude float(53)
-- Gets: @Latitude float(53)
-- Gets: @AddressTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @ReturnedMailReasonID int
-- Gets: @IsCleaned bit
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_Update]
	@AddressID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@Facility1 varchar(60),
	@Facility2 varchar(60),
	@Address1 varchar(60),
	@Address2 varchar(60),
	@Address3 varchar(60),
	@Address4 varchar(60),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@County varchar(50),
	@Country varchar(50),
	@CountryCode varchar(50),
	@Longitude float(53),
	@Latitude float(53),
	@AddressTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@ReturnedMailReasonID int,
	@IsCleaned bit,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[Facility1] = @Facility1,
	[Facility2] = @Facility2,
	[Address1] = @Address1,
	[Address2] = @Address2,
	[Address3] = @Address3,
	[Address4] = @Address4,
	[City] = @City,
	[State] = @State,
	[PostalCode] = @PostalCode,
	[County] = @County,
	[Country] = @Country,
	[CountryCode] = @CountryCode,
	[Longitude] = @Longitude,
	[Latitude] = @Latitude,
	[AddressTypeID] = @AddressTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[ReturnedMailReasonID] = @ReturnedMailReasonID,
	[IsCleaned] = @IsCleaned,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[FieldLocatingStatusID] = @FieldLocatingStatusID
WHERE
	[AddressID] = @AddressID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddress'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [AddressTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_UpdateAllWAddressTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_UpdateAllWAddressTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddress'.
-- Will reset field [AddressTypeID] with value @AddressTypeIDOld  to value @AddressTypeID
-- Gets: @AddressTypeID int
-- Gets: @AddressTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_UpdateAllWAddressTypeIDLogic]
	@AddressTypeID int,
	@AddressTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET
	[AddressTypeID] = @AddressTypeID
WHERE
	[AddressTypeID] = @AddressTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_UpdateAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_UpdateAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddress'.
-- Will reset field [SourceTypeID] with value @SourceTypeIDOld  to value @SourceTypeID
-- Gets: @SourceTypeID int
-- Gets: @SourceTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_UpdateAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@SourceTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET
	[SourceTypeID] = @SourceTypeID
WHERE
	[SourceTypeID] = @SourceTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_UpdateAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_UpdateAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddress'.
-- Will reset field [SourceQualityID] with value @SourceQualityIDOld  to value @SourceQualityID
-- Gets: @SourceQualityID int
-- Gets: @SourceQualityIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_UpdateAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@SourceQualityIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET
	[SourceQualityID] = @SourceQualityID
WHERE
	[SourceQualityID] = @SourceQualityIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ReturnedMailReasonID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_UpdateAllWReturnedMailReasonIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_UpdateAllWReturnedMailReasonIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddress'.
-- Will reset field [ReturnedMailReasonID] with value @ReturnedMailReasonIDOld  to value @ReturnedMailReasonID
-- Gets: @ReturnedMailReasonID int
-- Gets: @ReturnedMailReasonIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_UpdateAllWReturnedMailReasonIDLogic]
	@ReturnedMailReasonID int,
	@ReturnedMailReasonIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddress]
SET
	[ReturnedMailReasonID] = @ReturnedMailReasonID
WHERE
	[ReturnedMailReasonID] = @ReturnedMailReasonIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblAddress'
-- using the Primary Key. 
-- Gets: @AddressID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_Delete]
	@AddressID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblAddress]
WHERE
	[AddressID] = @AddressID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblAddress'
-- based on the Primary Key.
-- Gets: @AddressID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectOne]
	@AddressID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[AddressID] = @AddressID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblAddress'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
ORDER BY 
	[AddressID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddress'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [AddressTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAllWAddressTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAllWAddressTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddress'
-- based on a foreign key field.
-- Gets: @AddressTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAllWAddressTypeIDLogic]
	@AddressTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[AddressTypeID] = @AddressTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddress'
-- based on a foreign key field.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddress'
-- based on a foreign key field.
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ReturnedMailReasonID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddress_SelectAllWReturnedMailReasonIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddress_SelectAllWReturnedMailReasonIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddress'
-- based on a foreign key field.
-- Gets: @ReturnedMailReasonID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddress_SelectAllWReturnedMailReasonIDLogic]
	@ReturnedMailReasonID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddress]
WHERE
	[ReturnedMailReasonID] = @ReturnedMailReasonID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblAddress]

GO

-- [Stored Procedures generated for table:  tblAddressHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblAddressHistory'
-- Gets: @AddressID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @Facility1 varchar(60)
-- Gets: @Facility2 varchar(60)
-- Gets: @Address1 varchar(60)
-- Gets: @Address2 varchar(60)
-- Gets: @Address3 varchar(60)
-- Gets: @Address4 varchar(60)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @County varchar(50)
-- Gets: @Country varchar(50)
-- Gets: @CountryCode varchar(50)
-- Gets: @Longitude float(53)
-- Gets: @Latitude float(53)
-- Gets: @AddressTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @ReturnedMailReasonID int
-- Gets: @IsCleaned bit
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Returns: @AddressHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_Insert]
	@AddressID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@Facility1 varchar(60),
	@Facility2 varchar(60),
	@Address1 varchar(60),
	@Address2 varchar(60),
	@Address3 varchar(60),
	@Address4 varchar(60),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@County varchar(50),
	@Country varchar(50),
	@CountryCode varchar(50),
	@Longitude float(53),
	@Latitude float(53),
	@AddressTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@ReturnedMailReasonID int,
	@IsCleaned bit,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@AddressHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblAddressHistory]
(
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
)
VALUES
(
	@AddressID,
	@CaseID,
	@MPRID,
	@Round,
	@Facility1,
	@Facility2,
	@Address1,
	@Address2,
	@Address3,
	@Address4,
	@City,
	@State,
	@PostalCode,
	@County,
	@Country,
	@CountryCode,
	@Longitude,
	@Latitude,
	@AddressTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@ReturnedMailReasonID,
	@IsCleaned,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@FieldLocatingStatusID
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @AddressHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblAddressHistory'
-- Gets: @AddressHistoryID int
-- Gets: @AddressID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @Facility1 varchar(60)
-- Gets: @Facility2 varchar(60)
-- Gets: @Address1 varchar(60)
-- Gets: @Address2 varchar(60)
-- Gets: @Address3 varchar(60)
-- Gets: @Address4 varchar(60)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @County varchar(50)
-- Gets: @Country varchar(50)
-- Gets: @CountryCode varchar(50)
-- Gets: @Longitude float(53)
-- Gets: @Latitude float(53)
-- Gets: @AddressTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @ReturnedMailReasonID int
-- Gets: @IsCleaned bit
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_Update]
	@AddressHistoryID int,
	@AddressID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@Facility1 varchar(60),
	@Facility2 varchar(60),
	@Address1 varchar(60),
	@Address2 varchar(60),
	@Address3 varchar(60),
	@Address4 varchar(60),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@County varchar(50),
	@Country varchar(50),
	@CountryCode varchar(50),
	@Longitude float(53),
	@Latitude float(53),
	@AddressTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@ReturnedMailReasonID int,
	@IsCleaned bit,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddressHistory]
SET 
	[AddressID] = @AddressID,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[Facility1] = @Facility1,
	[Facility2] = @Facility2,
	[Address1] = @Address1,
	[Address2] = @Address2,
	[Address3] = @Address3,
	[Address4] = @Address4,
	[City] = @City,
	[State] = @State,
	[PostalCode] = @PostalCode,
	[County] = @County,
	[Country] = @Country,
	[CountryCode] = @CountryCode,
	[Longitude] = @Longitude,
	[Latitude] = @Latitude,
	[AddressTypeID] = @AddressTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[ReturnedMailReasonID] = @ReturnedMailReasonID,
	[IsCleaned] = @IsCleaned,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[FieldLocatingStatusID] = @FieldLocatingStatusID
WHERE
	[AddressHistoryID] = @AddressHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [AddressID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_UpdateAllWAddressIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_UpdateAllWAddressIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddressHistory'.
-- Will reset field [AddressID] with value @AddressIDOld  to value @AddressID
-- Gets: @AddressID int
-- Gets: @AddressIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_UpdateAllWAddressIDLogic]
	@AddressID int,
	@AddressIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddressHistory]
SET
	[AddressID] = @AddressID
WHERE
	[AddressID] = @AddressIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblAddressHistory'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblAddressHistory]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblAddressHistory'
-- using the Primary Key. 
-- Gets: @AddressHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_Delete]
	@AddressHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblAddressHistory]
WHERE
	[AddressHistoryID] = @AddressHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblAddressHistory'
-- based on the Primary Key.
-- Gets: @AddressHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_SelectOne]
	@AddressHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressHistoryID],
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddressHistory]
WHERE
	[AddressHistoryID] = @AddressHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblAddressHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressHistoryID],
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddressHistory]
ORDER BY 
	[AddressHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [AddressID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_SelectAllWAddressIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_SelectAllWAddressIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddressHistory'
-- based on a foreign key field.
-- Gets: @AddressID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_SelectAllWAddressIDLogic]
	@AddressID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressHistoryID],
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddressHistory]
WHERE
	[AddressID] = @AddressID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressHistory_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressHistory_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddressHistory'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressHistory_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressHistoryID],
	[AddressID],
	[CaseID],
	[MPRID],
	[Round],
	[Facility1],
	[Facility2],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[CountryCode],
	[Longitude],
	[Latitude],
	[AddressTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[ReturnedMailReasonID],
	[IsCleaned],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID]
FROM [dbo].[tblAddressHistory]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblAddressHistory]

GO

-- [Stored Procedures generated for table:  tblAddressNotes]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblAddressNotes'
-- Gets: @AddressID int
-- Gets: @CaseID int
-- Gets: @Date datetime
-- Gets: @Notes nvarchar(-1)
-- Gets: @SourceTypeId int
-- Gets: @MPRID varchar(8)
-- Gets: @DocumentTypeID int
-- Gets: @CreatedBy nvarchar(50)
-- Returns: @AddressNoteId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_Insert]
	@AddressID int,
	@CaseID int,
	@Date datetime,
	@Notes nvarchar(-1),
	@SourceTypeId int,
	@MPRID varchar(8),
	@DocumentTypeID int,
	@CreatedBy nvarchar(50),
	@AddressNoteId int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblAddressNotes]
(
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
)
VALUES
(
	@AddressID,
	@CaseID,
	@Date,
	@Notes,
	@SourceTypeId,
	@MPRID,
	@DocumentTypeID,
	@CreatedBy
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @AddressNoteId=SCOPE_IDENTITY()
GO


-- //// Select Stored procedure, based on field [AddressNoteId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_SelectOneWAddressNoteIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_SelectOneWAddressNoteIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblAddressNotes'
-- based on the field [AddressNoteId], which is unique per row.
-- Gets: @AddressNoteId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_SelectOneWAddressNoteIdLogic]
	@AddressNoteId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressNoteId],
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
FROM [dbo].[tblAddressNotes]
WHERE
	[AddressNoteId] = @AddressNoteId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblAddressNotes'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressNoteId],
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
FROM [dbo].[tblAddressNotes]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [AddressID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_SelectAllWAddressIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_SelectAllWAddressIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddressNotes'
-- based on a foreign key field.
-- Gets: @AddressID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_SelectAllWAddressIDLogic]
	@AddressID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressNoteId],
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
FROM [dbo].[tblAddressNotes]
WHERE
	[AddressID] = @AddressID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_SelectAllWSourceTypeIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_SelectAllWSourceTypeIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddressNotes'
-- based on a foreign key field.
-- Gets: @SourceTypeId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_SelectAllWSourceTypeIdLogic]
	@SourceTypeId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressNoteId],
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
FROM [dbo].[tblAddressNotes]
WHERE
	[SourceTypeId] = @SourceTypeId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DocumentTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblAddressNotes_SelectAllWDocumentTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblAddressNotes_SelectAllWDocumentTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblAddressNotes'
-- based on a foreign key field.
-- Gets: @DocumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblAddressNotes_SelectAllWDocumentTypeIDLogic]
	@DocumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[AddressNoteId],
	[AddressID],
	[CaseID],
	[Date],
	[Notes],
	[SourceTypeId],
	[MPRID],
	[DocumentTypeID],
	[CreatedBy]
FROM [dbo].[tblAddressNotes]
WHERE
	[DocumentTypeID] = @DocumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblAddressNotes]

GO

-- [Stored Procedures generated for table:  tblBatch]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblBatch'
-- Gets: @PublicBatchID int
-- Gets: @InstrumentTypeID int
-- Gets: @BatchTypeID int
-- Gets: @Notes varchar(2000)
-- Gets: @ReceivedBy varchar(32)
-- Gets: @ReceivedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @BatchID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_Insert]
	@PublicBatchID int,
	@InstrumentTypeID int,
	@BatchTypeID int,
	@Notes varchar(2000),
	@ReceivedBy varchar(32),
	@ReceivedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@BatchID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblBatch]
(
	[PublicBatchID],
	[InstrumentTypeID],
	[BatchTypeID],
	[Notes],
	[ReceivedBy],
	[ReceivedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@PublicBatchID,
	@InstrumentTypeID,
	@BatchTypeID,
	@Notes,
	@ReceivedBy,
	@ReceivedOn,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @BatchID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblBatch'
-- Gets: @BatchID int
-- Gets: @PublicBatchID int
-- Gets: @InstrumentTypeID int
-- Gets: @BatchTypeID int
-- Gets: @Notes varchar(2000)
-- Gets: @ReceivedBy varchar(32)
-- Gets: @ReceivedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_Update]
	@BatchID int,
	@PublicBatchID int,
	@InstrumentTypeID int,
	@BatchTypeID int,
	@Notes varchar(2000),
	@ReceivedBy varchar(32),
	@ReceivedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatch]
SET 
	[PublicBatchID] = @PublicBatchID,
	[InstrumentTypeID] = @InstrumentTypeID,
	[BatchTypeID] = @BatchTypeID,
	[Notes] = @Notes,
	[ReceivedBy] = @ReceivedBy,
	[ReceivedOn] = @ReceivedOn,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[BatchID] = @BatchID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InstrumentTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_UpdateAllWInstrumentTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_UpdateAllWInstrumentTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblBatch'.
-- Will reset field [InstrumentTypeID] with value @InstrumentTypeIDOld  to value @InstrumentTypeID
-- Gets: @InstrumentTypeID int
-- Gets: @InstrumentTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_UpdateAllWInstrumentTypeIDLogic]
	@InstrumentTypeID int,
	@InstrumentTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatch]
SET
	[InstrumentTypeID] = @InstrumentTypeID
WHERE
	[InstrumentTypeID] = @InstrumentTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [BatchTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_UpdateAllWBatchTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_UpdateAllWBatchTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblBatch'.
-- Will reset field [BatchTypeID] with value @BatchTypeIDOld  to value @BatchTypeID
-- Gets: @BatchTypeID int
-- Gets: @BatchTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_UpdateAllWBatchTypeIDLogic]
	@BatchTypeID int,
	@BatchTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatch]
SET
	[BatchTypeID] = @BatchTypeID
WHERE
	[BatchTypeID] = @BatchTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblBatch'
-- using the Primary Key. 
-- Gets: @BatchID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_Delete]
	@BatchID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblBatch]
WHERE
	[BatchID] = @BatchID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblBatch'
-- based on the Primary Key.
-- Gets: @BatchID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_SelectOne]
	@BatchID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[BatchID],
	[PublicBatchID],
	[InstrumentTypeID],
	[BatchTypeID],
	[Notes],
	[ReceivedBy],
	[ReceivedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblBatch]
WHERE
	[BatchID] = @BatchID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblBatch'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[BatchID],
	[PublicBatchID],
	[InstrumentTypeID],
	[BatchTypeID],
	[Notes],
	[ReceivedBy],
	[ReceivedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblBatch]
ORDER BY 
	[BatchID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InstrumentTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_SelectAllWInstrumentTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_SelectAllWInstrumentTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblBatch'
-- based on a foreign key field.
-- Gets: @InstrumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_SelectAllWInstrumentTypeIDLogic]
	@InstrumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchID],
	[PublicBatchID],
	[InstrumentTypeID],
	[BatchTypeID],
	[Notes],
	[ReceivedBy],
	[ReceivedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblBatch]
WHERE
	[InstrumentTypeID] = @InstrumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [BatchTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatch_SelectAllWBatchTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatch_SelectAllWBatchTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblBatch'
-- based on a foreign key field.
-- Gets: @BatchTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatch_SelectAllWBatchTypeIDLogic]
	@BatchTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchID],
	[PublicBatchID],
	[InstrumentTypeID],
	[BatchTypeID],
	[Notes],
	[ReceivedBy],
	[ReceivedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblBatch]
WHERE
	[BatchTypeID] = @BatchTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblBatch]

GO

-- [Stored Procedures generated for table:  tblBatchItem]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblBatchItem'
-- Gets: @BatchID int
-- Gets: @InstrumentID int
-- Gets: @Notes varchar(2000)
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Gets: @ITCode varchar(20)
-- Returns: @BatchItemID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_Insert]
	@BatchID int,
	@InstrumentID int,
	@Notes varchar(2000),
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@ITCode varchar(20),
	@BatchItemID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblBatchItem]
(
	[BatchID],
	[InstrumentID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[ITCode]
)
VALUES
(
	@BatchID,
	@InstrumentID,
	@Notes,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@ITCode
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @BatchItemID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblBatchItem'
-- Gets: @BatchItemID int
-- Gets: @BatchID int
-- Gets: @InstrumentID int
-- Gets: @Notes varchar(2000)
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Gets: @ITCode varchar(20)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_Update]
	@BatchItemID int,
	@BatchID int,
	@InstrumentID int,
	@Notes varchar(2000),
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@ITCode varchar(20),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatchItem]
SET 
	[BatchID] = @BatchID,
	[InstrumentID] = @InstrumentID,
	[Notes] = @Notes,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[ITCode] = @ITCode
WHERE
	[BatchItemID] = @BatchItemID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [BatchID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_UpdateAllWBatchIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_UpdateAllWBatchIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblBatchItem'.
-- Will reset field [BatchID] with value @BatchIDOld  to value @BatchID
-- Gets: @BatchID int
-- Gets: @BatchIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_UpdateAllWBatchIDLogic]
	@BatchID int,
	@BatchIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatchItem]
SET
	[BatchID] = @BatchID
WHERE
	[BatchID] = @BatchIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InstrumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_UpdateAllWInstrumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_UpdateAllWInstrumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblBatchItem'.
-- Will reset field [InstrumentID] with value @InstrumentIDOld  to value @InstrumentID
-- Gets: @InstrumentID int
-- Gets: @InstrumentIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_UpdateAllWInstrumentIDLogic]
	@InstrumentID int,
	@InstrumentIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblBatchItem]
SET
	[InstrumentID] = @InstrumentID
WHERE
	[InstrumentID] = @InstrumentIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblBatchItem'
-- using the Primary Key. 
-- Gets: @BatchItemID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_Delete]
	@BatchItemID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblBatchItem]
WHERE
	[BatchItemID] = @BatchItemID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblBatchItem'
-- based on the Primary Key.
-- Gets: @BatchItemID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_SelectOne]
	@BatchItemID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[BatchItemID],
	[BatchID],
	[InstrumentID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[ITCode]
FROM [dbo].[tblBatchItem]
WHERE
	[BatchItemID] = @BatchItemID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblBatchItem'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[BatchItemID],
	[BatchID],
	[InstrumentID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[ITCode]
FROM [dbo].[tblBatchItem]
ORDER BY 
	[BatchItemID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [BatchID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_SelectAllWBatchIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_SelectAllWBatchIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblBatchItem'
-- based on a foreign key field.
-- Gets: @BatchID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_SelectAllWBatchIDLogic]
	@BatchID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchItemID],
	[BatchID],
	[InstrumentID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[ITCode]
FROM [dbo].[tblBatchItem]
WHERE
	[BatchID] = @BatchID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InstrumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblBatchItem_SelectAllWInstrumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblBatchItem_SelectAllWInstrumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblBatchItem'
-- based on a foreign key field.
-- Gets: @InstrumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblBatchItem_SelectAllWInstrumentIDLogic]
	@InstrumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchItemID],
	[BatchID],
	[InstrumentID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[ITCode]
FROM [dbo].[tblBatchItem]
WHERE
	[InstrumentID] = @InstrumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblBatchItem]

GO

-- [Stored Procedures generated for table:  tblCAINote]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCAINote'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @InstrumentTypeID int
-- Gets: @Round int
-- Gets: @Source varchar(25)
-- Gets: @DateOfContact smalldatetime
-- Gets: @PhoneNumAttempted varchar(25)
-- Gets: @ContactNum int
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @UserName varchar(50)
-- Gets: @Notes varchar(2000)
-- Returns: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@InstrumentTypeID int,
	@Round int,
	@Source varchar(25),
	@DateOfContact smalldatetime,
	@PhoneNumAttempted varchar(25),
	@ContactNum int,
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@UserName varchar(50),
	@Notes varchar(2000),
	@NoteID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCAINote]
(
	[CaseID],
	[MPRID],
	[InstrumentTypeID],
	[Round],
	[Source],
	[DateOfContact],
	[PhoneNumAttempted],
	[ContactNum],
	[CurrentStatus],
	[LogicalStatus],
	[UserName],
	[Notes]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@InstrumentTypeID,
	@Round,
	@Source,
	@DateOfContact,
	@PhoneNumAttempted,
	@ContactNum,
	@CurrentStatus,
	@LogicalStatus,
	@UserName,
	@Notes
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @NoteID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCAINote'
-- Gets: @NoteID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @InstrumentTypeID int
-- Gets: @Round int
-- Gets: @Source varchar(25)
-- Gets: @DateOfContact smalldatetime
-- Gets: @PhoneNumAttempted varchar(25)
-- Gets: @ContactNum int
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @UserName varchar(50)
-- Gets: @Notes varchar(2000)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_Update]
	@NoteID int,
	@CaseID int,
	@MPRID varchar(8),
	@InstrumentTypeID int,
	@Round int,
	@Source varchar(25),
	@DateOfContact smalldatetime,
	@PhoneNumAttempted varchar(25),
	@ContactNum int,
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@UserName varchar(50),
	@Notes varchar(2000),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCAINote]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[InstrumentTypeID] = @InstrumentTypeID,
	[Round] = @Round,
	[Source] = @Source,
	[DateOfContact] = @DateOfContact,
	[PhoneNumAttempted] = @PhoneNumAttempted,
	[ContactNum] = @ContactNum,
	[CurrentStatus] = @CurrentStatus,
	[LogicalStatus] = @LogicalStatus,
	[UserName] = @UserName,
	[Notes] = @Notes
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCAINote'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCAINote]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCAINote'
-- using the Primary Key. 
-- Gets: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_Delete]
	@NoteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCAINote]
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCAINote'
-- based on the Primary Key.
-- Gets: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_SelectOne]
	@NoteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[NoteID],
	[CaseID],
	[MPRID],
	[InstrumentTypeID],
	[Round],
	[Source],
	[DateOfContact],
	[PhoneNumAttempted],
	[ContactNum],
	[CurrentStatus],
	[LogicalStatus],
	[UserName],
	[Notes]
FROM [dbo].[tblCAINote]
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCAINote'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[NoteID],
	[CaseID],
	[MPRID],
	[InstrumentTypeID],
	[Round],
	[Source],
	[DateOfContact],
	[PhoneNumAttempted],
	[ContactNum],
	[CurrentStatus],
	[LogicalStatus],
	[UserName],
	[Notes]
FROM [dbo].[tblCAINote]
ORDER BY 
	[NoteID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCAINote_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCAINote_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCAINote'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCAINote_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[NoteID],
	[CaseID],
	[MPRID],
	[InstrumentTypeID],
	[Round],
	[Source],
	[DateOfContact],
	[PhoneNumAttempted],
	[ContactNum],
	[CurrentStatus],
	[LogicalStatus],
	[UserName],
	[Notes]
FROM [dbo].[tblCAINote]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCAINote]

GO

-- [Stored Procedures generated for table:  tblCase]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCase_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCase_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCase'
-- Gets: @EntityName varchar(50)
-- Gets: @EntityTypeID int
-- Gets: @CurrentRound int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @Wave int
-- Gets: @Release int
-- Gets: @Replicate varchar(50)
-- Gets: @Cohort varchar(50)
-- Gets: @SiteID int
-- Gets: @FrameID varchar(10)
-- Gets: @PSU varchar(6)
-- Gets: @IsClustered bit
-- Gets: @Experiment varchar(50)
-- Gets: @CaseNotes varchar(2000)
-- Gets: @InternalID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCase_Insert]
	@EntityName varchar(50),
	@EntityTypeID int,
	@CurrentRound int,
	@InSample bit,
	@IsIneligible bit,
	@Wave int,
	@Release int,
	@Replicate varchar(50),
	@Cohort varchar(50),
	@SiteID int,
	@FrameID varchar(10),
	@PSU varchar(6),
	@IsClustered bit,
	@Experiment varchar(50),
	@CaseNotes varchar(2000),
	@InternalID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CaseID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCase]
(
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@EntityName,
	@EntityTypeID,
	@CurrentRound,
	@InSample,
	@IsIneligible,
	@Wave,
	@Release,
	@Replicate,
	@Cohort,
	@SiteID,
	@FrameID,
	@PSU,
	@IsClustered,
	@Experiment,
	@CaseNotes,
	@InternalID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CaseID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCase_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCase_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCase'
-- Gets: @CaseID int
-- Gets: @EntityName varchar(50)
-- Gets: @EntityTypeID int
-- Gets: @CurrentRound int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @Wave int
-- Gets: @Release int
-- Gets: @Replicate varchar(50)
-- Gets: @Cohort varchar(50)
-- Gets: @SiteID int
-- Gets: @FrameID varchar(10)
-- Gets: @PSU varchar(6)
-- Gets: @IsClustered bit
-- Gets: @Experiment varchar(50)
-- Gets: @CaseNotes varchar(2000)
-- Gets: @InternalID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCase_Update]
	@CaseID int,
	@EntityName varchar(50),
	@EntityTypeID int,
	@CurrentRound int,
	@InSample bit,
	@IsIneligible bit,
	@Wave int,
	@Release int,
	@Replicate varchar(50),
	@Cohort varchar(50),
	@SiteID int,
	@FrameID varchar(10),
	@PSU varchar(6),
	@IsClustered bit,
	@Experiment varchar(50),
	@CaseNotes varchar(2000),
	@InternalID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCase]
SET 
	[EntityName] = @EntityName,
	[EntityTypeID] = @EntityTypeID,
	[CurrentRound] = @CurrentRound,
	[InSample] = @InSample,
	[IsIneligible] = @IsIneligible,
	[Wave] = @Wave,
	[Release] = @Release,
	[Replicate] = @Replicate,
	[Cohort] = @Cohort,
	[SiteID] = @SiteID,
	[FrameID] = @FrameID,
	[PSU] = @PSU,
	[IsClustered] = @IsClustered,
	[Experiment] = @Experiment,
	[CaseNotes] = @CaseNotes,
	[InternalID] = @InternalID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCase_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCase_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCase'
-- using the Primary Key. 
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCase_Delete]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCase]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCase_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCase_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCase'
-- based on the Primary Key.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCase_SelectOne]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCase]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCase_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCase_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCase'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCase_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCase]
ORDER BY 
	[CaseID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCase]

GO

-- [Stored Procedures generated for table:  tblCaseAssignment]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCaseAssignment'
-- Gets: @CaseID int
-- Gets: @InterviewerRegionID int
-- Gets: @InterviewerSupervisorID int
-- Gets: @InterviewerTeamID int
-- Gets: @InterviewerID int
-- Gets: @DateAssigned datetime
-- Gets: @LastReleasedTo int
-- Gets: @LastReleasedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @CaseAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_Insert]
	@CaseID int,
	@InterviewerRegionID int,
	@InterviewerSupervisorID int,
	@InterviewerTeamID int,
	@InterviewerID int,
	@DateAssigned datetime,
	@LastReleasedTo int,
	@LastReleasedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CaseAssignmentID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCaseAssignment]
(
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@InterviewerRegionID,
	@InterviewerSupervisorID,
	@InterviewerTeamID,
	@InterviewerID,
	@DateAssigned,
	@LastReleasedTo,
	@LastReleasedOn,
	ISNULL(@CreatedBy, ('')),
	ISNULL(@CreatedOn, (getdate())),
	ISNULL(@LastModifiedBy, ('')),
	ISNULL(@LastModifiedOn, (getdate()))
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CaseAssignmentID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCaseAssignment'
-- Gets: @CaseAssignmentID int
-- Gets: @CaseID int
-- Gets: @InterviewerRegionID int
-- Gets: @InterviewerSupervisorID int
-- Gets: @InterviewerTeamID int
-- Gets: @InterviewerID int
-- Gets: @DateAssigned datetime
-- Gets: @LastReleasedTo int
-- Gets: @LastReleasedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_Update]
	@CaseAssignmentID int,
	@CaseID int,
	@InterviewerRegionID int,
	@InterviewerSupervisorID int,
	@InterviewerTeamID int,
	@InterviewerID int,
	@DateAssigned datetime,
	@LastReleasedTo int,
	@LastReleasedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET 
	[CaseID] = @CaseID,
	[InterviewerRegionID] = @InterviewerRegionID,
	[InterviewerSupervisorID] = @InterviewerSupervisorID,
	[InterviewerTeamID] = @InterviewerTeamID,
	[InterviewerID] = @InterviewerID,
	[DateAssigned] = @DateAssigned,
	[LastReleasedTo] = @LastReleasedTo,
	[LastReleasedOn] = @LastReleasedOn,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[CaseAssignmentID] = @CaseAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseAssignment'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerRegionID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerRegionIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerRegionIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseAssignment'.
-- Will reset field [InterviewerRegionID] with value @InterviewerRegionIDOld  to value @InterviewerRegionID
-- Gets: @InterviewerRegionID int
-- Gets: @InterviewerRegionIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerRegionIDLogic]
	@InterviewerRegionID int,
	@InterviewerRegionIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET
	[InterviewerRegionID] = @InterviewerRegionID
WHERE
	[InterviewerRegionID] = @InterviewerRegionIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerSupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseAssignment'.
-- Will reset field [InterviewerSupervisorID] with value @InterviewerSupervisorIDOld  to value @InterviewerSupervisorID
-- Gets: @InterviewerSupervisorID int
-- Gets: @InterviewerSupervisorIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerSupervisorIDLogic]
	@InterviewerSupervisorID int,
	@InterviewerSupervisorIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET
	[InterviewerSupervisorID] = @InterviewerSupervisorID
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerTeamID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerTeamIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerTeamIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseAssignment'.
-- Will reset field [InterviewerTeamID] with value @InterviewerTeamIDOld  to value @InterviewerTeamID
-- Gets: @InterviewerTeamID int
-- Gets: @InterviewerTeamIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerTeamIDLogic]
	@InterviewerTeamID int,
	@InterviewerTeamIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET
	[InterviewerTeamID] = @InterviewerTeamID
WHERE
	[InterviewerTeamID] = @InterviewerTeamIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseAssignment'.
-- Will reset field [InterviewerID] with value @InterviewerIDOld  to value @InterviewerID
-- Gets: @InterviewerID int
-- Gets: @InterviewerIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_UpdateAllWInterviewerIDLogic]
	@InterviewerID int,
	@InterviewerIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseAssignment]
SET
	[InterviewerID] = @InterviewerID
WHERE
	[InterviewerID] = @InterviewerIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCaseAssignment'
-- using the Primary Key. 
-- Gets: @CaseAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_Delete]
	@CaseAssignmentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCaseAssignment]
WHERE
	[CaseAssignmentID] = @CaseAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCaseAssignment'
-- based on the Primary Key.
-- Gets: @CaseAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectOne]
	@CaseAssignmentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[CaseAssignmentID] = @CaseAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCaseAssignment'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
ORDER BY 
	[CaseAssignmentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseAssignment'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerRegionID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerRegionIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerRegionIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseAssignment'
-- based on a foreign key field.
-- Gets: @InterviewerRegionID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerRegionIDLogic]
	@InterviewerRegionID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[InterviewerRegionID] = @InterviewerRegionID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerSupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseAssignment'
-- based on a foreign key field.
-- Gets: @InterviewerSupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerSupervisorIDLogic]
	@InterviewerSupervisorID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerTeamID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerTeamIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerTeamIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseAssignment'
-- based on a foreign key field.
-- Gets: @InterviewerTeamID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerTeamIDLogic]
	@InterviewerTeamID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[InterviewerTeamID] = @InterviewerTeamID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseAssignment'
-- based on a foreign key field.
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseAssignment_SelectAllWInterviewerIDLogic]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseAssignmentID],
	[CaseID],
	[InterviewerRegionID],
	[InterviewerSupervisorID],
	[InterviewerTeamID],
	[InterviewerID],
	[DateAssigned],
	[LastReleasedTo],
	[LastReleasedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseAssignment]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCaseAssignment]

GO

-- [Stored Procedures generated for table:  tblCaseHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCaseHistory'
-- Gets: @CaseID int
-- Gets: @EntityName varchar(50)
-- Gets: @EntityTypeID int
-- Gets: @CurrentRound int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @Wave int
-- Gets: @Release int
-- Gets: @Replicate varchar(50)
-- Gets: @Cohort varchar(50)
-- Gets: @SiteID int
-- Gets: @FrameID varchar(10)
-- Gets: @PSU varchar(6)
-- Gets: @IsClustered bit
-- Gets: @Experiment varchar(50)
-- Gets: @CaseNotes varchar(2000)
-- Gets: @InternalID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @CaseHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_Insert]
	@CaseID int,
	@EntityName varchar(50),
	@EntityTypeID int,
	@CurrentRound int,
	@InSample bit,
	@IsIneligible bit,
	@Wave int,
	@Release int,
	@Replicate varchar(50),
	@Cohort varchar(50),
	@SiteID int,
	@FrameID varchar(10),
	@PSU varchar(6),
	@IsClustered bit,
	@Experiment varchar(50),
	@CaseNotes varchar(2000),
	@InternalID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CaseHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCaseHistory]
(
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@EntityName,
	@EntityTypeID,
	@CurrentRound,
	@InSample,
	@IsIneligible,
	@Wave,
	@Release,
	@Replicate,
	@Cohort,
	@SiteID,
	@FrameID,
	@PSU,
	@IsClustered,
	@Experiment,
	@CaseNotes,
	@InternalID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CaseHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCaseHistory'
-- Gets: @CaseHistoryID int
-- Gets: @CaseID int
-- Gets: @EntityName varchar(50)
-- Gets: @EntityTypeID int
-- Gets: @CurrentRound int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @Wave int
-- Gets: @Release int
-- Gets: @Replicate varchar(50)
-- Gets: @Cohort varchar(50)
-- Gets: @SiteID int
-- Gets: @FrameID varchar(10)
-- Gets: @PSU varchar(6)
-- Gets: @IsClustered bit
-- Gets: @Experiment varchar(50)
-- Gets: @CaseNotes varchar(2000)
-- Gets: @InternalID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_Update]
	@CaseHistoryID int,
	@CaseID int,
	@EntityName varchar(50),
	@EntityTypeID int,
	@CurrentRound int,
	@InSample bit,
	@IsIneligible bit,
	@Wave int,
	@Release int,
	@Replicate varchar(50),
	@Cohort varchar(50),
	@SiteID int,
	@FrameID varchar(10),
	@PSU varchar(6),
	@IsClustered bit,
	@Experiment varchar(50),
	@CaseNotes varchar(2000),
	@InternalID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseHistory]
SET 
	[CaseID] = @CaseID,
	[EntityName] = @EntityName,
	[EntityTypeID] = @EntityTypeID,
	[CurrentRound] = @CurrentRound,
	[InSample] = @InSample,
	[IsIneligible] = @IsIneligible,
	[Wave] = @Wave,
	[Release] = @Release,
	[Replicate] = @Replicate,
	[Cohort] = @Cohort,
	[SiteID] = @SiteID,
	[FrameID] = @FrameID,
	[PSU] = @PSU,
	[IsClustered] = @IsClustered,
	[Experiment] = @Experiment,
	[CaseNotes] = @CaseNotes,
	[InternalID] = @InternalID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[CaseHistoryID] = @CaseHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseHistory'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseHistory]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCaseHistory'
-- using the Primary Key. 
-- Gets: @CaseHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_Delete]
	@CaseHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCaseHistory]
WHERE
	[CaseHistoryID] = @CaseHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCaseHistory'
-- based on the Primary Key.
-- Gets: @CaseHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_SelectOne]
	@CaseHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseHistoryID],
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseHistory]
WHERE
	[CaseHistoryID] = @CaseHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCaseHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseHistoryID],
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseHistory]
ORDER BY 
	[CaseHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseHistory_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseHistory_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseHistory'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseHistory_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseHistoryID],
	[CaseID],
	[EntityName],
	[EntityTypeID],
	[CurrentRound],
	[InSample],
	[IsIneligible],
	[Wave],
	[Release],
	[Replicate],
	[Cohort],
	[SiteID],
	[FrameID],
	[PSU],
	[IsClustered],
	[Experiment],
	[CaseNotes],
	[InternalID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseHistory]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCaseHistory]

GO

-- [Stored Procedures generated for table:  tblCaseLock]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseLock_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseLock_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCaseLock'
-- Gets: @CaseID int
-- Gets: @UserName varchar(50)
-- Gets: @Workstation varchar(50)
-- Gets: @LockDate datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseLock_Insert]
	@CaseID int,
	@UserName varchar(50),
	@Workstation varchar(50),
	@LockDate datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCaseLock]
(
	[CaseID],
	[UserName],
	[Workstation],
	[LockDate]
)
VALUES
(
	@CaseID,
	@UserName,
	@Workstation,
	@LockDate
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseLock_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseLock_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCaseLock'
-- Gets: @CaseID int
-- Gets: @UserName varchar(50)
-- Gets: @Workstation varchar(50)
-- Gets: @LockDate datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseLock_Update]
	@CaseID int,
	@UserName varchar(50),
	@Workstation varchar(50),
	@LockDate datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseLock]
SET 
	[UserName] = @UserName,
	[Workstation] = @Workstation,
	[LockDate] = @LockDate
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseLock_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseLock_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCaseLock'
-- using the Primary Key. 
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseLock_Delete]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCaseLock]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseLock_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseLock_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCaseLock'
-- based on the Primary Key.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseLock_SelectOne]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseID],
	[UserName],
	[Workstation],
	[LockDate]
FROM [dbo].[tblCaseLock]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseLock_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseLock_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCaseLock'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseLock_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseID],
	[UserName],
	[Workstation],
	[LockDate]
FROM [dbo].[tblCaseLock]
ORDER BY 
	[CaseID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCaseLock]

GO

-- [Stored Procedures generated for table:  tblCaseRA]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseRA_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseRA_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCaseRA'
-- Gets: @CaseID int
-- Gets: @RandomAssignment char(10)
-- Gets: @ResearchStatus char(10)
-- Gets: @NonResearchReason int
-- Gets: @RandomNumber float(53)
-- Gets: @RandomizationStatus char(1)
-- Gets: @RandomizationDate datetime
-- Gets: @StratificationCode1 int
-- Gets: @StratificationCode2 int
-- Gets: @NumberOfRAChoices int
-- Gets: @NumberOfErrors int
-- Gets: @NumberOfDuplicates int
-- Gets: @OverrideDuplicate bit
-- Gets: @ForcedAssignmentFlag int
-- Gets: @ForcedAssignment varchar(100)
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseRA_Insert]
	@CaseID int,
	@RandomAssignment char(10),
	@ResearchStatus char(10),
	@NonResearchReason int,
	@RandomNumber float(53),
	@RandomizationStatus char(1),
	@RandomizationDate datetime,
	@StratificationCode1 int,
	@StratificationCode2 int,
	@NumberOfRAChoices int,
	@NumberOfErrors int,
	@NumberOfDuplicates int,
	@OverrideDuplicate bit,
	@ForcedAssignmentFlag int,
	@ForcedAssignment varchar(100),
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCaseRA]
(
	[CaseID],
	[RandomAssignment],
	[ResearchStatus],
	[NonResearchReason],
	[RandomNumber],
	[RandomizationStatus],
	[RandomizationDate],
	[StratificationCode1],
	[StratificationCode2],
	[NumberOfRAChoices],
	[NumberOfErrors],
	[NumberOfDuplicates],
	[OverrideDuplicate],
	[ForcedAssignmentFlag],
	[ForcedAssignment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, (0)),
	@RandomAssignment,
	@ResearchStatus,
	@NonResearchReason,
	@RandomNumber,
	@RandomizationStatus,
	@RandomizationDate,
	@StratificationCode1,
	@StratificationCode2,
	@NumberOfRAChoices,
	@NumberOfErrors,
	@NumberOfDuplicates,
	@OverrideDuplicate,
	@ForcedAssignmentFlag,
	@ForcedAssignment,
	ISNULL(@CreatedBy, ('')),
	@CreatedOn,
	ISNULL(@LastModifiedBy, ('')),
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseRA_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseRA_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCaseRA'
-- Gets: @CaseID int
-- Gets: @RandomAssignment char(10)
-- Gets: @ResearchStatus char(10)
-- Gets: @NonResearchReason int
-- Gets: @RandomNumber float(53)
-- Gets: @RandomizationStatus char(1)
-- Gets: @RandomizationDate datetime
-- Gets: @StratificationCode1 int
-- Gets: @StratificationCode2 int
-- Gets: @NumberOfRAChoices int
-- Gets: @NumberOfErrors int
-- Gets: @NumberOfDuplicates int
-- Gets: @OverrideDuplicate bit
-- Gets: @ForcedAssignmentFlag int
-- Gets: @ForcedAssignment varchar(100)
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseRA_Update]
	@CaseID int,
	@RandomAssignment char(10),
	@ResearchStatus char(10),
	@NonResearchReason int,
	@RandomNumber float(53),
	@RandomizationStatus char(1),
	@RandomizationDate datetime,
	@StratificationCode1 int,
	@StratificationCode2 int,
	@NumberOfRAChoices int,
	@NumberOfErrors int,
	@NumberOfDuplicates int,
	@OverrideDuplicate bit,
	@ForcedAssignmentFlag int,
	@ForcedAssignment varchar(100),
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseRA]
SET 
	[RandomAssignment] = @RandomAssignment,
	[ResearchStatus] = @ResearchStatus,
	[NonResearchReason] = @NonResearchReason,
	[RandomNumber] = @RandomNumber,
	[RandomizationStatus] = @RandomizationStatus,
	[RandomizationDate] = @RandomizationDate,
	[StratificationCode1] = @StratificationCode1,
	[StratificationCode2] = @StratificationCode2,
	[NumberOfRAChoices] = @NumberOfRAChoices,
	[NumberOfErrors] = @NumberOfErrors,
	[NumberOfDuplicates] = @NumberOfDuplicates,
	[OverrideDuplicate] = @OverrideDuplicate,
	[ForcedAssignmentFlag] = @ForcedAssignmentFlag,
	[ForcedAssignment] = @ForcedAssignment,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseRA_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseRA_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCaseRA'
-- using the Primary Key. 
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseRA_Delete]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCaseRA]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseRA_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseRA_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCaseRA'
-- based on the Primary Key.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseRA_SelectOne]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseID],
	[RandomAssignment],
	[ResearchStatus],
	[NonResearchReason],
	[RandomNumber],
	[RandomizationStatus],
	[RandomizationDate],
	[StratificationCode1],
	[StratificationCode2],
	[NumberOfRAChoices],
	[NumberOfErrors],
	[NumberOfDuplicates],
	[OverrideDuplicate],
	[ForcedAssignmentFlag],
	[ForcedAssignment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseRA]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseRA_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseRA_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCaseRA'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseRA_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseID],
	[RandomAssignment],
	[ResearchStatus],
	[NonResearchReason],
	[RandomNumber],
	[RandomizationStatus],
	[RandomizationDate],
	[StratificationCode1],
	[StratificationCode2],
	[NumberOfRAChoices],
	[NumberOfErrors],
	[NumberOfDuplicates],
	[OverrideDuplicate],
	[ForcedAssignmentFlag],
	[ForcedAssignment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseRA]
ORDER BY 
	[CaseID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCaseRA]

GO

-- [Stored Procedures generated for table:  tblCaseValidation]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCaseValidation'
-- Gets: @CaseID int
-- Gets: @IsValidate bit
-- Gets: @ValidationStatusID int
-- Gets: @ValidationStatusDate datetime
-- Gets: @Notes varchar(2000)
-- Gets: @RandomNumber float(53)
-- Gets: @IsOldMailValidate bit
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_Insert]
	@CaseID int,
	@IsValidate bit,
	@ValidationStatusID int,
	@ValidationStatusDate datetime,
	@Notes varchar(2000),
	@RandomNumber float(53),
	@IsOldMailValidate bit,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCaseValidation]
(
	[CaseID],
	[IsValidate],
	[ValidationStatusID],
	[ValidationStatusDate],
	[Notes],
	[RandomNumber],
	[IsOldMailValidate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	ISNULL(@IsValidate, ((0))),
	ISNULL(@ValidationStatusID, ((0))),
	@ValidationStatusDate,
	@Notes,
	@RandomNumber,
	ISNULL(@IsOldMailValidate, ((0))),
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCaseValidation'
-- Gets: @CaseID int
-- Gets: @IsValidate bit
-- Gets: @ValidationStatusID int
-- Gets: @ValidationStatusDate datetime
-- Gets: @Notes varchar(2000)
-- Gets: @RandomNumber float(53)
-- Gets: @IsOldMailValidate bit
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_Update]
	@CaseID int,
	@IsValidate bit,
	@ValidationStatusID int,
	@ValidationStatusDate datetime,
	@Notes varchar(2000),
	@RandomNumber float(53),
	@IsOldMailValidate bit,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseValidation]
SET 
	[IsValidate] = @IsValidate,
	[ValidationStatusID] = @ValidationStatusID,
	[ValidationStatusDate] = @ValidationStatusDate,
	[Notes] = @Notes,
	[RandomNumber] = @RandomNumber,
	[IsOldMailValidate] = @IsOldMailValidate,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ValidationStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_UpdateAllWValidationStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_UpdateAllWValidationStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCaseValidation'.
-- Will reset field [ValidationStatusID] with value @ValidationStatusIDOld  to value @ValidationStatusID
-- Gets: @ValidationStatusID int
-- Gets: @ValidationStatusIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_UpdateAllWValidationStatusIDLogic]
	@ValidationStatusID int,
	@ValidationStatusIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCaseValidation]
SET
	[ValidationStatusID] = @ValidationStatusID
WHERE
	[ValidationStatusID] = @ValidationStatusIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCaseValidation'
-- using the Primary Key. 
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_Delete]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCaseValidation]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCaseValidation'
-- based on the Primary Key.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_SelectOne]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CaseID],
	[IsValidate],
	[ValidationStatusID],
	[ValidationStatusDate],
	[Notes],
	[RandomNumber],
	[IsOldMailValidate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseValidation]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCaseValidation'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CaseID],
	[IsValidate],
	[ValidationStatusID],
	[ValidationStatusDate],
	[Notes],
	[RandomNumber],
	[IsOldMailValidate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseValidation]
ORDER BY 
	[CaseID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ValidationStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCaseValidation_SelectAllWValidationStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCaseValidation_SelectAllWValidationStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCaseValidation'
-- based on a foreign key field.
-- Gets: @ValidationStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCaseValidation_SelectAllWValidationStatusIDLogic]
	@ValidationStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CaseID],
	[IsValidate],
	[ValidationStatusID],
	[ValidationStatusDate],
	[Notes],
	[RandomNumber],
	[IsOldMailValidate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblCaseValidation]
WHERE
	[ValidationStatusID] = @ValidationStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCaseValidation]

GO

-- [Stored Procedures generated for table:  tblClassroom]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblClassroom'
-- Gets: @CaseID int
-- Gets: @SchoolID int
-- Gets: @Name varchar(50)
-- Gets: @Grade varchar(2)
-- Gets: @ClassroomNumber int
-- Gets: @FullPartTime int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_Insert]
	@CaseID int,
	@SchoolID int,
	@Name varchar(50),
	@Grade varchar(2),
	@ClassroomNumber int,
	@FullPartTime int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ClassroomID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblClassroom]
(
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@SchoolID,
	@Name,
	@Grade,
	@ClassroomNumber,
	@FullPartTime,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ClassroomID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblClassroom'
-- Gets: @ClassroomID int
-- Gets: @CaseID int
-- Gets: @SchoolID int
-- Gets: @Name varchar(50)
-- Gets: @Grade varchar(2)
-- Gets: @ClassroomNumber int
-- Gets: @FullPartTime int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_Update]
	@ClassroomID int,
	@CaseID int,
	@SchoolID int,
	@Name varchar(50),
	@Grade varchar(2),
	@ClassroomNumber int,
	@FullPartTime int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroom]
SET 
	[CaseID] = @CaseID,
	[SchoolID] = @SchoolID,
	[Name] = @Name,
	[Grade] = @Grade,
	[ClassroomNumber] = @ClassroomNumber,
	[FullPartTime] = @FullPartTime,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblClassroom'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroom]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_UpdateAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_UpdateAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblClassroom'.
-- Will reset field [SchoolID] with value @SchoolIDOld  to value @SchoolID
-- Gets: @SchoolID int
-- Gets: @SchoolIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_UpdateAllWSchoolIDLogic]
	@SchoolID int,
	@SchoolIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroom]
SET
	[SchoolID] = @SchoolID
WHERE
	[SchoolID] = @SchoolIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblClassroom'
-- using the Primary Key. 
-- Gets: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_Delete]
	@ClassroomID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblClassroom]
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblClassroom'
-- based on the Primary Key.
-- Gets: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_SelectOne]
	@ClassroomID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ClassroomID],
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroom]
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_SelectOneWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_SelectOneWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblClassroom'
-- based on the field [CaseID], which is unique per row.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_SelectOneWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ClassroomID],
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroom]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblClassroom'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ClassroomID],
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroom]
ORDER BY 
	[ClassroomID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblClassroom'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ClassroomID],
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroom]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroom_SelectAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroom_SelectAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblClassroom'
-- based on a foreign key field.
-- Gets: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroom_SelectAllWSchoolIDLogic]
	@SchoolID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ClassroomID],
	[CaseID],
	[SchoolID],
	[Name],
	[Grade],
	[ClassroomNumber],
	[FullPartTime],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroom]
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblClassroom]

GO

-- [Stored Procedures generated for table:  tblClassroomTeacher]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblClassroomTeacher'
-- Gets: @ClassroomID int
-- Gets: @TeacherID int
-- Gets: @IsLeadTeacher bit
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityDate datetime
-- Gets: @MobilityNotes varchar(2000)
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ClassroomTeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_Insert]
	@ClassroomID int,
	@TeacherID int,
	@IsLeadTeacher bit,
	@MobilityCode varchar(10),
	@MobilityDate datetime,
	@MobilityNotes varchar(2000),
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ClassroomTeacherID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblClassroomTeacher]
(
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@ClassroomID,
	@TeacherID,
	ISNULL(@IsLeadTeacher, ((0))),
	@MobilityCode,
	@MobilityDate,
	@MobilityNotes,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ClassroomTeacherID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblClassroomTeacher'
-- Gets: @ClassroomTeacherID int
-- Gets: @ClassroomID int
-- Gets: @TeacherID int
-- Gets: @IsLeadTeacher bit
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityDate datetime
-- Gets: @MobilityNotes varchar(2000)
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_Update]
	@ClassroomTeacherID int,
	@ClassroomID int,
	@TeacherID int,
	@IsLeadTeacher bit,
	@MobilityCode varchar(10),
	@MobilityDate datetime,
	@MobilityNotes varchar(2000),
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroomTeacher]
SET 
	[ClassroomID] = @ClassroomID,
	[TeacherID] = @TeacherID,
	[IsLeadTeacher] = @IsLeadTeacher,
	[MobilityCode] = @MobilityCode,
	[MobilityDate] = @MobilityDate,
	[MobilityNotes] = @MobilityNotes,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[ClassroomTeacherID] = @ClassroomTeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ClassroomID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_UpdateAllWClassroomIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_UpdateAllWClassroomIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblClassroomTeacher'.
-- Will reset field [ClassroomID] with value @ClassroomIDOld  to value @ClassroomID
-- Gets: @ClassroomID int
-- Gets: @ClassroomIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_UpdateAllWClassroomIDLogic]
	@ClassroomID int,
	@ClassroomIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroomTeacher]
SET
	[ClassroomID] = @ClassroomID
WHERE
	[ClassroomID] = @ClassroomIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [TeacherID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_UpdateAllWTeacherIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_UpdateAllWTeacherIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblClassroomTeacher'.
-- Will reset field [TeacherID] with value @TeacherIDOld  to value @TeacherID
-- Gets: @TeacherID int
-- Gets: @TeacherIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_UpdateAllWTeacherIDLogic]
	@TeacherID int,
	@TeacherIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblClassroomTeacher]
SET
	[TeacherID] = @TeacherID
WHERE
	[TeacherID] = @TeacherIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblClassroomTeacher'
-- using the Primary Key. 
-- Gets: @ClassroomTeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_Delete]
	@ClassroomTeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblClassroomTeacher]
WHERE
	[ClassroomTeacherID] = @ClassroomTeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblClassroomTeacher'
-- based on the Primary Key.
-- Gets: @ClassroomTeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectOne]
	@ClassroomTeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
WHERE
	[ClassroomTeacherID] = @ClassroomTeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ClassroomID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectOneWClassroomIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectOneWClassroomIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblClassroomTeacher'
-- based on the field [ClassroomID], which is unique per row.
-- Gets: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectOneWClassroomIDLogic]
	@ClassroomID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [TeacherID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectOneWTeacherIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectOneWTeacherIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblClassroomTeacher'
-- based on the field [TeacherID], which is unique per row.
-- Gets: @TeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectOneWTeacherIDLogic]
	@TeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
WHERE
	[TeacherID] = @TeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblClassroomTeacher'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
ORDER BY 
	[ClassroomTeacherID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ClassroomID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectAllWClassroomIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectAllWClassroomIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblClassroomTeacher'
-- based on a foreign key field.
-- Gets: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectAllWClassroomIDLogic]
	@ClassroomID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [TeacherID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblClassroomTeacher_SelectAllWTeacherIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblClassroomTeacher_SelectAllWTeacherIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblClassroomTeacher'
-- based on a foreign key field.
-- Gets: @TeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblClassroomTeacher_SelectAllWTeacherIDLogic]
	@TeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ClassroomTeacherID],
	[ClassroomID],
	[TeacherID],
	[IsLeadTeacher],
	[MobilityCode],
	[MobilityDate],
	[MobilityNotes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblClassroomTeacher]
WHERE
	[TeacherID] = @TeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblClassroomTeacher]

GO

-- [Stored Procedures generated for table:  tblCoderAssignments]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCoderAssignments'
-- Gets: @instrumentid int
-- Gets: @CoderId int
-- Gets: @ITCode varchar(12)
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @CreatedOn datetime
-- Gets: @CreatedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Returns: @CoderAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_Insert]
	@instrumentid int,
	@CoderId int,
	@ITCode varchar(12),
	@CaseID int,
	@MPRID varchar(8),
	@CreatedOn datetime,
	@CreatedBy varchar(50),
	@LastModifiedOn datetime,
	@LastModifiedBy varchar(50),
	@CoderAssignmentID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCoderAssignments]
(
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
)
VALUES
(
	@instrumentid,
	@CoderId,
	@ITCode,
	@CaseID,
	@MPRID,
	@CreatedOn,
	@CreatedBy,
	@LastModifiedOn,
	@LastModifiedBy
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CoderAssignmentID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblCoderAssignments'
-- Gets: @CoderAssignmentID int
-- Gets: @instrumentid int
-- Gets: @CoderId int
-- Gets: @ITCode varchar(12)
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @CreatedOn datetime
-- Gets: @CreatedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_Update]
	@CoderAssignmentID int,
	@instrumentid int,
	@CoderId int,
	@ITCode varchar(12),
	@CaseID int,
	@MPRID varchar(8),
	@CreatedOn datetime,
	@CreatedBy varchar(50),
	@LastModifiedOn datetime,
	@LastModifiedBy varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCoderAssignments]
SET 
	[instrumentid] = @instrumentid,
	[CoderId] = @CoderId,
	[ITCode] = @ITCode,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[CreatedOn] = @CreatedOn,
	[CreatedBy] = @CreatedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[LastModifiedBy] = @LastModifiedBy
WHERE
	[CoderAssignmentID] = @CoderAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [instrumentid].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_UpdateAllWinstrumentidLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_UpdateAllWinstrumentidLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCoderAssignments'.
-- Will reset field [instrumentid] with value @instrumentidOld  to value @instrumentid
-- Gets: @instrumentid int
-- Gets: @instrumentidOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_UpdateAllWinstrumentidLogic]
	@instrumentid int,
	@instrumentidOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCoderAssignments]
SET
	[instrumentid] = @instrumentid
WHERE
	[instrumentid] = @instrumentidOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CoderId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_UpdateAllWCoderIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_UpdateAllWCoderIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCoderAssignments'.
-- Will reset field [CoderId] with value @CoderIdOld  to value @CoderId
-- Gets: @CoderId int
-- Gets: @CoderIdOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_UpdateAllWCoderIdLogic]
	@CoderId int,
	@CoderIdOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCoderAssignments]
SET
	[CoderId] = @CoderId
WHERE
	[CoderId] = @CoderIdOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblCoderAssignments'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblCoderAssignments]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblCoderAssignments'
-- using the Primary Key. 
-- Gets: @CoderAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_Delete]
	@CoderAssignmentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblCoderAssignments]
WHERE
	[CoderAssignmentID] = @CoderAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblCoderAssignments'
-- based on the Primary Key.
-- Gets: @CoderAssignmentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_SelectOne]
	@CoderAssignmentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignments]
WHERE
	[CoderAssignmentID] = @CoderAssignmentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCoderAssignments'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignments]
ORDER BY 
	[CoderAssignmentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [instrumentid].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_SelectAllWinstrumentidLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_SelectAllWinstrumentidLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCoderAssignments'
-- based on a foreign key field.
-- Gets: @instrumentid int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_SelectAllWinstrumentidLogic]
	@instrumentid int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignments]
WHERE
	[instrumentid] = @instrumentid
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CoderId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_SelectAllWCoderIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_SelectAllWCoderIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCoderAssignments'
-- based on a foreign key field.
-- Gets: @CoderId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_SelectAllWCoderIdLogic]
	@CoderId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignments]
WHERE
	[CoderId] = @CoderId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignments_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignments_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblCoderAssignments'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignments_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[CaseID],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignments]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCoderAssignments]

GO

-- [Stored Procedures generated for table:  tblCoderAssignmentsHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignmentsHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignmentsHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblCoderAssignmentsHistory'
-- Gets: @CoderAssignmentID int
-- Gets: @instrumentid int
-- Gets: @CoderId int
-- Gets: @ITCode varchar(12)
-- Gets: @caseid int
-- Gets: @MPRID varchar(8)
-- Gets: @CreatedOn datetime
-- Gets: @CreatedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Returns: @CoderAssignmentHistoryId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignmentsHistory_Insert]
	@CoderAssignmentID int,
	@instrumentid int,
	@CoderId int,
	@ITCode varchar(12),
	@caseid int,
	@MPRID varchar(8),
	@CreatedOn datetime,
	@CreatedBy varchar(50),
	@LastModifiedOn datetime,
	@LastModifiedBy varchar(50),
	@CoderAssignmentHistoryId int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblCoderAssignmentsHistory]
(
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[caseid],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
)
VALUES
(
	@CoderAssignmentID,
	@instrumentid,
	@CoderId,
	@ITCode,
	@caseid,
	@MPRID,
	@CreatedOn,
	@CreatedBy,
	@LastModifiedOn,
	@LastModifiedBy
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CoderAssignmentHistoryId=SCOPE_IDENTITY()
GO


-- //// Select Stored procedure, based on field [CoderAssignmentHistoryId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignmentsHistory_SelectOneWCoderAssignmentHistoryIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignmentsHistory_SelectOneWCoderAssignmentHistoryIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblCoderAssignmentsHistory'
-- based on the field [CoderAssignmentHistoryId], which is unique per row.
-- Gets: @CoderAssignmentHistoryId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignmentsHistory_SelectOneWCoderAssignmentHistoryIdLogic]
	@CoderAssignmentHistoryId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CoderAssignmentHistoryId],
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[caseid],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignmentsHistory]
WHERE
	[CoderAssignmentHistoryId] = @CoderAssignmentHistoryId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblCoderAssignmentsHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblCoderAssignmentsHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblCoderAssignmentsHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblCoderAssignmentsHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CoderAssignmentHistoryId],
	[CoderAssignmentID],
	[instrumentid],
	[CoderId],
	[ITCode],
	[caseid],
	[MPRID],
	[CreatedOn],
	[CreatedBy],
	[LastModifiedOn],
	[LastModifiedBy]
FROM [dbo].[tblCoderAssignmentsHistory]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblCoderAssignmentsHistory]

GO

-- [Stored Procedures generated for table:  tblDistrict]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblDistrict'
-- Gets: @CaseID int
-- Gets: @SiteID int
-- Gets: @LEAID varchar(10)
-- Gets: @Name varchar(50)
-- Gets: @EnrollStartDate datetime
-- Gets: @EnrollEndDate datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @DistrictID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_Insert]
	@CaseID int,
	@SiteID int,
	@LEAID varchar(10),
	@Name varchar(50),
	@EnrollStartDate datetime,
	@EnrollEndDate datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@DistrictID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblDistrict]
(
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@SiteID,
	@LEAID,
	@Name,
	@EnrollStartDate,
	@EnrollEndDate,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @DistrictID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblDistrict'
-- Gets: @DistrictID int
-- Gets: @CaseID int
-- Gets: @SiteID int
-- Gets: @LEAID varchar(10)
-- Gets: @Name varchar(50)
-- Gets: @EnrollStartDate datetime
-- Gets: @EnrollEndDate datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_Update]
	@DistrictID int,
	@CaseID int,
	@SiteID int,
	@LEAID varchar(10),
	@Name varchar(50),
	@EnrollStartDate datetime,
	@EnrollEndDate datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDistrict]
SET 
	[CaseID] = @CaseID,
	[SiteID] = @SiteID,
	[LEAID] = @LEAID,
	[Name] = @Name,
	[EnrollStartDate] = @EnrollStartDate,
	[EnrollEndDate] = @EnrollEndDate,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[DistrictID] = @DistrictID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDistrict'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDistrict]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SiteID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_UpdateAllWSiteIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_UpdateAllWSiteIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDistrict'.
-- Will reset field [SiteID] with value @SiteIDOld  to value @SiteID
-- Gets: @SiteID int
-- Gets: @SiteIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_UpdateAllWSiteIDLogic]
	@SiteID int,
	@SiteIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDistrict]
SET
	[SiteID] = @SiteID
WHERE
	[SiteID] = @SiteIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblDistrict'
-- using the Primary Key. 
-- Gets: @DistrictID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_Delete]
	@DistrictID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblDistrict]
WHERE
	[DistrictID] = @DistrictID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblDistrict'
-- based on the Primary Key.
-- Gets: @DistrictID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_SelectOne]
	@DistrictID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DistrictID],
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDistrict]
WHERE
	[DistrictID] = @DistrictID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_SelectOneWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_SelectOneWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblDistrict'
-- based on the field [CaseID], which is unique per row.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_SelectOneWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DistrictID],
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDistrict]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblDistrict'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DistrictID],
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDistrict]
ORDER BY 
	[DistrictID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDistrict'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DistrictID],
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDistrict]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SiteID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDistrict_SelectAllWSiteIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDistrict_SelectAllWSiteIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDistrict'
-- based on a foreign key field.
-- Gets: @SiteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDistrict_SelectAllWSiteIDLogic]
	@SiteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DistrictID],
	[CaseID],
	[SiteID],
	[LEAID],
	[Name],
	[EnrollStartDate],
	[EnrollEndDate],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDistrict]
WHERE
	[SiteID] = @SiteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblDistrict]

GO

-- [Stored Procedures generated for table:  tblDocument]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblDocument'
-- Gets: @CaseID int
-- Gets: @InstrumentID int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @Round int
-- Gets: @USPSCheckDigit tinyint
-- Gets: @DocumentTypeID int
-- Gets: @DocumentNum int
-- Gets: @DocumentStatusID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Returns: @DocumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_Insert]
	@CaseID int,
	@InstrumentID int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@Round int,
	@USPSCheckDigit tinyint,
	@DocumentTypeID int,
	@DocumentNum int,
	@DocumentStatusID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@DocumentID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblDocument]
(
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@InstrumentID,
	@PersonHistoryID,
	@AddressHistoryID,
	@Round,
	@USPSCheckDigit,
	@DocumentTypeID,
	@DocumentNum,
	@DocumentStatusID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @DocumentID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblDocument'
-- Gets: @DocumentID int
-- Gets: @CaseID int
-- Gets: @InstrumentID int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @Round int
-- Gets: @USPSCheckDigit tinyint
-- Gets: @DocumentTypeID int
-- Gets: @DocumentNum int
-- Gets: @DocumentStatusID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_Update]
	@DocumentID int,
	@CaseID int,
	@InstrumentID int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@Round int,
	@USPSCheckDigit tinyint,
	@DocumentTypeID int,
	@DocumentNum int,
	@DocumentStatusID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocument]
SET 
	[CaseID] = @CaseID,
	[InstrumentID] = @InstrumentID,
	[PersonHistoryID] = @PersonHistoryID,
	[AddressHistoryID] = @AddressHistoryID,
	[Round] = @Round,
	[USPSCheckDigit] = @USPSCheckDigit,
	[DocumentTypeID] = @DocumentTypeID,
	[DocumentNum] = @DocumentNum,
	[DocumentStatusID] = @DocumentStatusID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[DocumentID] = @DocumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDocument'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocument]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DocumentTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_UpdateAllWDocumentTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_UpdateAllWDocumentTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDocument'.
-- Will reset field [DocumentTypeID] with value @DocumentTypeIDOld  to value @DocumentTypeID
-- Gets: @DocumentTypeID int
-- Gets: @DocumentTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_UpdateAllWDocumentTypeIDLogic]
	@DocumentTypeID int,
	@DocumentTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocument]
SET
	[DocumentTypeID] = @DocumentTypeID
WHERE
	[DocumentTypeID] = @DocumentTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DocumentStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_UpdateAllWDocumentStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_UpdateAllWDocumentStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDocument'.
-- Will reset field [DocumentStatusID] with value @DocumentStatusIDOld  to value @DocumentStatusID
-- Gets: @DocumentStatusID int
-- Gets: @DocumentStatusIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_UpdateAllWDocumentStatusIDLogic]
	@DocumentStatusID int,
	@DocumentStatusIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocument]
SET
	[DocumentStatusID] = @DocumentStatusID
WHERE
	[DocumentStatusID] = @DocumentStatusIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblDocument'
-- using the Primary Key. 
-- Gets: @DocumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_Delete]
	@DocumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblDocument]
WHERE
	[DocumentID] = @DocumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblDocument'
-- based on the Primary Key.
-- Gets: @DocumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_SelectOne]
	@DocumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocument]
WHERE
	[DocumentID] = @DocumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblDocument'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocument]
ORDER BY 
	[DocumentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDocument'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocument]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DocumentTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_SelectAllWDocumentTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_SelectAllWDocumentTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDocument'
-- based on a foreign key field.
-- Gets: @DocumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_SelectAllWDocumentTypeIDLogic]
	@DocumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocument]
WHERE
	[DocumentTypeID] = @DocumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DocumentStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocument_SelectAllWDocumentStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocument_SelectAllWDocumentStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDocument'
-- based on a foreign key field.
-- Gets: @DocumentStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocument_SelectAllWDocumentStatusIDLogic]
	@DocumentStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocument]
WHERE
	[DocumentStatusID] = @DocumentStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblDocument]

GO

-- [Stored Procedures generated for table:  tblDocumentHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblDocumentHistory'
-- Gets: @DocumentID int
-- Gets: @CaseID int
-- Gets: @InstrumentID int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @Round int
-- Gets: @USPSCheckDigit tinyint
-- Gets: @DocumentTypeID int
-- Gets: @DocumentNum int
-- Gets: @DocumentStatusID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Returns: @DocumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_Insert]
	@DocumentID int,
	@CaseID int,
	@InstrumentID int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@Round int,
	@USPSCheckDigit tinyint,
	@DocumentTypeID int,
	@DocumentNum int,
	@DocumentStatusID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@DocumentHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblDocumentHistory]
(
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@DocumentID,
	@CaseID,
	@InstrumentID,
	@PersonHistoryID,
	@AddressHistoryID,
	@Round,
	@USPSCheckDigit,
	@DocumentTypeID,
	@DocumentNum,
	@DocumentStatusID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @DocumentHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblDocumentHistory'
-- Gets: @DocumentHistoryID int
-- Gets: @DocumentID int
-- Gets: @CaseID int
-- Gets: @InstrumentID int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @Round int
-- Gets: @USPSCheckDigit tinyint
-- Gets: @DocumentTypeID int
-- Gets: @DocumentNum int
-- Gets: @DocumentStatusID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(50)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_Update]
	@DocumentHistoryID int,
	@DocumentID int,
	@CaseID int,
	@InstrumentID int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@Round int,
	@USPSCheckDigit tinyint,
	@DocumentTypeID int,
	@DocumentNum int,
	@DocumentStatusID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@LastModifiedBy varchar(50),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocumentHistory]
SET 
	[DocumentID] = @DocumentID,
	[CaseID] = @CaseID,
	[InstrumentID] = @InstrumentID,
	[PersonHistoryID] = @PersonHistoryID,
	[AddressHistoryID] = @AddressHistoryID,
	[Round] = @Round,
	[USPSCheckDigit] = @USPSCheckDigit,
	[DocumentTypeID] = @DocumentTypeID,
	[DocumentNum] = @DocumentNum,
	[DocumentStatusID] = @DocumentStatusID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[DocumentHistoryID] = @DocumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DocumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_UpdateAllWDocumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_UpdateAllWDocumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblDocumentHistory'.
-- Will reset field [DocumentID] with value @DocumentIDOld  to value @DocumentID
-- Gets: @DocumentID int
-- Gets: @DocumentIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_UpdateAllWDocumentIDLogic]
	@DocumentID int,
	@DocumentIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblDocumentHistory]
SET
	[DocumentID] = @DocumentID
WHERE
	[DocumentID] = @DocumentIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblDocumentHistory'
-- using the Primary Key. 
-- Gets: @DocumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_Delete]
	@DocumentHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblDocumentHistory]
WHERE
	[DocumentHistoryID] = @DocumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblDocumentHistory'
-- based on the Primary Key.
-- Gets: @DocumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_SelectOne]
	@DocumentHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentHistoryID],
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocumentHistory]
WHERE
	[DocumentHistoryID] = @DocumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblDocumentHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentHistoryID],
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocumentHistory]
ORDER BY 
	[DocumentHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DocumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblDocumentHistory_SelectAllWDocumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblDocumentHistory_SelectAllWDocumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblDocumentHistory'
-- based on a foreign key field.
-- Gets: @DocumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblDocumentHistory_SelectAllWDocumentIDLogic]
	@DocumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DocumentHistoryID],
	[DocumentID],
	[CaseID],
	[InstrumentID],
	[PersonHistoryID],
	[AddressHistoryID],
	[Round],
	[USPSCheckDigit],
	[DocumentTypeID],
	[DocumentNum],
	[DocumentStatusID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblDocumentHistory]
WHERE
	[DocumentID] = @DocumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblDocumentHistory]

GO

-- [Stored Procedures generated for table:  tblEmail]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblEmail'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @EmailAddress varchar(255)
-- Gets: @EmailTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @EmailID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@EmailAddress varchar(255),
	@EmailTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@EmailID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblEmail]
(
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@Round,
	@EmailAddress,
	@EmailTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @EmailID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblEmail'
-- Gets: @EmailID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @EmailAddress varchar(255)
-- Gets: @EmailTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_Update]
	@EmailID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@EmailAddress varchar(255),
	@EmailTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmail]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[EmailAddress] = @EmailAddress,
	[EmailTypeID] = @EmailTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[EmailID] = @EmailID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblEmail'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmail]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [EmailTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_UpdateAllWEmailTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_UpdateAllWEmailTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblEmail'.
-- Will reset field [EmailTypeID] with value @EmailTypeIDOld  to value @EmailTypeID
-- Gets: @EmailTypeID int
-- Gets: @EmailTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_UpdateAllWEmailTypeIDLogic]
	@EmailTypeID int,
	@EmailTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmail]
SET
	[EmailTypeID] = @EmailTypeID
WHERE
	[EmailTypeID] = @EmailTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_UpdateAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_UpdateAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblEmail'.
-- Will reset field [SourceTypeID] with value @SourceTypeIDOld  to value @SourceTypeID
-- Gets: @SourceTypeID int
-- Gets: @SourceTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_UpdateAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@SourceTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmail]
SET
	[SourceTypeID] = @SourceTypeID
WHERE
	[SourceTypeID] = @SourceTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_UpdateAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_UpdateAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblEmail'.
-- Will reset field [SourceQualityID] with value @SourceQualityIDOld  to value @SourceQualityID
-- Gets: @SourceQualityID int
-- Gets: @SourceQualityIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_UpdateAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@SourceQualityIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmail]
SET
	[SourceQualityID] = @SourceQualityID
WHERE
	[SourceQualityID] = @SourceQualityIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblEmail'
-- using the Primary Key. 
-- Gets: @EmailID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_Delete]
	@EmailID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblEmail]
WHERE
	[EmailID] = @EmailID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblEmail'
-- based on the Primary Key.
-- Gets: @EmailID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectOne]
	@EmailID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
WHERE
	[EmailID] = @EmailID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblEmail'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
ORDER BY 
	[EmailID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblEmail'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [EmailTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectAllWEmailTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectAllWEmailTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblEmail'
-- based on a foreign key field.
-- Gets: @EmailTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectAllWEmailTypeIDLogic]
	@EmailTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
WHERE
	[EmailTypeID] = @EmailTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblEmail'
-- based on a foreign key field.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmail_SelectAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmail_SelectAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblEmail'
-- based on a foreign key field.
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmail_SelectAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmail]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblEmail]

GO

-- [Stored Procedures generated for table:  tblEmailHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblEmailHistory'
-- Gets: @EmailID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @EmailAddress varchar(255)
-- Gets: @EmailTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @EmailHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_Insert]
	@EmailID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@EmailAddress varchar(255),
	@EmailTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@EmailHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblEmailHistory]
(
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@EmailID,
	@CaseID,
	@MPRID,
	@Round,
	@EmailAddress,
	@EmailTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @EmailHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblEmailHistory'
-- Gets: @EmailHistoryID int
-- Gets: @EmailID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @EmailAddress varchar(255)
-- Gets: @EmailTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_Update]
	@EmailHistoryID int,
	@EmailID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@EmailAddress varchar(255),
	@EmailTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmailHistory]
SET 
	[EmailID] = @EmailID,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[EmailAddress] = @EmailAddress,
	[EmailTypeID] = @EmailTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[EmailHistoryID] = @EmailHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [EmailID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_UpdateAllWEmailIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_UpdateAllWEmailIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblEmailHistory'.
-- Will reset field [EmailID] with value @EmailIDOld  to value @EmailID
-- Gets: @EmailID int
-- Gets: @EmailIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_UpdateAllWEmailIDLogic]
	@EmailID int,
	@EmailIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblEmailHistory]
SET
	[EmailID] = @EmailID
WHERE
	[EmailID] = @EmailIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblEmailHistory'
-- using the Primary Key. 
-- Gets: @EmailHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_Delete]
	@EmailHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblEmailHistory]
WHERE
	[EmailHistoryID] = @EmailHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblEmailHistory'
-- based on the Primary Key.
-- Gets: @EmailHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_SelectOne]
	@EmailHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[EmailHistoryID],
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmailHistory]
WHERE
	[EmailHistoryID] = @EmailHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblEmailHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[EmailHistoryID],
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmailHistory]
ORDER BY 
	[EmailHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [EmailID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblEmailHistory_SelectAllWEmailIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblEmailHistory_SelectAllWEmailIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblEmailHistory'
-- based on a foreign key field.
-- Gets: @EmailID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblEmailHistory_SelectAllWEmailIDLogic]
	@EmailID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[EmailHistoryID],
	[EmailID],
	[CaseID],
	[MPRID],
	[Round],
	[EmailAddress],
	[EmailTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblEmailHistory]
WHERE
	[EmailID] = @EmailID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblEmailHistory]

GO

-- [Stored Procedures generated for table:  tblInstrument]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblInstrument'
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @InstrumentTypeID int
-- Gets: @SampleMemberMPRID varchar(8)
-- Gets: @CurrentRespondentMPRID varchar(8)
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @StatusChangeDate datetime
-- Gets: @StatusChangedBy varchar(50)
-- Gets: @DateLastSentToCATI datetime
-- Gets: @DateLastReceivedFromCATI datetime
-- Gets: @ReleaseDate smalldatetime
-- Gets: @RespondentAddressReviewID int
-- Gets: @RespondentDateLastPayment datetime
-- Gets: @SurveyorAddressReviewID int
-- Gets: @SurveyorDateLastPayment datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @CurrentPhone int
-- Returns: @InstrumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_Insert]
	@CaseID int,
	@Round int,
	@InstrumentTypeID int,
	@SampleMemberMPRID varchar(8),
	@CurrentRespondentMPRID varchar(8),
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@StatusChangeDate datetime,
	@StatusChangedBy varchar(50),
	@DateLastSentToCATI datetime,
	@DateLastReceivedFromCATI datetime,
	@ReleaseDate smalldatetime,
	@RespondentAddressReviewID int,
	@RespondentDateLastPayment datetime,
	@SurveyorAddressReviewID int,
	@SurveyorDateLastPayment datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CurrentPhone int,
	@InstrumentID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblInstrument]
(
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@Round,
	@InstrumentTypeID,
	@SampleMemberMPRID,
	@CurrentRespondentMPRID,
	@CurrentStatus,
	@LogicalStatus,
	@StatusChangeDate,
	@StatusChangedBy,
	@DateLastSentToCATI,
	@DateLastReceivedFromCATI,
	@ReleaseDate,
	@RespondentAddressReviewID,
	@RespondentDateLastPayment,
	@SurveyorAddressReviewID,
	@SurveyorDateLastPayment,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@CurrentPhone
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InstrumentID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblInstrument'
-- Gets: @InstrumentID int
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @InstrumentTypeID int
-- Gets: @SampleMemberMPRID varchar(8)
-- Gets: @CurrentRespondentMPRID varchar(8)
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @StatusChangeDate datetime
-- Gets: @StatusChangedBy varchar(50)
-- Gets: @DateLastSentToCATI datetime
-- Gets: @DateLastReceivedFromCATI datetime
-- Gets: @ReleaseDate smalldatetime
-- Gets: @RespondentAddressReviewID int
-- Gets: @RespondentDateLastPayment datetime
-- Gets: @SurveyorAddressReviewID int
-- Gets: @SurveyorDateLastPayment datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @CurrentPhone int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_Update]
	@InstrumentID int,
	@CaseID int,
	@Round int,
	@InstrumentTypeID int,
	@SampleMemberMPRID varchar(8),
	@CurrentRespondentMPRID varchar(8),
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@StatusChangeDate datetime,
	@StatusChangedBy varchar(50),
	@DateLastSentToCATI datetime,
	@DateLastReceivedFromCATI datetime,
	@ReleaseDate smalldatetime,
	@RespondentAddressReviewID int,
	@RespondentDateLastPayment datetime,
	@SurveyorAddressReviewID int,
	@SurveyorDateLastPayment datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CurrentPhone int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInstrument]
SET 
	[CaseID] = @CaseID,
	[Round] = @Round,
	[InstrumentTypeID] = @InstrumentTypeID,
	[SampleMemberMPRID] = @SampleMemberMPRID,
	[CurrentRespondentMPRID] = @CurrentRespondentMPRID,
	[CurrentStatus] = @CurrentStatus,
	[LogicalStatus] = @LogicalStatus,
	[StatusChangeDate] = @StatusChangeDate,
	[StatusChangedBy] = @StatusChangedBy,
	[DateLastSentToCATI] = @DateLastSentToCATI,
	[DateLastReceivedFromCATI] = @DateLastReceivedFromCATI,
	[ReleaseDate] = @ReleaseDate,
	[RespondentAddressReviewID] = @RespondentAddressReviewID,
	[RespondentDateLastPayment] = @RespondentDateLastPayment,
	[SurveyorAddressReviewID] = @SurveyorAddressReviewID,
	[SurveyorDateLastPayment] = @SurveyorDateLastPayment,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[CurrentPhone] = @CurrentPhone
WHERE
	[InstrumentID] = @InstrumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblInstrument'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInstrument]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblInstrument'
-- using the Primary Key. 
-- Gets: @InstrumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_Delete]
	@InstrumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblInstrument]
WHERE
	[InstrumentID] = @InstrumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblInstrument'
-- based on the Primary Key.
-- Gets: @InstrumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_SelectOne]
	@InstrumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrument]
WHERE
	[InstrumentID] = @InstrumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblInstrument'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrument]
ORDER BY 
	[InstrumentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrument_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrument_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblInstrument'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrument_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrument]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblInstrument]

GO

-- [Stored Procedures generated for table:  tblInstrumentHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblInstrumentHistory'
-- Gets: @InstrumentID int
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @InstrumentTypeID int
-- Gets: @SampleMemberMPRID varchar(8)
-- Gets: @CurrentRespondentMPRID varchar(8)
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @StatusChangeDate datetime
-- Gets: @StatusChangedBy varchar(50)
-- Gets: @DateLastSentToCATI datetime
-- Gets: @DateLastReceivedFromCATI datetime
-- Gets: @ReleaseDate smalldatetime
-- Gets: @RespondentAddressReviewID int
-- Gets: @RespondentDateLastPayment datetime
-- Gets: @SurveyorAddressReviewID int
-- Gets: @SurveyorDateLastPayment datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @CurrentPhone int
-- Returns: @InstrumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_Insert]
	@InstrumentID int,
	@CaseID int,
	@Round int,
	@InstrumentTypeID int,
	@SampleMemberMPRID varchar(8),
	@CurrentRespondentMPRID varchar(8),
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@StatusChangeDate datetime,
	@StatusChangedBy varchar(50),
	@DateLastSentToCATI datetime,
	@DateLastReceivedFromCATI datetime,
	@ReleaseDate smalldatetime,
	@RespondentAddressReviewID int,
	@RespondentDateLastPayment datetime,
	@SurveyorAddressReviewID int,
	@SurveyorDateLastPayment datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CurrentPhone int,
	@InstrumentHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblInstrumentHistory]
(
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
)
VALUES
(
	@InstrumentID,
	@CaseID,
	@Round,
	@InstrumentTypeID,
	@SampleMemberMPRID,
	@CurrentRespondentMPRID,
	@CurrentStatus,
	@LogicalStatus,
	@StatusChangeDate,
	@StatusChangedBy,
	@DateLastSentToCATI,
	@DateLastReceivedFromCATI,
	@ReleaseDate,
	@RespondentAddressReviewID,
	@RespondentDateLastPayment,
	@SurveyorAddressReviewID,
	@SurveyorDateLastPayment,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@CurrentPhone
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InstrumentHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblInstrumentHistory'
-- Gets: @InstrumentHistoryID int
-- Gets: @InstrumentID int
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @InstrumentTypeID int
-- Gets: @SampleMemberMPRID varchar(8)
-- Gets: @CurrentRespondentMPRID varchar(8)
-- Gets: @CurrentStatus char(4)
-- Gets: @LogicalStatus char(4)
-- Gets: @StatusChangeDate datetime
-- Gets: @StatusChangedBy varchar(50)
-- Gets: @DateLastSentToCATI datetime
-- Gets: @DateLastReceivedFromCATI datetime
-- Gets: @ReleaseDate smalldatetime
-- Gets: @RespondentAddressReviewID int
-- Gets: @RespondentDateLastPayment datetime
-- Gets: @SurveyorAddressReviewID int
-- Gets: @SurveyorDateLastPayment datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @CurrentPhone int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_Update]
	@InstrumentHistoryID int,
	@InstrumentID int,
	@CaseID int,
	@Round int,
	@InstrumentTypeID int,
	@SampleMemberMPRID varchar(8),
	@CurrentRespondentMPRID varchar(8),
	@CurrentStatus char(4),
	@LogicalStatus char(4),
	@StatusChangeDate datetime,
	@StatusChangedBy varchar(50),
	@DateLastSentToCATI datetime,
	@DateLastReceivedFromCATI datetime,
	@ReleaseDate smalldatetime,
	@RespondentAddressReviewID int,
	@RespondentDateLastPayment datetime,
	@SurveyorAddressReviewID int,
	@SurveyorDateLastPayment datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@CurrentPhone int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInstrumentHistory]
SET 
	[InstrumentID] = @InstrumentID,
	[CaseID] = @CaseID,
	[Round] = @Round,
	[InstrumentTypeID] = @InstrumentTypeID,
	[SampleMemberMPRID] = @SampleMemberMPRID,
	[CurrentRespondentMPRID] = @CurrentRespondentMPRID,
	[CurrentStatus] = @CurrentStatus,
	[LogicalStatus] = @LogicalStatus,
	[StatusChangeDate] = @StatusChangeDate,
	[StatusChangedBy] = @StatusChangedBy,
	[DateLastSentToCATI] = @DateLastSentToCATI,
	[DateLastReceivedFromCATI] = @DateLastReceivedFromCATI,
	[ReleaseDate] = @ReleaseDate,
	[RespondentAddressReviewID] = @RespondentAddressReviewID,
	[RespondentDateLastPayment] = @RespondentDateLastPayment,
	[SurveyorAddressReviewID] = @SurveyorAddressReviewID,
	[SurveyorDateLastPayment] = @SurveyorDateLastPayment,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[CurrentPhone] = @CurrentPhone
WHERE
	[InstrumentHistoryID] = @InstrumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InstrumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_UpdateAllWInstrumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_UpdateAllWInstrumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblInstrumentHistory'.
-- Will reset field [InstrumentID] with value @InstrumentIDOld  to value @InstrumentID
-- Gets: @InstrumentID int
-- Gets: @InstrumentIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_UpdateAllWInstrumentIDLogic]
	@InstrumentID int,
	@InstrumentIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInstrumentHistory]
SET
	[InstrumentID] = @InstrumentID
WHERE
	[InstrumentID] = @InstrumentIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblInstrumentHistory'
-- using the Primary Key. 
-- Gets: @InstrumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_Delete]
	@InstrumentHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblInstrumentHistory]
WHERE
	[InstrumentHistoryID] = @InstrumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblInstrumentHistory'
-- based on the Primary Key.
-- Gets: @InstrumentHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_SelectOne]
	@InstrumentHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InstrumentHistoryID],
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrumentHistory]
WHERE
	[InstrumentHistoryID] = @InstrumentHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblInstrumentHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InstrumentHistoryID],
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrumentHistory]
ORDER BY 
	[InstrumentHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InstrumentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInstrumentHistory_SelectAllWInstrumentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInstrumentHistory_SelectAllWInstrumentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblInstrumentHistory'
-- based on a foreign key field.
-- Gets: @InstrumentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInstrumentHistory_SelectAllWInstrumentIDLogic]
	@InstrumentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InstrumentHistoryID],
	[InstrumentID],
	[CaseID],
	[Round],
	[InstrumentTypeID],
	[SampleMemberMPRID],
	[CurrentRespondentMPRID],
	[CurrentStatus],
	[LogicalStatus],
	[StatusChangeDate],
	[StatusChangedBy],
	[DateLastSentToCATI],
	[DateLastReceivedFromCATI],
	[ReleaseDate],
	[RespondentAddressReviewID],
	[RespondentDateLastPayment],
	[SurveyorAddressReviewID],
	[SurveyorDateLastPayment],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[CurrentPhone]
FROM [dbo].[tblInstrumentHistory]
WHERE
	[InstrumentID] = @InstrumentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblInstrumentHistory]

GO

-- [Stored Procedures generated for table:  tblInterviewerCaseTracking]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblInterviewerCaseTracking'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(10)
-- Gets: @InterviewerID int
-- Gets: @DateReported smalldatetime
-- Gets: @ReportedStatus char(4)
-- Gets: @Notes varchar(500)
-- Gets: @Remark1 bit
-- Gets: @Remark2 bit
-- Gets: @Remark3 bit
-- Gets: @Remark4 bit
-- Gets: @Remark5 bit
-- Gets: @Remark6 bit
-- Gets: @Remark7 bit
-- Gets: @Remark8 bit
-- Gets: @Remark9 bit
-- Gets: @Remark10 bit
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @InterviewerCaseTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_Insert]
	@CaseID int,
	@MPRID varchar(10),
	@InterviewerID int,
	@DateReported smalldatetime,
	@ReportedStatus char(4),
	@Notes varchar(500),
	@Remark1 bit,
	@Remark2 bit,
	@Remark3 bit,
	@Remark4 bit,
	@Remark5 bit,
	@Remark6 bit,
	@Remark7 bit,
	@Remark8 bit,
	@Remark9 bit,
	@Remark10 bit,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@InterviewerCaseTrackingID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblInterviewerCaseTracking]
(
	[CaseID],
	[MPRID],
	[InterviewerID],
	[DateReported],
	[ReportedStatus],
	[Notes],
	[Remark1],
	[Remark2],
	[Remark3],
	[Remark4],
	[Remark5],
	[Remark6],
	[Remark7],
	[Remark8],
	[Remark9],
	[Remark10],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@InterviewerID,
	@DateReported,
	ISNULL(@ReportedStatus, ('')),
	ISNULL(@Notes, ('')),
	ISNULL(@Remark1, ((0))),
	ISNULL(@Remark2, ((0))),
	ISNULL(@Remark3, ((0))),
	ISNULL(@Remark4, ((0))),
	ISNULL(@Remark5, ((0))),
	ISNULL(@Remark6, ((0))),
	ISNULL(@Remark7, ((0))),
	ISNULL(@Remark8, ((0))),
	ISNULL(@Remark9, ((0))),
	ISNULL(@Remark10, ((0))),
	ISNULL(@CreatedBy, ('')),
	ISNULL(@CreatedOn, (getdate())),
	ISNULL(@LastModifiedBy, ('')),
	ISNULL(@LastModifiedOn, (getdate()))
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InterviewerCaseTrackingID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblInterviewerCaseTracking'
-- Gets: @InterviewerCaseTrackingID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(10)
-- Gets: @InterviewerID int
-- Gets: @DateReported smalldatetime
-- Gets: @ReportedStatus char(4)
-- Gets: @Notes varchar(500)
-- Gets: @Remark1 bit
-- Gets: @Remark2 bit
-- Gets: @Remark3 bit
-- Gets: @Remark4 bit
-- Gets: @Remark5 bit
-- Gets: @Remark6 bit
-- Gets: @Remark7 bit
-- Gets: @Remark8 bit
-- Gets: @Remark9 bit
-- Gets: @Remark10 bit
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_Update]
	@InterviewerCaseTrackingID int,
	@CaseID int,
	@MPRID varchar(10),
	@InterviewerID int,
	@DateReported smalldatetime,
	@ReportedStatus char(4),
	@Notes varchar(500),
	@Remark1 bit,
	@Remark2 bit,
	@Remark3 bit,
	@Remark4 bit,
	@Remark5 bit,
	@Remark6 bit,
	@Remark7 bit,
	@Remark8 bit,
	@Remark9 bit,
	@Remark10 bit,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInterviewerCaseTracking]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[InterviewerID] = @InterviewerID,
	[DateReported] = @DateReported,
	[ReportedStatus] = @ReportedStatus,
	[Notes] = @Notes,
	[Remark1] = @Remark1,
	[Remark2] = @Remark2,
	[Remark3] = @Remark3,
	[Remark4] = @Remark4,
	[Remark5] = @Remark5,
	[Remark6] = @Remark6,
	[Remark7] = @Remark7,
	[Remark8] = @Remark8,
	[Remark9] = @Remark9,
	[Remark10] = @Remark10,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[InterviewerCaseTrackingID] = @InterviewerCaseTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblInterviewerCaseTracking'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInterviewerCaseTracking]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblInterviewerCaseTracking'.
-- Will reset field [InterviewerID] with value @InterviewerIDOld  to value @InterviewerID
-- Gets: @InterviewerID int
-- Gets: @InterviewerIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_UpdateAllWInterviewerIDLogic]
	@InterviewerID int,
	@InterviewerIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInterviewerCaseTracking]
SET
	[InterviewerID] = @InterviewerID
WHERE
	[InterviewerID] = @InterviewerIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblInterviewerCaseTracking'
-- using the Primary Key. 
-- Gets: @InterviewerCaseTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_Delete]
	@InterviewerCaseTrackingID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblInterviewerCaseTracking]
WHERE
	[InterviewerCaseTrackingID] = @InterviewerCaseTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblInterviewerCaseTracking'
-- based on the Primary Key.
-- Gets: @InterviewerCaseTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_SelectOne]
	@InterviewerCaseTrackingID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerCaseTrackingID],
	[CaseID],
	[MPRID],
	[InterviewerID],
	[DateReported],
	[ReportedStatus],
	[Notes],
	[Remark1],
	[Remark2],
	[Remark3],
	[Remark4],
	[Remark5],
	[Remark6],
	[Remark7],
	[Remark8],
	[Remark9],
	[Remark10],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblInterviewerCaseTracking]
WHERE
	[InterviewerCaseTrackingID] = @InterviewerCaseTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblInterviewerCaseTracking'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InterviewerCaseTrackingID],
	[CaseID],
	[MPRID],
	[InterviewerID],
	[DateReported],
	[ReportedStatus],
	[Notes],
	[Remark1],
	[Remark2],
	[Remark3],
	[Remark4],
	[Remark5],
	[Remark6],
	[Remark7],
	[Remark8],
	[Remark9],
	[Remark10],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblInterviewerCaseTracking]
ORDER BY 
	[InterviewerCaseTrackingID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblInterviewerCaseTracking'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerCaseTrackingID],
	[CaseID],
	[MPRID],
	[InterviewerID],
	[DateReported],
	[ReportedStatus],
	[Notes],
	[Remark1],
	[Remark2],
	[Remark3],
	[Remark4],
	[Remark5],
	[Remark6],
	[Remark7],
	[Remark8],
	[Remark9],
	[Remark10],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblInterviewerCaseTracking]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerCaseTracking_SelectAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerCaseTracking_SelectAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblInterviewerCaseTracking'
-- based on a foreign key field.
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerCaseTracking_SelectAllWInterviewerIDLogic]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerCaseTrackingID],
	[CaseID],
	[MPRID],
	[InterviewerID],
	[DateReported],
	[ReportedStatus],
	[Notes],
	[Remark1],
	[Remark2],
	[Remark3],
	[Remark4],
	[Remark5],
	[Remark6],
	[Remark7],
	[Remark8],
	[Remark9],
	[Remark10],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblInterviewerCaseTracking]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblInterviewerCaseTracking]

GO

-- [Stored Procedures generated for table:  tblInterviewerTracking]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblInterviewerTracking'
-- Gets: @InterviewerID int
-- Gets: @DateReported smalldatetime
-- Gets: @WeekBeg smalldatetime
-- Gets: @WeekEnd smalldatetime
-- Gets: @Hours real
-- Gets: @HoursAdministrative real
-- Gets: @HoursLocating real
-- Gets: @HoursInterviewing real
-- Gets: @HoursTraveling real
-- Gets: @HoursOther real
-- Gets: @MileageExpense money
-- Gets: @MileageRate real
-- Gets: @Mileage real
-- Gets: @Expenses money
-- Gets: @CarRental money
-- Gets: @AirTravel money
-- Gets: @Notes varchar(500)
-- Gets: @SuppliesFedEx bit
-- Gets: @SuppliesExpRep bit
-- Gets: @SuppliesWYWO bit
-- Gets: @SuppliesBrochure bit
-- Gets: @SuppliesChecklist bit
-- Gets: @SuppliesOther varchar(50)
-- Gets: @SuppliesPrintedBy varchar(32)
-- Gets: @SuppliesPrintedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @GiftCards int
-- Returns: @InterviewerTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_Insert]
	@InterviewerID int,
	@DateReported smalldatetime,
	@WeekBeg smalldatetime,
	@WeekEnd smalldatetime,
	@Hours real,
	@HoursAdministrative real,
	@HoursLocating real,
	@HoursInterviewing real,
	@HoursTraveling real,
	@HoursOther real,
	@MileageExpense money,
	@MileageRate real,
	@Mileage real,
	@Expenses money,
	@CarRental money,
	@AirTravel money,
	@Notes varchar(500),
	@SuppliesFedEx bit,
	@SuppliesExpRep bit,
	@SuppliesWYWO bit,
	@SuppliesBrochure bit,
	@SuppliesChecklist bit,
	@SuppliesOther varchar(50),
	@SuppliesPrintedBy varchar(32),
	@SuppliesPrintedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@GiftCards int,
	@InterviewerTrackingID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblInterviewerTracking]
(
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
)
VALUES
(
	@InterviewerID,
	@DateReported,
	@WeekBeg,
	@WeekEnd,
	@Hours,
	@HoursAdministrative,
	@HoursLocating,
	@HoursInterviewing,
	@HoursTraveling,
	@HoursOther,
	@MileageExpense,
	@MileageRate,
	@Mileage,
	@Expenses,
	@CarRental,
	@AirTravel,
	ISNULL(@Notes, ('')),
	ISNULL(@SuppliesFedEx, ((0))),
	ISNULL(@SuppliesExpRep, ((0))),
	ISNULL(@SuppliesWYWO, ((0))),
	ISNULL(@SuppliesBrochure, ((0))),
	ISNULL(@SuppliesChecklist, ((0))),
	ISNULL(@SuppliesOther, ('')),
	ISNULL(@SuppliesPrintedBy, ('')),
	@SuppliesPrintedOn,
	ISNULL(@CreatedBy, ('')),
	@CreatedOn,
	ISNULL(@LastModifiedBy, ('')),
	@LastModifiedOn,
	@GiftCards
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InterviewerTrackingID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblInterviewerTracking'
-- Gets: @InterviewerTrackingID int
-- Gets: @InterviewerID int
-- Gets: @DateReported smalldatetime
-- Gets: @WeekBeg smalldatetime
-- Gets: @WeekEnd smalldatetime
-- Gets: @Hours real
-- Gets: @HoursAdministrative real
-- Gets: @HoursLocating real
-- Gets: @HoursInterviewing real
-- Gets: @HoursTraveling real
-- Gets: @HoursOther real
-- Gets: @MileageExpense money
-- Gets: @MileageRate real
-- Gets: @Mileage real
-- Gets: @Expenses money
-- Gets: @CarRental money
-- Gets: @AirTravel money
-- Gets: @Notes varchar(500)
-- Gets: @SuppliesFedEx bit
-- Gets: @SuppliesExpRep bit
-- Gets: @SuppliesWYWO bit
-- Gets: @SuppliesBrochure bit
-- Gets: @SuppliesChecklist bit
-- Gets: @SuppliesOther varchar(50)
-- Gets: @SuppliesPrintedBy varchar(32)
-- Gets: @SuppliesPrintedOn datetime
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @GiftCards int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_Update]
	@InterviewerTrackingID int,
	@InterviewerID int,
	@DateReported smalldatetime,
	@WeekBeg smalldatetime,
	@WeekEnd smalldatetime,
	@Hours real,
	@HoursAdministrative real,
	@HoursLocating real,
	@HoursInterviewing real,
	@HoursTraveling real,
	@HoursOther real,
	@MileageExpense money,
	@MileageRate real,
	@Mileage real,
	@Expenses money,
	@CarRental money,
	@AirTravel money,
	@Notes varchar(500),
	@SuppliesFedEx bit,
	@SuppliesExpRep bit,
	@SuppliesWYWO bit,
	@SuppliesBrochure bit,
	@SuppliesChecklist bit,
	@SuppliesOther varchar(50),
	@SuppliesPrintedBy varchar(32),
	@SuppliesPrintedOn datetime,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@GiftCards int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInterviewerTracking]
SET 
	[InterviewerID] = @InterviewerID,
	[DateReported] = @DateReported,
	[WeekBeg] = @WeekBeg,
	[WeekEnd] = @WeekEnd,
	[Hours] = @Hours,
	[HoursAdministrative] = @HoursAdministrative,
	[HoursLocating] = @HoursLocating,
	[HoursInterviewing] = @HoursInterviewing,
	[HoursTraveling] = @HoursTraveling,
	[HoursOther] = @HoursOther,
	[MileageExpense] = @MileageExpense,
	[MileageRate] = @MileageRate,
	[Mileage] = @Mileage,
	[Expenses] = @Expenses,
	[CarRental] = @CarRental,
	[AirTravel] = @AirTravel,
	[Notes] = @Notes,
	[SuppliesFedEx] = @SuppliesFedEx,
	[SuppliesExpRep] = @SuppliesExpRep,
	[SuppliesWYWO] = @SuppliesWYWO,
	[SuppliesBrochure] = @SuppliesBrochure,
	[SuppliesChecklist] = @SuppliesChecklist,
	[SuppliesOther] = @SuppliesOther,
	[SuppliesPrintedBy] = @SuppliesPrintedBy,
	[SuppliesPrintedOn] = @SuppliesPrintedOn,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[GiftCards] = @GiftCards
WHERE
	[InterviewerTrackingID] = @InterviewerTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_UpdateAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_UpdateAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblInterviewerTracking'.
-- Will reset field [InterviewerID] with value @InterviewerIDOld  to value @InterviewerID
-- Gets: @InterviewerID int
-- Gets: @InterviewerIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_UpdateAllWInterviewerIDLogic]
	@InterviewerID int,
	@InterviewerIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblInterviewerTracking]
SET
	[InterviewerID] = @InterviewerID
WHERE
	[InterviewerID] = @InterviewerIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblInterviewerTracking'
-- using the Primary Key. 
-- Gets: @InterviewerTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_Delete]
	@InterviewerTrackingID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblInterviewerTracking]
WHERE
	[InterviewerTrackingID] = @InterviewerTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblInterviewerTracking'
-- based on the Primary Key.
-- Gets: @InterviewerTrackingID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_SelectOne]
	@InterviewerTrackingID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerTrackingID],
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
FROM [dbo].[tblInterviewerTracking]
WHERE
	[InterviewerTrackingID] = @InterviewerTrackingID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_SelectOneWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_SelectOneWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblInterviewerTracking'
-- based on the field [InterviewerID], which is unique per row.
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_SelectOneWInterviewerIDLogic]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerTrackingID],
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
FROM [dbo].[tblInterviewerTracking]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [WeekEnd].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_SelectOneWWeekEndLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_SelectOneWWeekEndLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblInterviewerTracking'
-- based on the field [WeekEnd], which is unique per row.
-- Gets: @WeekEnd smalldatetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_SelectOneWWeekEndLogic]
	@WeekEnd smalldatetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerTrackingID],
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
FROM [dbo].[tblInterviewerTracking]
WHERE
	[WeekEnd] = @WeekEnd
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblInterviewerTracking'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InterviewerTrackingID],
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
FROM [dbo].[tblInterviewerTracking]
ORDER BY 
	[InterviewerTrackingID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblInterviewerTracking_SelectAllWInterviewerIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblInterviewerTracking_SelectAllWInterviewerIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblInterviewerTracking'
-- based on a foreign key field.
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblInterviewerTracking_SelectAllWInterviewerIDLogic]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerTrackingID],
	[InterviewerID],
	[DateReported],
	[WeekBeg],
	[WeekEnd],
	[Hours],
	[HoursAdministrative],
	[HoursLocating],
	[HoursInterviewing],
	[HoursTraveling],
	[HoursOther],
	[MileageExpense],
	[MileageRate],
	[Mileage],
	[Expenses],
	[CarRental],
	[AirTravel],
	[Notes],
	[SuppliesFedEx],
	[SuppliesExpRep],
	[SuppliesWYWO],
	[SuppliesBrochure],
	[SuppliesChecklist],
	[SuppliesOther],
	[SuppliesPrintedBy],
	[SuppliesPrintedOn],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[GiftCards]
FROM [dbo].[tblInterviewerTracking]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblInterviewerTracking]

GO

-- [Stored Procedures generated for table:  tblLocatingAttempt]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblLocatingAttempt'
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingAttemptDate datetime
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptResultID int
-- Gets: @LocatingStatus char(4)
-- Gets: @TimeSpentInSeconds int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @PhoneHistoryID int
-- Gets: @EmailHistoryID int
-- Gets: @SocialNetworkHistoryID int
-- Gets: @DocumentID int
-- Gets: @Note varchar(2000)
-- Gets: @LocatingEntityID int
-- Gets: @AppointmentDateTime datetime
-- Gets: @AppointmentType varchar(1)
-- Gets: @AppointmentLocationID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @LocatingAttemptID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_Insert]
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingAttemptDate datetime,
	@LocatingAttemptTypeID int,
	@LocatingAttemptResultID int,
	@LocatingStatus char(4),
	@TimeSpentInSeconds int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@PhoneHistoryID int,
	@EmailHistoryID int,
	@SocialNetworkHistoryID int,
	@DocumentID int,
	@Note varchar(2000),
	@LocatingEntityID int,
	@AppointmentDateTime datetime,
	@AppointmentType varchar(1),
	@AppointmentLocationID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@LocatingAttemptID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblLocatingAttempt]
(
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@Round,
	@CaseID,
	@MPRID,
	@LocatingAttemptDate,
	@LocatingAttemptTypeID,
	@LocatingAttemptResultID,
	@LocatingStatus,
	@TimeSpentInSeconds,
	@PersonHistoryID,
	@AddressHistoryID,
	@PhoneHistoryID,
	@EmailHistoryID,
	@SocialNetworkHistoryID,
	@DocumentID,
	@Note,
	@LocatingEntityID,
	@AppointmentDateTime,
	@AppointmentType,
	@AppointmentLocationID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LocatingAttemptID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblLocatingAttempt'
-- Gets: @LocatingAttemptID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingAttemptDate datetime
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptResultID int
-- Gets: @LocatingStatus char(4)
-- Gets: @TimeSpentInSeconds int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @PhoneHistoryID int
-- Gets: @EmailHistoryID int
-- Gets: @SocialNetworkHistoryID int
-- Gets: @DocumentID int
-- Gets: @Note varchar(2000)
-- Gets: @LocatingEntityID int
-- Gets: @AppointmentDateTime datetime
-- Gets: @AppointmentType varchar(1)
-- Gets: @AppointmentLocationID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_Update]
	@LocatingAttemptID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingAttemptDate datetime,
	@LocatingAttemptTypeID int,
	@LocatingAttemptResultID int,
	@LocatingStatus char(4),
	@TimeSpentInSeconds int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@PhoneHistoryID int,
	@EmailHistoryID int,
	@SocialNetworkHistoryID int,
	@DocumentID int,
	@Note varchar(2000),
	@LocatingEntityID int,
	@AppointmentDateTime datetime,
	@AppointmentType varchar(1),
	@AppointmentLocationID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingAttempt]
SET 
	[Round] = @Round,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[LocatingAttemptDate] = @LocatingAttemptDate,
	[LocatingAttemptTypeID] = @LocatingAttemptTypeID,
	[LocatingAttemptResultID] = @LocatingAttemptResultID,
	[LocatingStatus] = @LocatingStatus,
	[TimeSpentInSeconds] = @TimeSpentInSeconds,
	[PersonHistoryID] = @PersonHistoryID,
	[AddressHistoryID] = @AddressHistoryID,
	[PhoneHistoryID] = @PhoneHistoryID,
	[EmailHistoryID] = @EmailHistoryID,
	[SocialNetworkHistoryID] = @SocialNetworkHistoryID,
	[DocumentID] = @DocumentID,
	[Note] = @Note,
	[LocatingEntityID] = @LocatingEntityID,
	[AppointmentDateTime] = @AppointmentDateTime,
	[AppointmentType] = @AppointmentType,
	[AppointmentLocationID] = @AppointmentLocationID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[LocatingAttemptID] = @LocatingAttemptID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_UpdateAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_UpdateAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblLocatingAttempt'.
-- Will reset field [MPRID] with value @MPRIDOld  to value @MPRID
-- Gets: @MPRID varchar(8)
-- Gets: @MPRIDOld varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_UpdateAllWMPRIDLogic]
	@MPRID varchar(8),
	@MPRIDOld varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingAttempt]
SET
	[MPRID] = @MPRID
WHERE
	[MPRID] = @MPRIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblLocatingAttempt'
-- using the Primary Key. 
-- Gets: @LocatingAttemptID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_Delete]
	@LocatingAttemptID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblLocatingAttempt]
WHERE
	[LocatingAttemptID] = @LocatingAttemptID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblLocatingAttempt'
-- based on the Primary Key.
-- Gets: @LocatingAttemptID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_SelectOne]
	@LocatingAttemptID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttempt]
WHERE
	[LocatingAttemptID] = @LocatingAttemptID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblLocatingAttempt'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttempt]
ORDER BY 
	[LocatingAttemptID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttempt_SelectAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttempt_SelectAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblLocatingAttempt'
-- based on a foreign key field.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttempt_SelectAllWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttempt]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblLocatingAttempt]

GO

-- [Stored Procedures generated for table:  tblLocatingAttemptHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblLocatingAttemptHistory'
-- Gets: @LocatingAttemptID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingAttemptDate datetime
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptResultID int
-- Gets: @LocatingStatus char(4)
-- Gets: @TimeSpentInSeconds int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @PhoneHistoryID int
-- Gets: @EmailHistoryID int
-- Gets: @SocialNetworkHistoryID int
-- Gets: @DocumentID int
-- Gets: @Note varchar(2000)
-- Gets: @LocatingEntityID int
-- Gets: @AppointmentDateTime datetime
-- Gets: @AppointmentType varchar(1)
-- Gets: @AppointmentLocationID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @LocatingAttemptHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_Insert]
	@LocatingAttemptID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingAttemptDate datetime,
	@LocatingAttemptTypeID int,
	@LocatingAttemptResultID int,
	@LocatingStatus char(4),
	@TimeSpentInSeconds int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@PhoneHistoryID int,
	@EmailHistoryID int,
	@SocialNetworkHistoryID int,
	@DocumentID int,
	@Note varchar(2000),
	@LocatingEntityID int,
	@AppointmentDateTime datetime,
	@AppointmentType varchar(1),
	@AppointmentLocationID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@LocatingAttemptHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblLocatingAttemptHistory]
(
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@LocatingAttemptID,
	@Round,
	@CaseID,
	@MPRID,
	@LocatingAttemptDate,
	@LocatingAttemptTypeID,
	@LocatingAttemptResultID,
	@LocatingStatus,
	@TimeSpentInSeconds,
	@PersonHistoryID,
	@AddressHistoryID,
	@PhoneHistoryID,
	@EmailHistoryID,
	@SocialNetworkHistoryID,
	@DocumentID,
	@Note,
	@LocatingEntityID,
	@AppointmentDateTime,
	@AppointmentType,
	@AppointmentLocationID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LocatingAttemptHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblLocatingAttemptHistory'
-- Gets: @LocatingAttemptHistoryID int
-- Gets: @LocatingAttemptID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingAttemptDate datetime
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptResultID int
-- Gets: @LocatingStatus char(4)
-- Gets: @TimeSpentInSeconds int
-- Gets: @PersonHistoryID int
-- Gets: @AddressHistoryID int
-- Gets: @PhoneHistoryID int
-- Gets: @EmailHistoryID int
-- Gets: @SocialNetworkHistoryID int
-- Gets: @DocumentID int
-- Gets: @Note varchar(2000)
-- Gets: @LocatingEntityID int
-- Gets: @AppointmentDateTime datetime
-- Gets: @AppointmentType varchar(1)
-- Gets: @AppointmentLocationID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_Update]
	@LocatingAttemptHistoryID int,
	@LocatingAttemptID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingAttemptDate datetime,
	@LocatingAttemptTypeID int,
	@LocatingAttemptResultID int,
	@LocatingStatus char(4),
	@TimeSpentInSeconds int,
	@PersonHistoryID int,
	@AddressHistoryID int,
	@PhoneHistoryID int,
	@EmailHistoryID int,
	@SocialNetworkHistoryID int,
	@DocumentID int,
	@Note varchar(2000),
	@LocatingEntityID int,
	@AppointmentDateTime datetime,
	@AppointmentType varchar(1),
	@AppointmentLocationID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingAttemptHistory]
SET 
	[LocatingAttemptID] = @LocatingAttemptID,
	[Round] = @Round,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[LocatingAttemptDate] = @LocatingAttemptDate,
	[LocatingAttemptTypeID] = @LocatingAttemptTypeID,
	[LocatingAttemptResultID] = @LocatingAttemptResultID,
	[LocatingStatus] = @LocatingStatus,
	[TimeSpentInSeconds] = @TimeSpentInSeconds,
	[PersonHistoryID] = @PersonHistoryID,
	[AddressHistoryID] = @AddressHistoryID,
	[PhoneHistoryID] = @PhoneHistoryID,
	[EmailHistoryID] = @EmailHistoryID,
	[SocialNetworkHistoryID] = @SocialNetworkHistoryID,
	[DocumentID] = @DocumentID,
	[Note] = @Note,
	[LocatingEntityID] = @LocatingEntityID,
	[AppointmentDateTime] = @AppointmentDateTime,
	[AppointmentType] = @AppointmentType,
	[AppointmentLocationID] = @AppointmentLocationID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[LocatingAttemptHistoryID] = @LocatingAttemptHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [LocatingAttemptID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_UpdateAllWLocatingAttemptIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_UpdateAllWLocatingAttemptIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblLocatingAttemptHistory'.
-- Will reset field [LocatingAttemptID] with value @LocatingAttemptIDOld  to value @LocatingAttemptID
-- Gets: @LocatingAttemptID int
-- Gets: @LocatingAttemptIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_UpdateAllWLocatingAttemptIDLogic]
	@LocatingAttemptID int,
	@LocatingAttemptIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingAttemptHistory]
SET
	[LocatingAttemptID] = @LocatingAttemptID
WHERE
	[LocatingAttemptID] = @LocatingAttemptIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblLocatingAttemptHistory'
-- using the Primary Key. 
-- Gets: @LocatingAttemptHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_Delete]
	@LocatingAttemptHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblLocatingAttemptHistory]
WHERE
	[LocatingAttemptHistoryID] = @LocatingAttemptHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblLocatingAttemptHistory'
-- based on the Primary Key.
-- Gets: @LocatingAttemptHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_SelectOne]
	@LocatingAttemptHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingAttemptHistoryID],
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttemptHistory]
WHERE
	[LocatingAttemptHistoryID] = @LocatingAttemptHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblLocatingAttemptHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingAttemptHistoryID],
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttemptHistory]
ORDER BY 
	[LocatingAttemptHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [LocatingAttemptID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingAttemptHistory_SelectAllWLocatingAttemptIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingAttemptHistory_SelectAllWLocatingAttemptIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblLocatingAttemptHistory'
-- based on a foreign key field.
-- Gets: @LocatingAttemptID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingAttemptHistory_SelectAllWLocatingAttemptIDLogic]
	@LocatingAttemptID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[LocatingAttemptHistoryID],
	[LocatingAttemptID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingAttemptDate],
	[LocatingAttemptTypeID],
	[LocatingAttemptResultID],
	[LocatingStatus],
	[TimeSpentInSeconds],
	[PersonHistoryID],
	[AddressHistoryID],
	[PhoneHistoryID],
	[EmailHistoryID],
	[SocialNetworkHistoryID],
	[DocumentID],
	[Note],
	[LocatingEntityID],
	[AppointmentDateTime],
	[AppointmentType],
	[AppointmentLocationID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingAttemptHistory]
WHERE
	[LocatingAttemptID] = @LocatingAttemptID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblLocatingAttemptHistory]

GO

-- [Stored Procedures generated for table:  tblLocatingStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblLocatingStatus'
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingStatus char(4)
-- Gets: @StatusDate datetime
-- Gets: @DateSentToLocating datetime
-- Gets: @PriorityStatus int
-- Gets: @Notes varchar(2000)
-- Gets: @NoteDate datetime
-- Gets: @NoOfTimesLocating int
-- Gets: @NoOfTimesTouched int
-- Gets: @TotalTimeSpentInSeconds int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @LocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_Insert]
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingStatus char(4),
	@StatusDate datetime,
	@DateSentToLocating datetime,
	@PriorityStatus int,
	@Notes varchar(2000),
	@NoteDate datetime,
	@NoOfTimesLocating int,
	@NoOfTimesTouched int,
	@TotalTimeSpentInSeconds int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@LocatingStatusID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblLocatingStatus]
(
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@Round,
	@CaseID,
	@MPRID,
	@LocatingStatus,
	@StatusDate,
	@DateSentToLocating,
	@PriorityStatus,
	@Notes,
	@NoteDate,
	@NoOfTimesLocating,
	@NoOfTimesTouched,
	@TotalTimeSpentInSeconds,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LocatingStatusID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblLocatingStatus'
-- Gets: @LocatingStatusID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingStatus char(4)
-- Gets: @StatusDate datetime
-- Gets: @DateSentToLocating datetime
-- Gets: @PriorityStatus int
-- Gets: @Notes varchar(2000)
-- Gets: @NoteDate datetime
-- Gets: @NoOfTimesLocating int
-- Gets: @NoOfTimesTouched int
-- Gets: @TotalTimeSpentInSeconds int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_Update]
	@LocatingStatusID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingStatus char(4),
	@StatusDate datetime,
	@DateSentToLocating datetime,
	@PriorityStatus int,
	@Notes varchar(2000),
	@NoteDate datetime,
	@NoOfTimesLocating int,
	@NoOfTimesTouched int,
	@TotalTimeSpentInSeconds int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingStatus]
SET 
	[Round] = @Round,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[LocatingStatus] = @LocatingStatus,
	[StatusDate] = @StatusDate,
	[DateSentToLocating] = @DateSentToLocating,
	[PriorityStatus] = @PriorityStatus,
	[Notes] = @Notes,
	[NoteDate] = @NoteDate,
	[NoOfTimesLocating] = @NoOfTimesLocating,
	[NoOfTimesTouched] = @NoOfTimesTouched,
	[TotalTimeSpentInSeconds] = @TotalTimeSpentInSeconds,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[LocatingStatusID] = @LocatingStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_UpdateAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_UpdateAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblLocatingStatus'.
-- Will reset field [MPRID] with value @MPRIDOld  to value @MPRID
-- Gets: @MPRID varchar(8)
-- Gets: @MPRIDOld varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_UpdateAllWMPRIDLogic]
	@MPRID varchar(8),
	@MPRIDOld varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingStatus]
SET
	[MPRID] = @MPRID
WHERE
	[MPRID] = @MPRIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [LocatingStatus].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_UpdateAllWLocatingStatusLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_UpdateAllWLocatingStatusLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblLocatingStatus'.
-- Will reset field [LocatingStatus] with value @LocatingStatusOld  to value @LocatingStatus
-- Gets: @LocatingStatus char(4)
-- Gets: @LocatingStatusOld char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_UpdateAllWLocatingStatusLogic]
	@LocatingStatus char(4),
	@LocatingStatusOld char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingStatus]
SET
	[LocatingStatus] = @LocatingStatus
WHERE
	[LocatingStatus] = @LocatingStatusOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblLocatingStatus'
-- using the Primary Key. 
-- Gets: @LocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_Delete]
	@LocatingStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblLocatingStatus]
WHERE
	[LocatingStatusID] = @LocatingStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblLocatingStatus'
-- based on the Primary Key.
-- Gets: @LocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_SelectOne]
	@LocatingStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatus]
WHERE
	[LocatingStatusID] = @LocatingStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_SelectOneWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_SelectOneWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblLocatingStatus'
-- based on the field [MPRID], which is unique per row.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_SelectOneWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatus]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblLocatingStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatus]
ORDER BY 
	[LocatingStatusID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_SelectAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_SelectAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblLocatingStatus'
-- based on a foreign key field.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_SelectAllWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatus]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [LocatingStatus].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatus_SelectAllWLocatingStatusLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatus_SelectAllWLocatingStatusLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblLocatingStatus'
-- based on a foreign key field.
-- Gets: @LocatingStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatus_SelectAllWLocatingStatusLogic]
	@LocatingStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatus]
WHERE
	[LocatingStatus] = @LocatingStatus
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblLocatingStatus]

GO

-- [Stored Procedures generated for table:  tblLocatingStatusHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblLocatingStatusHistory'
-- Gets: @LocatingStatusID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingStatus char(4)
-- Gets: @StatusDate datetime
-- Gets: @DateSentToLocating datetime
-- Gets: @PriorityStatus int
-- Gets: @Notes varchar(2000)
-- Gets: @NoteDate datetime
-- Gets: @NoOfTimesLocating int
-- Gets: @NoOfTimesTouched int
-- Gets: @TotalTimeSpentInSeconds int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @LocatingStatusHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_Insert]
	@LocatingStatusID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingStatus char(4),
	@StatusDate datetime,
	@DateSentToLocating datetime,
	@PriorityStatus int,
	@Notes varchar(2000),
	@NoteDate datetime,
	@NoOfTimesLocating int,
	@NoOfTimesTouched int,
	@TotalTimeSpentInSeconds int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@LocatingStatusHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblLocatingStatusHistory]
(
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@LocatingStatusID,
	@Round,
	@CaseID,
	@MPRID,
	@LocatingStatus,
	@StatusDate,
	@DateSentToLocating,
	@PriorityStatus,
	@Notes,
	@NoteDate,
	@NoOfTimesLocating,
	@NoOfTimesTouched,
	@TotalTimeSpentInSeconds,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LocatingStatusHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblLocatingStatusHistory'
-- Gets: @LocatingStatusHistoryID int
-- Gets: @LocatingStatusID int
-- Gets: @Round int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @LocatingStatus char(4)
-- Gets: @StatusDate datetime
-- Gets: @DateSentToLocating datetime
-- Gets: @PriorityStatus int
-- Gets: @Notes varchar(2000)
-- Gets: @NoteDate datetime
-- Gets: @NoOfTimesLocating int
-- Gets: @NoOfTimesTouched int
-- Gets: @TotalTimeSpentInSeconds int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_Update]
	@LocatingStatusHistoryID int,
	@LocatingStatusID int,
	@Round int,
	@CaseID int,
	@MPRID varchar(8),
	@LocatingStatus char(4),
	@StatusDate datetime,
	@DateSentToLocating datetime,
	@PriorityStatus int,
	@Notes varchar(2000),
	@NoteDate datetime,
	@NoOfTimesLocating int,
	@NoOfTimesTouched int,
	@TotalTimeSpentInSeconds int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingStatusHistory]
SET 
	[LocatingStatusID] = @LocatingStatusID,
	[Round] = @Round,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[LocatingStatus] = @LocatingStatus,
	[StatusDate] = @StatusDate,
	[DateSentToLocating] = @DateSentToLocating,
	[PriorityStatus] = @PriorityStatus,
	[Notes] = @Notes,
	[NoteDate] = @NoteDate,
	[NoOfTimesLocating] = @NoOfTimesLocating,
	[NoOfTimesTouched] = @NoOfTimesTouched,
	[TotalTimeSpentInSeconds] = @TotalTimeSpentInSeconds,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[LocatingStatusHistoryID] = @LocatingStatusHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [LocatingStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_UpdateAllWLocatingStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_UpdateAllWLocatingStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblLocatingStatusHistory'.
-- Will reset field [LocatingStatusID] with value @LocatingStatusIDOld  to value @LocatingStatusID
-- Gets: @LocatingStatusID int
-- Gets: @LocatingStatusIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_UpdateAllWLocatingStatusIDLogic]
	@LocatingStatusID int,
	@LocatingStatusIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblLocatingStatusHistory]
SET
	[LocatingStatusID] = @LocatingStatusID
WHERE
	[LocatingStatusID] = @LocatingStatusIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblLocatingStatusHistory'
-- using the Primary Key. 
-- Gets: @LocatingStatusHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_Delete]
	@LocatingStatusHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblLocatingStatusHistory]
WHERE
	[LocatingStatusHistoryID] = @LocatingStatusHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblLocatingStatusHistory'
-- based on the Primary Key.
-- Gets: @LocatingStatusHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_SelectOne]
	@LocatingStatusHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingStatusHistoryID],
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatusHistory]
WHERE
	[LocatingStatusHistoryID] = @LocatingStatusHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblLocatingStatusHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingStatusHistoryID],
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatusHistory]
ORDER BY 
	[LocatingStatusHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [LocatingStatusID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblLocatingStatusHistory_SelectAllWLocatingStatusIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblLocatingStatusHistory_SelectAllWLocatingStatusIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblLocatingStatusHistory'
-- based on a foreign key field.
-- Gets: @LocatingStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblLocatingStatusHistory_SelectAllWLocatingStatusIDLogic]
	@LocatingStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[LocatingStatusHistoryID],
	[LocatingStatusID],
	[Round],
	[CaseID],
	[MPRID],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[PriorityStatus],
	[Notes],
	[NoteDate],
	[NoOfTimesLocating],
	[NoOfTimesTouched],
	[TotalTimeSpentInSeconds],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblLocatingStatusHistory]
WHERE
	[LocatingStatusID] = @LocatingStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblLocatingStatusHistory]

GO

-- [Stored Procedures generated for table:  tblMelissa_Communication]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Communication_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Communication_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblMelissa_Communication'
-- Gets: @StartDateTime datetime
-- Gets: @EndDateTime datetime
-- Gets: @NumberOfRecords int
-- Gets: @ResultCode nvarchar(50)
-- Gets: @Notes nvarchar(200)
-- Gets: @CreatedOn datetime
-- Gets: @CreatedBy nvarchar(100)
-- Returns: @CommunicationID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Communication_Insert]
	@StartDateTime datetime,
	@EndDateTime datetime,
	@NumberOfRecords int,
	@ResultCode nvarchar(50),
	@Notes nvarchar(200),
	@CreatedOn datetime,
	@CreatedBy nvarchar(100),
	@CommunicationID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblMelissa_Communication]
(
	[StartDateTime],
	[EndDateTime],
	[NumberOfRecords],
	[ResultCode],
	[Notes],
	[CreatedOn],
	[CreatedBy]
)
VALUES
(
	@StartDateTime,
	@EndDateTime,
	@NumberOfRecords,
	@ResultCode,
	@Notes,
	@CreatedOn,
	@CreatedBy
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CommunicationID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Communication_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Communication_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblMelissa_Communication'
-- Gets: @CommunicationID int
-- Gets: @StartDateTime datetime
-- Gets: @EndDateTime datetime
-- Gets: @NumberOfRecords int
-- Gets: @ResultCode nvarchar(50)
-- Gets: @Notes nvarchar(200)
-- Gets: @CreatedOn datetime
-- Gets: @CreatedBy nvarchar(100)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Communication_Update]
	@CommunicationID int,
	@StartDateTime datetime,
	@EndDateTime datetime,
	@NumberOfRecords int,
	@ResultCode nvarchar(50),
	@Notes nvarchar(200),
	@CreatedOn datetime,
	@CreatedBy nvarchar(100),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblMelissa_Communication]
SET 
	[StartDateTime] = @StartDateTime,
	[EndDateTime] = @EndDateTime,
	[NumberOfRecords] = @NumberOfRecords,
	[ResultCode] = @ResultCode,
	[Notes] = @Notes,
	[CreatedOn] = @CreatedOn,
	[CreatedBy] = @CreatedBy
WHERE
	[CommunicationID] = @CommunicationID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Communication_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Communication_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblMelissa_Communication'
-- using the Primary Key. 
-- Gets: @CommunicationID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Communication_Delete]
	@CommunicationID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblMelissa_Communication]
WHERE
	[CommunicationID] = @CommunicationID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Communication_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Communication_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblMelissa_Communication'
-- based on the Primary Key.
-- Gets: @CommunicationID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Communication_SelectOne]
	@CommunicationID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CommunicationID],
	[StartDateTime],
	[EndDateTime],
	[NumberOfRecords],
	[ResultCode],
	[Notes],
	[CreatedOn],
	[CreatedBy]
FROM [dbo].[tblMelissa_Communication]
WHERE
	[CommunicationID] = @CommunicationID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Communication_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Communication_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblMelissa_Communication'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Communication_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CommunicationID],
	[StartDateTime],
	[EndDateTime],
	[NumberOfRecords],
	[ResultCode],
	[Notes],
	[CreatedOn],
	[CreatedBy]
FROM [dbo].[tblMelissa_Communication]
ORDER BY 
	[CommunicationID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblMelissa_Communication]

GO

-- [Stored Procedures generated for table:  tblMelissa_Results]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblMelissa_Results'
-- Gets: @CommunicationID int
-- Gets: @Caseid nvarchar(50)
-- Gets: @AddressID int
-- Gets: @PhoneID int
-- Gets: @EmailID int
-- Gets: @MPRID varchar(8)
-- Gets: @DataType int
-- Gets: @ReturnCodeString nvarchar(255)
-- Gets: @ReturnCodeDescription nvarchar(1000)
-- Gets: @CreatedBy nvarchar(100)
-- Gets: @CreatedOn datetime
-- Returns: @ResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_Insert]
	@CommunicationID int,
	@Caseid nvarchar(50),
	@AddressID int,
	@PhoneID int,
	@EmailID int,
	@MPRID varchar(8),
	@DataType int,
	@ReturnCodeString nvarchar(255),
	@ReturnCodeDescription nvarchar(1000),
	@CreatedBy nvarchar(100),
	@CreatedOn datetime,
	@ResultID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblMelissa_Results]
(
	[CommunicationID],
	[Caseid],
	[AddressID],
	[PhoneID],
	[EmailID],
	[MPRID],
	[DataType],
	[ReturnCodeString],
	[ReturnCodeDescription],
	[CreatedBy],
	[CreatedOn]
)
VALUES
(
	@CommunicationID,
	@Caseid,
	@AddressID,
	@PhoneID,
	@EmailID,
	@MPRID,
	@DataType,
	@ReturnCodeString,
	@ReturnCodeDescription,
	@CreatedBy,
	@CreatedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ResultID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblMelissa_Results'
-- Gets: @ResultID int
-- Gets: @CommunicationID int
-- Gets: @Caseid nvarchar(50)
-- Gets: @AddressID int
-- Gets: @PhoneID int
-- Gets: @EmailID int
-- Gets: @MPRID varchar(8)
-- Gets: @DataType int
-- Gets: @ReturnCodeString nvarchar(255)
-- Gets: @ReturnCodeDescription nvarchar(1000)
-- Gets: @CreatedBy nvarchar(100)
-- Gets: @CreatedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_Update]
	@ResultID int,
	@CommunicationID int,
	@Caseid nvarchar(50),
	@AddressID int,
	@PhoneID int,
	@EmailID int,
	@MPRID varchar(8),
	@DataType int,
	@ReturnCodeString nvarchar(255),
	@ReturnCodeDescription nvarchar(1000),
	@CreatedBy nvarchar(100),
	@CreatedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblMelissa_Results]
SET 
	[CommunicationID] = @CommunicationID,
	[Caseid] = @Caseid,
	[AddressID] = @AddressID,
	[PhoneID] = @PhoneID,
	[EmailID] = @EmailID,
	[MPRID] = @MPRID,
	[DataType] = @DataType,
	[ReturnCodeString] = @ReturnCodeString,
	[ReturnCodeDescription] = @ReturnCodeDescription,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CommunicationID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_UpdateAllWCommunicationIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_UpdateAllWCommunicationIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblMelissa_Results'.
-- Will reset field [CommunicationID] with value @CommunicationIDOld  to value @CommunicationID
-- Gets: @CommunicationID int
-- Gets: @CommunicationIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_UpdateAllWCommunicationIDLogic]
	@CommunicationID int,
	@CommunicationIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblMelissa_Results]
SET
	[CommunicationID] = @CommunicationID
WHERE
	[CommunicationID] = @CommunicationIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblMelissa_Results'
-- using the Primary Key. 
-- Gets: @ResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_Delete]
	@ResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblMelissa_Results]
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblMelissa_Results'
-- based on the Primary Key.
-- Gets: @ResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_SelectOne]
	@ResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ResultID],
	[CommunicationID],
	[Caseid],
	[AddressID],
	[PhoneID],
	[EmailID],
	[MPRID],
	[DataType],
	[ReturnCodeString],
	[ReturnCodeDescription],
	[CreatedBy],
	[CreatedOn]
FROM [dbo].[tblMelissa_Results]
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblMelissa_Results'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ResultID],
	[CommunicationID],
	[Caseid],
	[AddressID],
	[PhoneID],
	[EmailID],
	[MPRID],
	[DataType],
	[ReturnCodeString],
	[ReturnCodeDescription],
	[CreatedBy],
	[CreatedOn]
FROM [dbo].[tblMelissa_Results]
ORDER BY 
	[ResultID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CommunicationID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblMelissa_Results_SelectAllWCommunicationIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblMelissa_Results_SelectAllWCommunicationIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblMelissa_Results'
-- based on a foreign key field.
-- Gets: @CommunicationID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblMelissa_Results_SelectAllWCommunicationIDLogic]
	@CommunicationID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ResultID],
	[CommunicationID],
	[Caseid],
	[AddressID],
	[PhoneID],
	[EmailID],
	[MPRID],
	[DataType],
	[ReturnCodeString],
	[ReturnCodeDescription],
	[CreatedBy],
	[CreatedOn]
FROM [dbo].[tblMelissa_Results]
WHERE
	[CommunicationID] = @CommunicationID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblMelissa_Results]

GO

-- [Stored Procedures generated for table:  tblNote]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblNote'
-- Gets: @TableID int
-- Gets: @TableTypeID smallint
-- Gets: @DocumentID int
-- Gets: @CaseID int
-- Gets: @MPRID nvarchar(8)
-- Gets: @Round int
-- Gets: @SourceTypeID int
-- Gets: @Notes nvarchar(4000)
-- Gets: @CreatedBy nvarchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy nvarchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @IsFieldNote bit
-- Returns: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_Insert]
	@TableID int,
	@TableTypeID smallint,
	@DocumentID int,
	@CaseID int,
	@MPRID nvarchar(8),
	@Round int,
	@SourceTypeID int,
	@Notes nvarchar(4000),
	@CreatedBy nvarchar(32),
	@CreatedOn datetime,
	@LastModifiedBy nvarchar(32),
	@LastModifiedOn datetime,
	@IsFieldNote bit,
	@NoteID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblNote]
(
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
)
VALUES
(
	@TableID,
	@TableTypeID,
	@DocumentID,
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@Round,
	@SourceTypeID,
	@Notes,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@IsFieldNote
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @NoteID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblNote'
-- Gets: @NoteID int
-- Gets: @TableID int
-- Gets: @TableTypeID smallint
-- Gets: @DocumentID int
-- Gets: @CaseID int
-- Gets: @MPRID nvarchar(8)
-- Gets: @Round int
-- Gets: @SourceTypeID int
-- Gets: @Notes nvarchar(4000)
-- Gets: @CreatedBy nvarchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy nvarchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @IsFieldNote bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_Update]
	@NoteID int,
	@TableID int,
	@TableTypeID smallint,
	@DocumentID int,
	@CaseID int,
	@MPRID nvarchar(8),
	@Round int,
	@SourceTypeID int,
	@Notes nvarchar(4000),
	@CreatedBy nvarchar(32),
	@CreatedOn datetime,
	@LastModifiedBy nvarchar(32),
	@LastModifiedOn datetime,
	@IsFieldNote bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblNote]
SET 
	[TableID] = @TableID,
	[TableTypeID] = @TableTypeID,
	[DocumentID] = @DocumentID,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[SourceTypeID] = @SourceTypeID,
	[Notes] = @Notes,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[IsFieldNote] = @IsFieldNote
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [TableTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_UpdateAllWTableTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_UpdateAllWTableTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblNote'.
-- Will reset field [TableTypeID] with value @TableTypeIDOld  to value @TableTypeID
-- Gets: @TableTypeID smallint
-- Gets: @TableTypeIDOld smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_UpdateAllWTableTypeIDLogic]
	@TableTypeID smallint,
	@TableTypeIDOld smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblNote]
SET
	[TableTypeID] = @TableTypeID
WHERE
	[TableTypeID] = @TableTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblNote'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblNote]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_UpdateAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_UpdateAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblNote'.
-- Will reset field [SourceTypeID] with value @SourceTypeIDOld  to value @SourceTypeID
-- Gets: @SourceTypeID int
-- Gets: @SourceTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_UpdateAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@SourceTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblNote]
SET
	[SourceTypeID] = @SourceTypeID
WHERE
	[SourceTypeID] = @SourceTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblNote'
-- using the Primary Key. 
-- Gets: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_Delete]
	@NoteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblNote]
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblNote'
-- based on the Primary Key.
-- Gets: @NoteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_SelectOne]
	@NoteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[NoteID],
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
FROM [dbo].[tblNote]
WHERE
	[NoteID] = @NoteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblNote'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[NoteID],
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
FROM [dbo].[tblNote]
ORDER BY 
	[NoteID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [TableTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_SelectAllWTableTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_SelectAllWTableTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblNote'
-- based on a foreign key field.
-- Gets: @TableTypeID smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_SelectAllWTableTypeIDLogic]
	@TableTypeID smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[NoteID],
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
FROM [dbo].[tblNote]
WHERE
	[TableTypeID] = @TableTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblNote'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[NoteID],
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
FROM [dbo].[tblNote]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblNote_SelectAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblNote_SelectAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblNote'
-- based on a foreign key field.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblNote_SelectAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[NoteID],
	[TableID],
	[TableTypeID],
	[DocumentID],
	[CaseID],
	[MPRID],
	[Round],
	[SourceTypeID],
	[Notes],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[IsFieldNote]
FROM [dbo].[tblNote]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblNote]

GO

-- [Stored Procedures generated for table:  tblPerson]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPerson'
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @Prefix varchar(10)
-- Gets: @FirstName varchar(20)
-- Gets: @MiddleName varchar(20)
-- Gets: @LastName varchar(30)
-- Gets: @MaidenName varchar(30)
-- Gets: @Suffix varchar(50)
-- Gets: @Title varchar(50)
-- Gets: @SSN varchar(11)
-- Gets: @EIN varchar(11)
-- Gets: @LexID varchar(15)
-- Gets: @RelationshipTypeID int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @ConsentID int
-- Gets: @AssentID int
-- Gets: @GenderID int
-- Gets: @DateOfBirth datetime
-- Gets: @DateOfDeath datetime
-- Gets: @AgeAtSampling int
-- Gets: @MaritalStatus varchar(50)
-- Gets: @IsHispanic bit
-- Gets: @RaceOther varchar(50)
-- Gets: @LanguageTypeID int
-- Gets: @LanguageOther varchar(50)
-- Gets: @NonResidentAlien bit
-- Gets: @WebUsername varchar(8)
-- Gets: @WebPassword varchar(8)
-- Gets: @WebSite varchar(255)
-- Gets: @BPN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_Insert]
	@MPRID varchar(8),
	@CaseID int,
	@Round int,
	@Prefix varchar(10),
	@FirstName varchar(20),
	@MiddleName varchar(20),
	@LastName varchar(30),
	@MaidenName varchar(30),
	@Suffix varchar(50),
	@Title varchar(50),
	@SSN varchar(11),
	@EIN varchar(11),
	@LexID varchar(15),
	@RelationshipTypeID int,
	@InSample bit,
	@IsIneligible bit,
	@ConsentID int,
	@AssentID int,
	@GenderID int,
	@DateOfBirth datetime,
	@DateOfDeath datetime,
	@AgeAtSampling int,
	@MaritalStatus varchar(50),
	@IsHispanic bit,
	@RaceOther varchar(50),
	@LanguageTypeID int,
	@LanguageOther varchar(50),
	@NonResidentAlien bit,
	@WebUsername varchar(8),
	@WebPassword varchar(8),
	@WebSite varchar(255),
	@BPN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPerson]
(
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@MPRID,
	ISNULL(@CaseID, ((0))),
	@Round,
	@Prefix,
	@FirstName,
	@MiddleName,
	@LastName,
	@MaidenName,
	@Suffix,
	@Title,
	@SSN,
	@EIN,
	@LexID,
	@RelationshipTypeID,
	@InSample,
	@IsIneligible,
	@ConsentID,
	@AssentID,
	@GenderID,
	@DateOfBirth,
	@DateOfDeath,
	@AgeAtSampling,
	@MaritalStatus,
	@IsHispanic,
	@RaceOther,
	@LanguageTypeID,
	@LanguageOther,
	@NonResidentAlien,
	@WebUsername,
	@WebPassword,
	@WebSite,
	@BPN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPerson'
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @Prefix varchar(10)
-- Gets: @FirstName varchar(20)
-- Gets: @MiddleName varchar(20)
-- Gets: @LastName varchar(30)
-- Gets: @MaidenName varchar(30)
-- Gets: @Suffix varchar(50)
-- Gets: @Title varchar(50)
-- Gets: @SSN varchar(11)
-- Gets: @EIN varchar(11)
-- Gets: @LexID varchar(15)
-- Gets: @RelationshipTypeID int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @ConsentID int
-- Gets: @AssentID int
-- Gets: @GenderID int
-- Gets: @DateOfBirth datetime
-- Gets: @DateOfDeath datetime
-- Gets: @AgeAtSampling int
-- Gets: @MaritalStatus varchar(50)
-- Gets: @IsHispanic bit
-- Gets: @RaceOther varchar(50)
-- Gets: @LanguageTypeID int
-- Gets: @LanguageOther varchar(50)
-- Gets: @NonResidentAlien bit
-- Gets: @WebUsername varchar(8)
-- Gets: @WebPassword varchar(8)
-- Gets: @WebSite varchar(255)
-- Gets: @BPN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_Update]
	@MPRID varchar(8),
	@CaseID int,
	@Round int,
	@Prefix varchar(10),
	@FirstName varchar(20),
	@MiddleName varchar(20),
	@LastName varchar(30),
	@MaidenName varchar(30),
	@Suffix varchar(50),
	@Title varchar(50),
	@SSN varchar(11),
	@EIN varchar(11),
	@LexID varchar(15),
	@RelationshipTypeID int,
	@InSample bit,
	@IsIneligible bit,
	@ConsentID int,
	@AssentID int,
	@GenderID int,
	@DateOfBirth datetime,
	@DateOfDeath datetime,
	@AgeAtSampling int,
	@MaritalStatus varchar(50),
	@IsHispanic bit,
	@RaceOther varchar(50),
	@LanguageTypeID int,
	@LanguageOther varchar(50),
	@NonResidentAlien bit,
	@WebUsername varchar(8),
	@WebPassword varchar(8),
	@WebSite varchar(255),
	@BPN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET 
	[CaseID] = @CaseID,
	[Round] = @Round,
	[Prefix] = @Prefix,
	[FirstName] = @FirstName,
	[MiddleName] = @MiddleName,
	[LastName] = @LastName,
	[MaidenName] = @MaidenName,
	[Suffix] = @Suffix,
	[Title] = @Title,
	[SSN] = @SSN,
	[EIN] = @EIN,
	[LexID] = @LexID,
	[RelationshipTypeID] = @RelationshipTypeID,
	[InSample] = @InSample,
	[IsIneligible] = @IsIneligible,
	[ConsentID] = @ConsentID,
	[AssentID] = @AssentID,
	[GenderID] = @GenderID,
	[DateOfBirth] = @DateOfBirth,
	[DateOfDeath] = @DateOfDeath,
	[AgeAtSampling] = @AgeAtSampling,
	[MaritalStatus] = @MaritalStatus,
	[IsHispanic] = @IsHispanic,
	[RaceOther] = @RaceOther,
	[LanguageTypeID] = @LanguageTypeID,
	[LanguageOther] = @LanguageOther,
	[NonResidentAlien] = @NonResidentAlien,
	[WebUsername] = @WebUsername,
	[WebPassword] = @WebPassword,
	[WebSite] = @WebSite,
	[BPN] = @BPN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPerson'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [RelationshipTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_UpdateAllWRelationshipTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_UpdateAllWRelationshipTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPerson'.
-- Will reset field [RelationshipTypeID] with value @RelationshipTypeIDOld  to value @RelationshipTypeID
-- Gets: @RelationshipTypeID int
-- Gets: @RelationshipTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_UpdateAllWRelationshipTypeIDLogic]
	@RelationshipTypeID int,
	@RelationshipTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET
	[RelationshipTypeID] = @RelationshipTypeID
WHERE
	[RelationshipTypeID] = @RelationshipTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ConsentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_UpdateAllWConsentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_UpdateAllWConsentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPerson'.
-- Will reset field [ConsentID] with value @ConsentIDOld  to value @ConsentID
-- Gets: @ConsentID int
-- Gets: @ConsentIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_UpdateAllWConsentIDLogic]
	@ConsentID int,
	@ConsentIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET
	[ConsentID] = @ConsentID
WHERE
	[ConsentID] = @ConsentIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [AssentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_UpdateAllWAssentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_UpdateAllWAssentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPerson'.
-- Will reset field [AssentID] with value @AssentIDOld  to value @AssentID
-- Gets: @AssentID int
-- Gets: @AssentIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_UpdateAllWAssentIDLogic]
	@AssentID int,
	@AssentIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET
	[AssentID] = @AssentID
WHERE
	[AssentID] = @AssentIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [LanguageTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_UpdateAllWLanguageTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_UpdateAllWLanguageTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPerson'.
-- Will reset field [LanguageTypeID] with value @LanguageTypeIDOld  to value @LanguageTypeID
-- Gets: @LanguageTypeID int
-- Gets: @LanguageTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_UpdateAllWLanguageTypeIDLogic]
	@LanguageTypeID int,
	@LanguageTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPerson]
SET
	[LanguageTypeID] = @LanguageTypeID
WHERE
	[LanguageTypeID] = @LanguageTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPerson'
-- using the Primary Key. 
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_Delete]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPerson]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPerson'
-- based on the Primary Key.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectOne]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPerson'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
ORDER BY 
	[MPRID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPerson'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [RelationshipTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAllWRelationshipTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAllWRelationshipTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPerson'
-- based on a foreign key field.
-- Gets: @RelationshipTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAllWRelationshipTypeIDLogic]
	@RelationshipTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[RelationshipTypeID] = @RelationshipTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ConsentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAllWConsentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAllWConsentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPerson'
-- based on a foreign key field.
-- Gets: @ConsentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAllWConsentIDLogic]
	@ConsentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[ConsentID] = @ConsentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [AssentID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAllWAssentIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAllWAssentIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPerson'
-- based on a foreign key field.
-- Gets: @AssentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAllWAssentIDLogic]
	@AssentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[AssentID] = @AssentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [LanguageTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPerson_SelectAllWLanguageTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPerson_SelectAllWLanguageTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPerson'
-- based on a foreign key field.
-- Gets: @LanguageTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPerson_SelectAllWLanguageTypeIDLogic]
	@LanguageTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPerson]
WHERE
	[LanguageTypeID] = @LanguageTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPerson]

GO

-- [Stored Procedures generated for table:  tblPersonBest]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonBest_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonBest_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPersonBest'
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @BestMailingAddressID int
-- Gets: @BestPhysicalAddressID int
-- Gets: @BestCheckAddressID int
-- Gets: @BestPhoneID int
-- Gets: @BestEmailID int
-- Gets: @BestSocialNetworkID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonBest_Insert]
	@MPRID varchar(8),
	@CaseID int,
	@BestMailingAddressID int,
	@BestPhysicalAddressID int,
	@BestCheckAddressID int,
	@BestPhoneID int,
	@BestEmailID int,
	@BestSocialNetworkID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPersonBest]
(
	[MPRID],
	[CaseID],
	[BestMailingAddressID],
	[BestPhysicalAddressID],
	[BestCheckAddressID],
	[BestPhoneID],
	[BestEmailID],
	[BestSocialNetworkID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@MPRID,
	@CaseID,
	@BestMailingAddressID,
	@BestPhysicalAddressID,
	@BestCheckAddressID,
	@BestPhoneID,
	@BestEmailID,
	@BestSocialNetworkID,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonBest_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonBest_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPersonBest'
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @BestMailingAddressID int
-- Gets: @BestPhysicalAddressID int
-- Gets: @BestCheckAddressID int
-- Gets: @BestPhoneID int
-- Gets: @BestEmailID int
-- Gets: @BestSocialNetworkID int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonBest_Update]
	@MPRID varchar(8),
	@CaseID int,
	@BestMailingAddressID int,
	@BestPhysicalAddressID int,
	@BestCheckAddressID int,
	@BestPhoneID int,
	@BestEmailID int,
	@BestSocialNetworkID int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPersonBest]
SET 
	[CaseID] = @CaseID,
	[BestMailingAddressID] = @BestMailingAddressID,
	[BestPhysicalAddressID] = @BestPhysicalAddressID,
	[BestCheckAddressID] = @BestCheckAddressID,
	[BestPhoneID] = @BestPhoneID,
	[BestEmailID] = @BestEmailID,
	[BestSocialNetworkID] = @BestSocialNetworkID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonBest_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonBest_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPersonBest'
-- using the Primary Key. 
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonBest_Delete]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPersonBest]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonBest_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonBest_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPersonBest'
-- based on the Primary Key.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonBest_SelectOne]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[MPRID],
	[CaseID],
	[BestMailingAddressID],
	[BestPhysicalAddressID],
	[BestCheckAddressID],
	[BestPhoneID],
	[BestEmailID],
	[BestSocialNetworkID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPersonBest]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonBest_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonBest_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPersonBest'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonBest_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[MPRID],
	[CaseID],
	[BestMailingAddressID],
	[BestPhysicalAddressID],
	[BestCheckAddressID],
	[BestPhoneID],
	[BestEmailID],
	[BestSocialNetworkID],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPersonBest]
ORDER BY 
	[MPRID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPersonBest]

GO

-- [Stored Procedures generated for table:  tblPersonHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPersonHistory'
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @Prefix varchar(10)
-- Gets: @FirstName varchar(20)
-- Gets: @MiddleName varchar(20)
-- Gets: @LastName varchar(30)
-- Gets: @MaidenName varchar(30)
-- Gets: @Suffix varchar(50)
-- Gets: @Title varchar(50)
-- Gets: @SSN varchar(11)
-- Gets: @EIN varchar(11)
-- Gets: @LexID varchar(15)
-- Gets: @RelationshipTypeID int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @ConsentID int
-- Gets: @AssentID int
-- Gets: @GenderID int
-- Gets: @DateOfBirth datetime
-- Gets: @DateOfDeath datetime
-- Gets: @AgeAtSampling int
-- Gets: @MaritalStatus varchar(50)
-- Gets: @IsHispanic bit
-- Gets: @RaceOther varchar(50)
-- Gets: @LanguageTypeID int
-- Gets: @LanguageOther varchar(50)
-- Gets: @NonResidentAlien bit
-- Gets: @WebUsername varchar(8)
-- Gets: @WebPassword varchar(8)
-- Gets: @WebSite varchar(255)
-- Gets: @BPN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @PersonHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_Insert]
	@MPRID varchar(8),
	@CaseID int,
	@Round int,
	@Prefix varchar(10),
	@FirstName varchar(20),
	@MiddleName varchar(20),
	@LastName varchar(30),
	@MaidenName varchar(30),
	@Suffix varchar(50),
	@Title varchar(50),
	@SSN varchar(11),
	@EIN varchar(11),
	@LexID varchar(15),
	@RelationshipTypeID int,
	@InSample bit,
	@IsIneligible bit,
	@ConsentID int,
	@AssentID int,
	@GenderID int,
	@DateOfBirth datetime,
	@DateOfDeath datetime,
	@AgeAtSampling int,
	@MaritalStatus varchar(50),
	@IsHispanic bit,
	@RaceOther varchar(50),
	@LanguageTypeID int,
	@LanguageOther varchar(50),
	@NonResidentAlien bit,
	@WebUsername varchar(8),
	@WebPassword varchar(8),
	@WebSite varchar(255),
	@BPN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@PersonHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPersonHistory]
(
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@MPRID,
	@CaseID,
	@Round,
	@Prefix,
	@FirstName,
	@MiddleName,
	@LastName,
	@MaidenName,
	@Suffix,
	@Title,
	@SSN,
	@EIN,
	@LexID,
	@RelationshipTypeID,
	@InSample,
	@IsIneligible,
	@ConsentID,
	@AssentID,
	@GenderID,
	@DateOfBirth,
	@DateOfDeath,
	@AgeAtSampling,
	@MaritalStatus,
	@IsHispanic,
	@RaceOther,
	@LanguageTypeID,
	@LanguageOther,
	@NonResidentAlien,
	@WebUsername,
	@WebPassword,
	@WebSite,
	@BPN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @PersonHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPersonHistory'
-- Gets: @PersonHistoryID int
-- Gets: @MPRID varchar(8)
-- Gets: @CaseID int
-- Gets: @Round int
-- Gets: @Prefix varchar(10)
-- Gets: @FirstName varchar(20)
-- Gets: @MiddleName varchar(20)
-- Gets: @LastName varchar(30)
-- Gets: @MaidenName varchar(30)
-- Gets: @Suffix varchar(50)
-- Gets: @Title varchar(50)
-- Gets: @SSN varchar(11)
-- Gets: @EIN varchar(11)
-- Gets: @LexID varchar(15)
-- Gets: @RelationshipTypeID int
-- Gets: @InSample bit
-- Gets: @IsIneligible bit
-- Gets: @ConsentID int
-- Gets: @AssentID int
-- Gets: @GenderID int
-- Gets: @DateOfBirth datetime
-- Gets: @DateOfDeath datetime
-- Gets: @AgeAtSampling int
-- Gets: @MaritalStatus varchar(50)
-- Gets: @IsHispanic bit
-- Gets: @RaceOther varchar(50)
-- Gets: @LanguageTypeID int
-- Gets: @LanguageOther varchar(50)
-- Gets: @NonResidentAlien bit
-- Gets: @WebUsername varchar(8)
-- Gets: @WebPassword varchar(8)
-- Gets: @WebSite varchar(255)
-- Gets: @BPN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_Update]
	@PersonHistoryID int,
	@MPRID varchar(8),
	@CaseID int,
	@Round int,
	@Prefix varchar(10),
	@FirstName varchar(20),
	@MiddleName varchar(20),
	@LastName varchar(30),
	@MaidenName varchar(30),
	@Suffix varchar(50),
	@Title varchar(50),
	@SSN varchar(11),
	@EIN varchar(11),
	@LexID varchar(15),
	@RelationshipTypeID int,
	@InSample bit,
	@IsIneligible bit,
	@ConsentID int,
	@AssentID int,
	@GenderID int,
	@DateOfBirth datetime,
	@DateOfDeath datetime,
	@AgeAtSampling int,
	@MaritalStatus varchar(50),
	@IsHispanic bit,
	@RaceOther varchar(50),
	@LanguageTypeID int,
	@LanguageOther varchar(50),
	@NonResidentAlien bit,
	@WebUsername varchar(8),
	@WebPassword varchar(8),
	@WebSite varchar(255),
	@BPN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPersonHistory]
SET 
	[MPRID] = @MPRID,
	[CaseID] = @CaseID,
	[Round] = @Round,
	[Prefix] = @Prefix,
	[FirstName] = @FirstName,
	[MiddleName] = @MiddleName,
	[LastName] = @LastName,
	[MaidenName] = @MaidenName,
	[Suffix] = @Suffix,
	[Title] = @Title,
	[SSN] = @SSN,
	[EIN] = @EIN,
	[LexID] = @LexID,
	[RelationshipTypeID] = @RelationshipTypeID,
	[InSample] = @InSample,
	[IsIneligible] = @IsIneligible,
	[ConsentID] = @ConsentID,
	[AssentID] = @AssentID,
	[GenderID] = @GenderID,
	[DateOfBirth] = @DateOfBirth,
	[DateOfDeath] = @DateOfDeath,
	[AgeAtSampling] = @AgeAtSampling,
	[MaritalStatus] = @MaritalStatus,
	[IsHispanic] = @IsHispanic,
	[RaceOther] = @RaceOther,
	[LanguageTypeID] = @LanguageTypeID,
	[LanguageOther] = @LanguageOther,
	[NonResidentAlien] = @NonResidentAlien,
	[WebUsername] = @WebUsername,
	[WebPassword] = @WebPassword,
	[WebSite] = @WebSite,
	[BPN] = @BPN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[PersonHistoryID] = @PersonHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_UpdateAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_UpdateAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPersonHistory'.
-- Will reset field [MPRID] with value @MPRIDOld  to value @MPRID
-- Gets: @MPRID varchar(8)
-- Gets: @MPRIDOld varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_UpdateAllWMPRIDLogic]
	@MPRID varchar(8),
	@MPRIDOld varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPersonHistory]
SET
	[MPRID] = @MPRID
WHERE
	[MPRID] = @MPRIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPersonHistory'
-- using the Primary Key. 
-- Gets: @PersonHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_Delete]
	@PersonHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPersonHistory]
WHERE
	[PersonHistoryID] = @PersonHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPersonHistory'
-- based on the Primary Key.
-- Gets: @PersonHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_SelectOne]
	@PersonHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PersonHistoryID],
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPersonHistory]
WHERE
	[PersonHistoryID] = @PersonHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPersonHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PersonHistoryID],
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPersonHistory]
ORDER BY 
	[PersonHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonHistory_SelectAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonHistory_SelectAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPersonHistory'
-- based on a foreign key field.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonHistory_SelectAllWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PersonHistoryID],
	[MPRID],
	[CaseID],
	[Round],
	[Prefix],
	[FirstName],
	[MiddleName],
	[LastName],
	[MaidenName],
	[Suffix],
	[Title],
	[SSN],
	[EIN],
	[LexID],
	[RelationshipTypeID],
	[InSample],
	[IsIneligible],
	[ConsentID],
	[AssentID],
	[GenderID],
	[DateOfBirth],
	[DateOfDeath],
	[AgeAtSampling],
	[MaritalStatus],
	[IsHispanic],
	[RaceOther],
	[LanguageTypeID],
	[LanguageOther],
	[NonResidentAlien],
	[WebUsername],
	[WebPassword],
	[WebSite],
	[BPN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblPersonHistory]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPersonHistory]

GO

-- [Stored Procedures generated for table:  tblPersonRace]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPersonRace'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @RaceTypeID int
-- Returns: @PersonRaceID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@RaceTypeID int,
	@PersonRaceID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPersonRace]
(
	[CaseID],
	[MPRID],
	[RaceTypeID]
)
VALUES
(
	@CaseID,
	@MPRID,
	@RaceTypeID
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @PersonRaceID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPersonRace'
-- Gets: @PersonRaceID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @RaceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_Update]
	@PersonRaceID int,
	@CaseID int,
	@MPRID varchar(8),
	@RaceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPersonRace]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[RaceTypeID] = @RaceTypeID
WHERE
	[PersonRaceID] = @PersonRaceID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_UpdateAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_UpdateAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPersonRace'.
-- Will reset field [MPRID] with value @MPRIDOld  to value @MPRID
-- Gets: @MPRID varchar(8)
-- Gets: @MPRIDOld varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_UpdateAllWMPRIDLogic]
	@MPRID varchar(8),
	@MPRIDOld varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPersonRace]
SET
	[MPRID] = @MPRID
WHERE
	[MPRID] = @MPRIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPersonRace'
-- using the Primary Key. 
-- Gets: @PersonRaceID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_Delete]
	@PersonRaceID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPersonRace]
WHERE
	[PersonRaceID] = @PersonRaceID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPersonRace'
-- based on the Primary Key.
-- Gets: @PersonRaceID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectOne]
	@PersonRaceID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
WHERE
	[PersonRaceID] = @PersonRaceID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectOneWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectOneWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblPersonRace'
-- based on the field [CaseID], which is unique per row.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectOneWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectOneWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectOneWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblPersonRace'
-- based on the field [MPRID], which is unique per row.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectOneWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [RaceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectOneWRaceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectOneWRaceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblPersonRace'
-- based on the field [RaceTypeID], which is unique per row.
-- Gets: @RaceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectOneWRaceTypeIDLogic]
	@RaceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
WHERE
	[RaceTypeID] = @RaceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPersonRace'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
ORDER BY 
	[PersonRaceID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPersonRace_SelectAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPersonRace_SelectAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPersonRace'
-- based on a foreign key field.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPersonRace_SelectAllWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PersonRaceID],
	[CaseID],
	[MPRID],
	[RaceTypeID]
FROM [dbo].[tblPersonRace]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPersonRace]

GO

-- [Stored Procedures generated for table:  tblPhone]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPhone'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @PhoneNum varchar(25)
-- Gets: @Extension varchar(10)
-- Gets: @IsInternational bit
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @DSTI varchar(1)
-- Gets: @PhoneTypeID int
-- Gets: @PhoneTimeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @LastAttemptedOn datetime
-- Gets: @ListedTo varchar(100)
-- Gets: @Notes varchar(2000)
-- Gets: @IsCleaned bit
-- Gets: @BlaisePhoneStatus int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Gets: @TCPAPhoneType varchar(1)
-- Gets: @TCPALastModifiedOn datetime
-- Returns: @PhoneID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@PhoneNum varchar(25),
	@Extension varchar(10),
	@IsInternational bit,
	@TimeZoneCode varchar(2),
	@DSTI varchar(1),
	@PhoneTypeID int,
	@PhoneTimeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@LastAttemptedOn datetime,
	@ListedTo varchar(100),
	@Notes varchar(2000),
	@IsCleaned bit,
	@BlaisePhoneStatus int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@TCPAPhoneType varchar(1),
	@TCPALastModifiedOn datetime,
	@PhoneID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPhone]
(
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@Round,
	@PhoneNum,
	@Extension,
	@IsInternational,
	@TimeZoneCode,
	@DSTI,
	@PhoneTypeID,
	@PhoneTimeID,
	@SourceTypeID,
	@SourceQualityID,
	@LastAttemptedOn,
	@ListedTo,
	@Notes,
	@IsCleaned,
	@BlaisePhoneStatus,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@FieldLocatingStatusID,
	@TCPAPhoneType,
	@TCPALastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @PhoneID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPhone'
-- Gets: @PhoneID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @PhoneNum varchar(25)
-- Gets: @Extension varchar(10)
-- Gets: @IsInternational bit
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @DSTI varchar(1)
-- Gets: @PhoneTypeID int
-- Gets: @PhoneTimeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @LastAttemptedOn datetime
-- Gets: @ListedTo varchar(100)
-- Gets: @Notes varchar(2000)
-- Gets: @IsCleaned bit
-- Gets: @BlaisePhoneStatus int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Gets: @TCPAPhoneType varchar(1)
-- Gets: @TCPALastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_Update]
	@PhoneID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@PhoneNum varchar(25),
	@Extension varchar(10),
	@IsInternational bit,
	@TimeZoneCode varchar(2),
	@DSTI varchar(1),
	@PhoneTypeID int,
	@PhoneTimeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@LastAttemptedOn datetime,
	@ListedTo varchar(100),
	@Notes varchar(2000),
	@IsCleaned bit,
	@BlaisePhoneStatus int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@TCPAPhoneType varchar(1),
	@TCPALastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[PhoneNum] = @PhoneNum,
	[Extension] = @Extension,
	[IsInternational] = @IsInternational,
	[TimeZoneCode] = @TimeZoneCode,
	[DSTI] = @DSTI,
	[PhoneTypeID] = @PhoneTypeID,
	[PhoneTimeID] = @PhoneTimeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[LastAttemptedOn] = @LastAttemptedOn,
	[ListedTo] = @ListedTo,
	[Notes] = @Notes,
	[IsCleaned] = @IsCleaned,
	[BlaisePhoneStatus] = @BlaisePhoneStatus,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[FieldLocatingStatusID] = @FieldLocatingStatusID,
	[TCPAPhoneType] = @TCPAPhoneType,
	[TCPALastModifiedOn] = @TCPALastModifiedOn
WHERE
	[PhoneID] = @PhoneID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhone'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PhoneTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_UpdateAllWPhoneTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_UpdateAllWPhoneTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhone'.
-- Will reset field [PhoneTypeID] with value @PhoneTypeIDOld  to value @PhoneTypeID
-- Gets: @PhoneTypeID int
-- Gets: @PhoneTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_UpdateAllWPhoneTypeIDLogic]
	@PhoneTypeID int,
	@PhoneTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET
	[PhoneTypeID] = @PhoneTypeID
WHERE
	[PhoneTypeID] = @PhoneTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PhoneTimeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_UpdateAllWPhoneTimeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_UpdateAllWPhoneTimeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhone'.
-- Will reset field [PhoneTimeID] with value @PhoneTimeIDOld  to value @PhoneTimeID
-- Gets: @PhoneTimeID int
-- Gets: @PhoneTimeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_UpdateAllWPhoneTimeIDLogic]
	@PhoneTimeID int,
	@PhoneTimeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET
	[PhoneTimeID] = @PhoneTimeID
WHERE
	[PhoneTimeID] = @PhoneTimeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_UpdateAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_UpdateAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhone'.
-- Will reset field [SourceTypeID] with value @SourceTypeIDOld  to value @SourceTypeID
-- Gets: @SourceTypeID int
-- Gets: @SourceTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_UpdateAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@SourceTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET
	[SourceTypeID] = @SourceTypeID
WHERE
	[SourceTypeID] = @SourceTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_UpdateAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_UpdateAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhone'.
-- Will reset field [SourceQualityID] with value @SourceQualityIDOld  to value @SourceQualityID
-- Gets: @SourceQualityID int
-- Gets: @SourceQualityIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_UpdateAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@SourceQualityIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhone]
SET
	[SourceQualityID] = @SourceQualityID
WHERE
	[SourceQualityID] = @SourceQualityIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPhone'
-- using the Primary Key. 
-- Gets: @PhoneID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_Delete]
	@PhoneID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPhone]
WHERE
	[PhoneID] = @PhoneID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPhone'
-- based on the Primary Key.
-- Gets: @PhoneID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectOne]
	@PhoneID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[PhoneID] = @PhoneID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPhone'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
ORDER BY 
	[PhoneID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhone'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PhoneTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAllWPhoneTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAllWPhoneTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhone'
-- based on a foreign key field.
-- Gets: @PhoneTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAllWPhoneTypeIDLogic]
	@PhoneTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[PhoneTypeID] = @PhoneTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PhoneTimeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAllWPhoneTimeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAllWPhoneTimeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhone'
-- based on a foreign key field.
-- Gets: @PhoneTimeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAllWPhoneTimeIDLogic]
	@PhoneTimeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[PhoneTimeID] = @PhoneTimeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhone'
-- based on a foreign key field.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhone_SelectAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhone_SelectAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhone'
-- based on a foreign key field.
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhone_SelectAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhone]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPhone]

GO

-- [Stored Procedures generated for table:  tblPhoneHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblPhoneHistory'
-- Gets: @PhoneID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @PhoneNum varchar(25)
-- Gets: @Extension varchar(10)
-- Gets: @IsInternational bit
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @DSTI varchar(1)
-- Gets: @PhoneTypeID int
-- Gets: @PhoneTimeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @LastAttemptedOn datetime
-- Gets: @ListedTo varchar(100)
-- Gets: @Notes varchar(2000)
-- Gets: @IsCleaned bit
-- Gets: @BlaisePhoneStatus int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Gets: @TCPAPhoneType varchar(1)
-- Gets: @TCPALastModifiedOn datetime
-- Returns: @PhoneHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_Insert]
	@PhoneID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@PhoneNum varchar(25),
	@Extension varchar(10),
	@IsInternational bit,
	@TimeZoneCode varchar(2),
	@DSTI varchar(1),
	@PhoneTypeID int,
	@PhoneTimeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@LastAttemptedOn datetime,
	@ListedTo varchar(100),
	@Notes varchar(2000),
	@IsCleaned bit,
	@BlaisePhoneStatus int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@TCPAPhoneType varchar(1),
	@TCPALastModifiedOn datetime,
	@PhoneHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblPhoneHistory]
(
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
)
VALUES
(
	@PhoneID,
	@CaseID,
	@MPRID,
	@Round,
	@PhoneNum,
	@Extension,
	@IsInternational,
	@TimeZoneCode,
	@DSTI,
	@PhoneTypeID,
	@PhoneTimeID,
	@SourceTypeID,
	@SourceQualityID,
	@LastAttemptedOn,
	@ListedTo,
	@Notes,
	@IsCleaned,
	@BlaisePhoneStatus,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn,
	@FieldLocatingStatusID,
	@TCPAPhoneType,
	@TCPALastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @PhoneHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblPhoneHistory'
-- Gets: @PhoneHistoryID int
-- Gets: @PhoneID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @PhoneNum varchar(25)
-- Gets: @Extension varchar(10)
-- Gets: @IsInternational bit
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @DSTI varchar(1)
-- Gets: @PhoneTypeID int
-- Gets: @PhoneTimeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @LastAttemptedOn datetime
-- Gets: @ListedTo varchar(100)
-- Gets: @Notes varchar(2000)
-- Gets: @IsCleaned bit
-- Gets: @BlaisePhoneStatus int
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Gets: @FieldLocatingStatusID int
-- Gets: @TCPAPhoneType varchar(1)
-- Gets: @TCPALastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_Update]
	@PhoneHistoryID int,
	@PhoneID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@PhoneNum varchar(25),
	@Extension varchar(10),
	@IsInternational bit,
	@TimeZoneCode varchar(2),
	@DSTI varchar(1),
	@PhoneTypeID int,
	@PhoneTimeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@LastAttemptedOn datetime,
	@ListedTo varchar(100),
	@Notes varchar(2000),
	@IsCleaned bit,
	@BlaisePhoneStatus int,
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@FieldLocatingStatusID int,
	@TCPAPhoneType varchar(1),
	@TCPALastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhoneHistory]
SET 
	[PhoneID] = @PhoneID,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[PhoneNum] = @PhoneNum,
	[Extension] = @Extension,
	[IsInternational] = @IsInternational,
	[TimeZoneCode] = @TimeZoneCode,
	[DSTI] = @DSTI,
	[PhoneTypeID] = @PhoneTypeID,
	[PhoneTimeID] = @PhoneTimeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[LastAttemptedOn] = @LastAttemptedOn,
	[ListedTo] = @ListedTo,
	[Notes] = @Notes,
	[IsCleaned] = @IsCleaned,
	[BlaisePhoneStatus] = @BlaisePhoneStatus,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn,
	[FieldLocatingStatusID] = @FieldLocatingStatusID,
	[TCPAPhoneType] = @TCPAPhoneType,
	[TCPALastModifiedOn] = @TCPALastModifiedOn
WHERE
	[PhoneHistoryID] = @PhoneHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [PhoneID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_UpdateAllWPhoneIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_UpdateAllWPhoneIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblPhoneHistory'.
-- Will reset field [PhoneID] with value @PhoneIDOld  to value @PhoneID
-- Gets: @PhoneID int
-- Gets: @PhoneIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_UpdateAllWPhoneIDLogic]
	@PhoneID int,
	@PhoneIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblPhoneHistory]
SET
	[PhoneID] = @PhoneID
WHERE
	[PhoneID] = @PhoneIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblPhoneHistory'
-- using the Primary Key. 
-- Gets: @PhoneHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_Delete]
	@PhoneHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblPhoneHistory]
WHERE
	[PhoneHistoryID] = @PhoneHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblPhoneHistory'
-- based on the Primary Key.
-- Gets: @PhoneHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_SelectOne]
	@PhoneHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PhoneHistoryID],
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhoneHistory]
WHERE
	[PhoneHistoryID] = @PhoneHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblPhoneHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PhoneHistoryID],
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhoneHistory]
ORDER BY 
	[PhoneHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [PhoneID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblPhoneHistory_SelectAllWPhoneIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblPhoneHistory_SelectAllWPhoneIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblPhoneHistory'
-- based on a foreign key field.
-- Gets: @PhoneID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblPhoneHistory_SelectAllWPhoneIDLogic]
	@PhoneID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[PhoneHistoryID],
	[PhoneID],
	[CaseID],
	[MPRID],
	[Round],
	[PhoneNum],
	[Extension],
	[IsInternational],
	[TimeZoneCode],
	[DSTI],
	[PhoneTypeID],
	[PhoneTimeID],
	[SourceTypeID],
	[SourceQualityID],
	[LastAttemptedOn],
	[ListedTo],
	[Notes],
	[IsCleaned],
	[BlaisePhoneStatus],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn],
	[FieldLocatingStatusID],
	[TCPAPhoneType],
	[TCPALastModifiedOn]
FROM [dbo].[tblPhoneHistory]
WHERE
	[PhoneID] = @PhoneID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblPhoneHistory]

GO

-- [Stored Procedures generated for table:  tblSchool]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblSchool'
-- Gets: @CaseID int
-- Gets: @DistrictID int
-- Gets: @NCES varchar(20)
-- Gets: @Name varchar(50)
-- Gets: @GradeLevels varchar(20)
-- Gets: @StartDate datetime
-- Gets: @EndDate datetime
-- Gets: @OpeningTime varchar(10)
-- Gets: @ClosingTime varchar(10)
-- Gets: @NumClassrooms int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_Insert]
	@CaseID int,
	@DistrictID int,
	@NCES varchar(20),
	@Name varchar(50),
	@GradeLevels varchar(20),
	@StartDate datetime,
	@EndDate datetime,
	@OpeningTime varchar(10),
	@ClosingTime varchar(10),
	@NumClassrooms int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@SchoolID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblSchool]
(
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@DistrictID,
	@NCES,
	@Name,
	@GradeLevels,
	@StartDate,
	@EndDate,
	@OpeningTime,
	@ClosingTime,
	@NumClassrooms,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SchoolID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblSchool'
-- Gets: @SchoolID int
-- Gets: @CaseID int
-- Gets: @DistrictID int
-- Gets: @NCES varchar(20)
-- Gets: @Name varchar(50)
-- Gets: @GradeLevels varchar(20)
-- Gets: @StartDate datetime
-- Gets: @EndDate datetime
-- Gets: @OpeningTime varchar(10)
-- Gets: @ClosingTime varchar(10)
-- Gets: @NumClassrooms int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_Update]
	@SchoolID int,
	@CaseID int,
	@DistrictID int,
	@NCES varchar(20),
	@Name varchar(50),
	@GradeLevels varchar(20),
	@StartDate datetime,
	@EndDate datetime,
	@OpeningTime varchar(10),
	@ClosingTime varchar(10),
	@NumClassrooms int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSchool]
SET 
	[CaseID] = @CaseID,
	[DistrictID] = @DistrictID,
	[NCES] = @NCES,
	[Name] = @Name,
	[GradeLevels] = @GradeLevels,
	[StartDate] = @StartDate,
	[EndDate] = @EndDate,
	[OpeningTime] = @OpeningTime,
	[ClosingTime] = @ClosingTime,
	[NumClassrooms] = @NumClassrooms,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSchool'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSchool]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DistrictID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_UpdateAllWDistrictIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_UpdateAllWDistrictIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSchool'.
-- Will reset field [DistrictID] with value @DistrictIDOld  to value @DistrictID
-- Gets: @DistrictID int
-- Gets: @DistrictIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_UpdateAllWDistrictIDLogic]
	@DistrictID int,
	@DistrictIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSchool]
SET
	[DistrictID] = @DistrictID
WHERE
	[DistrictID] = @DistrictIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblSchool'
-- using the Primary Key. 
-- Gets: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_Delete]
	@SchoolID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblSchool]
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblSchool'
-- based on the Primary Key.
-- Gets: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_SelectOne]
	@SchoolID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SchoolID],
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSchool]
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_SelectOneWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_SelectOneWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblSchool'
-- based on the field [CaseID], which is unique per row.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_SelectOneWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SchoolID],
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSchool]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblSchool'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SchoolID],
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSchool]
ORDER BY 
	[SchoolID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSchool'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SchoolID],
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSchool]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DistrictID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSchool_SelectAllWDistrictIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSchool_SelectAllWDistrictIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSchool'
-- based on a foreign key field.
-- Gets: @DistrictID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSchool_SelectAllWDistrictIDLogic]
	@DistrictID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SchoolID],
	[CaseID],
	[DistrictID],
	[NCES],
	[Name],
	[GradeLevels],
	[StartDate],
	[EndDate],
	[OpeningTime],
	[ClosingTime],
	[NumClassrooms],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSchool]
WHERE
	[DistrictID] = @DistrictID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblSchool]

GO

-- [Stored Procedures generated for table:  tblSite]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSite_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSite_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblSite'
-- Gets: @Name varchar(50)
-- Gets: @PSU varchar(6)
-- Gets: @FIPS char(5)
-- Gets: @StateID int
-- Gets: @Region int
-- Gets: @County varchar(50)
-- Gets: @MSA int
-- Gets: @MSAName varchar(50)
-- Gets: @CoordinatorName varchar(100)
-- Gets: @CoordinatorPhone varchar(25)
-- Gets: @CoordinatorEmail varchar(255)
-- Returns: @SiteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSite_Insert]
	@Name varchar(50),
	@PSU varchar(6),
	@FIPS char(5),
	@StateID int,
	@Region int,
	@County varchar(50),
	@MSA int,
	@MSAName varchar(50),
	@CoordinatorName varchar(100),
	@CoordinatorPhone varchar(25),
	@CoordinatorEmail varchar(255),
	@SiteID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblSite]
(
	[Name],
	[PSU],
	[FIPS],
	[StateID],
	[Region],
	[County],
	[MSA],
	[MSAName],
	[CoordinatorName],
	[CoordinatorPhone],
	[CoordinatorEmail]
)
VALUES
(
	@Name,
	@PSU,
	@FIPS,
	@StateID,
	@Region,
	@County,
	@MSA,
	@MSAName,
	@CoordinatorName,
	@CoordinatorPhone,
	@CoordinatorEmail
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SiteID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSite_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSite_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblSite'
-- Gets: @SiteID int
-- Gets: @Name varchar(50)
-- Gets: @PSU varchar(6)
-- Gets: @FIPS char(5)
-- Gets: @StateID int
-- Gets: @Region int
-- Gets: @County varchar(50)
-- Gets: @MSA int
-- Gets: @MSAName varchar(50)
-- Gets: @CoordinatorName varchar(100)
-- Gets: @CoordinatorPhone varchar(25)
-- Gets: @CoordinatorEmail varchar(255)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSite_Update]
	@SiteID int,
	@Name varchar(50),
	@PSU varchar(6),
	@FIPS char(5),
	@StateID int,
	@Region int,
	@County varchar(50),
	@MSA int,
	@MSAName varchar(50),
	@CoordinatorName varchar(100),
	@CoordinatorPhone varchar(25),
	@CoordinatorEmail varchar(255),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSite]
SET 
	[Name] = @Name,
	[PSU] = @PSU,
	[FIPS] = @FIPS,
	[StateID] = @StateID,
	[Region] = @Region,
	[County] = @County,
	[MSA] = @MSA,
	[MSAName] = @MSAName,
	[CoordinatorName] = @CoordinatorName,
	[CoordinatorPhone] = @CoordinatorPhone,
	[CoordinatorEmail] = @CoordinatorEmail
WHERE
	[SiteID] = @SiteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSite_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSite_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblSite'
-- using the Primary Key. 
-- Gets: @SiteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSite_Delete]
	@SiteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblSite]
WHERE
	[SiteID] = @SiteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSite_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSite_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblSite'
-- based on the Primary Key.
-- Gets: @SiteID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSite_SelectOne]
	@SiteID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SiteID],
	[Name],
	[PSU],
	[FIPS],
	[StateID],
	[Region],
	[County],
	[MSA],
	[MSAName],
	[CoordinatorName],
	[CoordinatorPhone],
	[CoordinatorEmail]
FROM [dbo].[tblSite]
WHERE
	[SiteID] = @SiteID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSite_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSite_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblSite'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSite_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SiteID],
	[Name],
	[PSU],
	[FIPS],
	[StateID],
	[Region],
	[County],
	[MSA],
	[MSAName],
	[CoordinatorName],
	[CoordinatorPhone],
	[CoordinatorEmail]
FROM [dbo].[tblSite]
ORDER BY 
	[SiteID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblSite]

GO

-- [Stored Procedures generated for table:  tblSocialNetwork]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblSocialNetwork'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @UserName varchar(255)
-- Gets: @NameUsed varchar(255)
-- Gets: @URL varchar(255)
-- Gets: @SocialNetworkTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @StatusTypeID int
-- Gets: @SentRequestOn datetime
-- Gets: @LikeUs bit
-- Gets: @Notes varchar(2000)
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @SocialNetworkID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@UserName varchar(255),
	@NameUsed varchar(255),
	@URL varchar(255),
	@SocialNetworkTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@StatusTypeID int,
	@SentRequestOn datetime,
	@LikeUs bit,
	@Notes varchar(2000),
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@SocialNetworkID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblSocialNetwork]
(
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@Round,
	@UserName,
	@NameUsed,
	@URL,
	@SocialNetworkTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@StatusTypeID,
	@SentRequestOn,
	@LikeUs,
	@Notes,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SocialNetworkID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblSocialNetwork'
-- Gets: @SocialNetworkID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @UserName varchar(255)
-- Gets: @NameUsed varchar(255)
-- Gets: @URL varchar(255)
-- Gets: @SocialNetworkTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @StatusTypeID int
-- Gets: @SentRequestOn datetime
-- Gets: @LikeUs bit
-- Gets: @Notes varchar(2000)
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_Update]
	@SocialNetworkID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@UserName varchar(255),
	@NameUsed varchar(255),
	@URL varchar(255),
	@SocialNetworkTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@StatusTypeID int,
	@SentRequestOn datetime,
	@LikeUs bit,
	@Notes varchar(2000),
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetwork]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[UserName] = @UserName,
	[NameUsed] = @NameUsed,
	[URL] = @URL,
	[SocialNetworkTypeID] = @SocialNetworkTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[StatusTypeID] = @StatusTypeID,
	[SentRequestOn] = @SentRequestOn,
	[LikeUs] = @LikeUs,
	[Notes] = @Notes,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[SocialNetworkID] = @SocialNetworkID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSocialNetwork'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetwork]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SocialNetworkTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_UpdateAllWSocialNetworkTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_UpdateAllWSocialNetworkTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSocialNetwork'.
-- Will reset field [SocialNetworkTypeID] with value @SocialNetworkTypeIDOld  to value @SocialNetworkTypeID
-- Gets: @SocialNetworkTypeID int
-- Gets: @SocialNetworkTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_UpdateAllWSocialNetworkTypeIDLogic]
	@SocialNetworkTypeID int,
	@SocialNetworkTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetwork]
SET
	[SocialNetworkTypeID] = @SocialNetworkTypeID
WHERE
	[SocialNetworkTypeID] = @SocialNetworkTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_UpdateAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_UpdateAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSocialNetwork'.
-- Will reset field [SourceTypeID] with value @SourceTypeIDOld  to value @SourceTypeID
-- Gets: @SourceTypeID int
-- Gets: @SourceTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_UpdateAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@SourceTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetwork]
SET
	[SourceTypeID] = @SourceTypeID
WHERE
	[SourceTypeID] = @SourceTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_UpdateAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_UpdateAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSocialNetwork'.
-- Will reset field [SourceQualityID] with value @SourceQualityIDOld  to value @SourceQualityID
-- Gets: @SourceQualityID int
-- Gets: @SourceQualityIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_UpdateAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@SourceQualityIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetwork]
SET
	[SourceQualityID] = @SourceQualityID
WHERE
	[SourceQualityID] = @SourceQualityIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblSocialNetwork'
-- using the Primary Key. 
-- Gets: @SocialNetworkID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_Delete]
	@SocialNetworkID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblSocialNetwork]
WHERE
	[SocialNetworkID] = @SocialNetworkID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblSocialNetwork'
-- based on the Primary Key.
-- Gets: @SocialNetworkID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectOne]
	@SocialNetworkID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
WHERE
	[SocialNetworkID] = @SocialNetworkID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblSocialNetwork'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
ORDER BY 
	[SocialNetworkID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSocialNetwork'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SocialNetworkTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectAllWSocialNetworkTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectAllWSocialNetworkTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSocialNetwork'
-- based on a foreign key field.
-- Gets: @SocialNetworkTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectAllWSocialNetworkTypeIDLogic]
	@SocialNetworkTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
WHERE
	[SocialNetworkTypeID] = @SocialNetworkTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectAllWSourceTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectAllWSourceTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSocialNetwork'
-- based on a foreign key field.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectAllWSourceTypeIDLogic]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SourceQualityID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetwork_SelectAllWSourceQualityIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetwork_SelectAllWSourceQualityIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSocialNetwork'
-- based on a foreign key field.
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetwork_SelectAllWSourceQualityIDLogic]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetwork]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblSocialNetwork]

GO

-- [Stored Procedures generated for table:  tblSocialNetworkHistory]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblSocialNetworkHistory'
-- Gets: @SocialNetworkID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @UserName varchar(255)
-- Gets: @NameUsed varchar(255)
-- Gets: @URL varchar(255)
-- Gets: @SocialNetworkTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @StatusTypeID int
-- Gets: @SentRequestOn datetime
-- Gets: @LikeUs bit
-- Gets: @Notes varchar(2000)
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @SocialNetworkHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_Insert]
	@SocialNetworkID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@UserName varchar(255),
	@NameUsed varchar(255),
	@URL varchar(255),
	@SocialNetworkTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@StatusTypeID int,
	@SentRequestOn datetime,
	@LikeUs bit,
	@Notes varchar(2000),
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@SocialNetworkHistoryID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblSocialNetworkHistory]
(
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@SocialNetworkID,
	@CaseID,
	@MPRID,
	@Round,
	@UserName,
	@NameUsed,
	@URL,
	@SocialNetworkTypeID,
	@SourceTypeID,
	@SourceQualityID,
	@StatusTypeID,
	@SentRequestOn,
	@LikeUs,
	@Notes,
	@BPN,
	@BIN,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SocialNetworkHistoryID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblSocialNetworkHistory'
-- Gets: @SocialNetworkHistoryID int
-- Gets: @SocialNetworkID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @Round int
-- Gets: @UserName varchar(255)
-- Gets: @NameUsed varchar(255)
-- Gets: @URL varchar(255)
-- Gets: @SocialNetworkTypeID int
-- Gets: @SourceTypeID int
-- Gets: @SourceQualityID int
-- Gets: @StatusTypeID int
-- Gets: @SentRequestOn datetime
-- Gets: @LikeUs bit
-- Gets: @Notes varchar(2000)
-- Gets: @BPN tinyint
-- Gets: @BIN tinyint
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_Update]
	@SocialNetworkHistoryID int,
	@SocialNetworkID int,
	@CaseID int,
	@MPRID varchar(8),
	@Round int,
	@UserName varchar(255),
	@NameUsed varchar(255),
	@URL varchar(255),
	@SocialNetworkTypeID int,
	@SourceTypeID int,
	@SourceQualityID int,
	@StatusTypeID int,
	@SentRequestOn datetime,
	@LikeUs bit,
	@Notes varchar(2000),
	@BPN tinyint,
	@BIN tinyint,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetworkHistory]
SET 
	[SocialNetworkID] = @SocialNetworkID,
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[Round] = @Round,
	[UserName] = @UserName,
	[NameUsed] = @NameUsed,
	[URL] = @URL,
	[SocialNetworkTypeID] = @SocialNetworkTypeID,
	[SourceTypeID] = @SourceTypeID,
	[SourceQualityID] = @SourceQualityID,
	[StatusTypeID] = @StatusTypeID,
	[SentRequestOn] = @SentRequestOn,
	[LikeUs] = @LikeUs,
	[Notes] = @Notes,
	[BPN] = @BPN,
	[BIN] = @BIN,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[SocialNetworkHistoryID] = @SocialNetworkHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SocialNetworkID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_UpdateAllWSocialNetworkIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_UpdateAllWSocialNetworkIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblSocialNetworkHistory'.
-- Will reset field [SocialNetworkID] with value @SocialNetworkIDOld  to value @SocialNetworkID
-- Gets: @SocialNetworkID int
-- Gets: @SocialNetworkIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_UpdateAllWSocialNetworkIDLogic]
	@SocialNetworkID int,
	@SocialNetworkIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblSocialNetworkHistory]
SET
	[SocialNetworkID] = @SocialNetworkID
WHERE
	[SocialNetworkID] = @SocialNetworkIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblSocialNetworkHistory'
-- using the Primary Key. 
-- Gets: @SocialNetworkHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_Delete]
	@SocialNetworkHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblSocialNetworkHistory]
WHERE
	[SocialNetworkHistoryID] = @SocialNetworkHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblSocialNetworkHistory'
-- based on the Primary Key.
-- Gets: @SocialNetworkHistoryID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_SelectOne]
	@SocialNetworkHistoryID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SocialNetworkHistoryID],
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetworkHistory]
WHERE
	[SocialNetworkHistoryID] = @SocialNetworkHistoryID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblSocialNetworkHistory'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SocialNetworkHistoryID],
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetworkHistory]
ORDER BY 
	[SocialNetworkHistoryID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SocialNetworkID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblSocialNetworkHistory_SelectAllWSocialNetworkIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblSocialNetworkHistory_SelectAllWSocialNetworkIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblSocialNetworkHistory'
-- based on a foreign key field.
-- Gets: @SocialNetworkID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblSocialNetworkHistory_SelectAllWSocialNetworkIDLogic]
	@SocialNetworkID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[SocialNetworkHistoryID],
	[SocialNetworkID],
	[CaseID],
	[MPRID],
	[Round],
	[UserName],
	[NameUsed],
	[URL],
	[SocialNetworkTypeID],
	[SourceTypeID],
	[SourceQualityID],
	[StatusTypeID],
	[SentRequestOn],
	[LikeUs],
	[Notes],
	[BPN],
	[BIN],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblSocialNetworkHistory]
WHERE
	[SocialNetworkID] = @SocialNetworkID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblSocialNetworkHistory]

GO

-- [Stored Procedures generated for table:  tblStudent]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblStudent'
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @SchoolID int
-- Gets: @ClassroomID int
-- Gets: @Grade varchar(2)
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityDate datetime
-- Gets: @MobilityNote varchar(2000)
-- Gets: @GradeBaseline varchar(2)
-- Gets: @ClassroomIDBaseline int
-- Gets: @Behavior int
-- Gets: @Performance int
-- Gets: @SelectionOrder int
-- Gets: @SelectionType char(1)
-- Gets: @StudentNumber int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @StudentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_Insert]
	@CaseID int,
	@MPRID varchar(8),
	@SchoolID int,
	@ClassroomID int,
	@Grade varchar(2),
	@MobilityCode varchar(10),
	@MobilityDate datetime,
	@MobilityNote varchar(2000),
	@GradeBaseline varchar(2),
	@ClassroomIDBaseline int,
	@Behavior int,
	@Performance int,
	@SelectionOrder int,
	@SelectionType char(1),
	@StudentNumber int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@StudentID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblStudent]
(
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	ISNULL(@CaseID, ((0))),
	@MPRID,
	@SchoolID,
	@ClassroomID,
	@Grade,
	@MobilityCode,
	@MobilityDate,
	@MobilityNote,
	@GradeBaseline,
	@ClassroomIDBaseline,
	@Behavior,
	@Performance,
	@SelectionOrder,
	@SelectionType,
	@StudentNumber,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @StudentID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblStudent'
-- Gets: @StudentID int
-- Gets: @CaseID int
-- Gets: @MPRID varchar(8)
-- Gets: @SchoolID int
-- Gets: @ClassroomID int
-- Gets: @Grade varchar(2)
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityDate datetime
-- Gets: @MobilityNote varchar(2000)
-- Gets: @GradeBaseline varchar(2)
-- Gets: @ClassroomIDBaseline int
-- Gets: @Behavior int
-- Gets: @Performance int
-- Gets: @SelectionOrder int
-- Gets: @SelectionType char(1)
-- Gets: @StudentNumber int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_Update]
	@StudentID int,
	@CaseID int,
	@MPRID varchar(8),
	@SchoolID int,
	@ClassroomID int,
	@Grade varchar(2),
	@MobilityCode varchar(10),
	@MobilityDate datetime,
	@MobilityNote varchar(2000),
	@GradeBaseline varchar(2),
	@ClassroomIDBaseline int,
	@Behavior int,
	@Performance int,
	@SelectionOrder int,
	@SelectionType char(1),
	@StudentNumber int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblStudent]
SET 
	[CaseID] = @CaseID,
	[MPRID] = @MPRID,
	[SchoolID] = @SchoolID,
	[ClassroomID] = @ClassroomID,
	[Grade] = @Grade,
	[MobilityCode] = @MobilityCode,
	[MobilityDate] = @MobilityDate,
	[MobilityNote] = @MobilityNote,
	[GradeBaseline] = @GradeBaseline,
	[ClassroomIDBaseline] = @ClassroomIDBaseline,
	[Behavior] = @Behavior,
	[Performance] = @Performance,
	[SelectionOrder] = @SelectionOrder,
	[SelectionType] = @SelectionType,
	[StudentNumber] = @StudentNumber,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[StudentID] = @StudentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_UpdateAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_UpdateAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblStudent'.
-- Will reset field [MPRID] with value @MPRIDOld  to value @MPRID
-- Gets: @MPRID varchar(8)
-- Gets: @MPRIDOld varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_UpdateAllWMPRIDLogic]
	@MPRID varchar(8),
	@MPRIDOld varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblStudent]
SET
	[MPRID] = @MPRID
WHERE
	[MPRID] = @MPRIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_UpdateAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_UpdateAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblStudent'.
-- Will reset field [SchoolID] with value @SchoolIDOld  to value @SchoolID
-- Gets: @SchoolID int
-- Gets: @SchoolIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_UpdateAllWSchoolIDLogic]
	@SchoolID int,
	@SchoolIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblStudent]
SET
	[SchoolID] = @SchoolID
WHERE
	[SchoolID] = @SchoolIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ClassroomID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_UpdateAllWClassroomIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_UpdateAllWClassroomIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblStudent'.
-- Will reset field [ClassroomID] with value @ClassroomIDOld  to value @ClassroomID
-- Gets: @ClassroomID int
-- Gets: @ClassroomIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_UpdateAllWClassroomIDLogic]
	@ClassroomID int,
	@ClassroomIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblStudent]
SET
	[ClassroomID] = @ClassroomID
WHERE
	[ClassroomID] = @ClassroomIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MobilityCode].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_UpdateAllWMobilityCodeLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_UpdateAllWMobilityCodeLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblStudent'.
-- Will reset field [MobilityCode] with value @MobilityCodeOld  to value @MobilityCode
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityCodeOld varchar(10)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_UpdateAllWMobilityCodeLogic]
	@MobilityCode varchar(10),
	@MobilityCodeOld varchar(10),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblStudent]
SET
	[MobilityCode] = @MobilityCode
WHERE
	[MobilityCode] = @MobilityCodeOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblStudent'
-- using the Primary Key. 
-- Gets: @StudentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_Delete]
	@StudentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblStudent]
WHERE
	[StudentID] = @StudentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblStudent'
-- based on the Primary Key.
-- Gets: @StudentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectOne]
	@StudentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[StudentID] = @StudentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectOneWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectOneWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblStudent'
-- based on the field [MPRID], which is unique per row.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectOneWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblStudent'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
ORDER BY 
	[StudentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MPRID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectAllWMPRIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectAllWMPRIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblStudent'
-- based on a foreign key field.
-- Gets: @MPRID varchar(8)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectAllWMPRIDLogic]
	@MPRID varchar(8),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[MPRID] = @MPRID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblStudent'
-- based on a foreign key field.
-- Gets: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectAllWSchoolIDLogic]
	@SchoolID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ClassroomID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectAllWClassroomIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectAllWClassroomIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblStudent'
-- based on a foreign key field.
-- Gets: @ClassroomID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectAllWClassroomIDLogic]
	@ClassroomID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[ClassroomID] = @ClassroomID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MobilityCode].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblStudent_SelectAllWMobilityCodeLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblStudent_SelectAllWMobilityCodeLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblStudent'
-- based on a foreign key field.
-- Gets: @MobilityCode varchar(10)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblStudent_SelectAllWMobilityCodeLogic]
	@MobilityCode varchar(10),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[StudentID],
	[CaseID],
	[MPRID],
	[SchoolID],
	[ClassroomID],
	[Grade],
	[MobilityCode],
	[MobilityDate],
	[MobilityNote],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[Behavior],
	[Performance],
	[SelectionOrder],
	[SelectionType],
	[StudentNumber],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblStudent]
WHERE
	[MobilityCode] = @MobilityCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblStudent]

GO

-- [Stored Procedures generated for table:  tblTeacher]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tblTeacher'
-- Gets: @CaseID int
-- Gets: @SchoolID int
-- Gets: @Grade varchar(2)
-- Gets: @GradesSubjTaught varchar(255)
-- Gets: @GradeBaseline varchar(2)
-- Gets: @ClassroomIDBaseline int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @TeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_Insert]
	@CaseID int,
	@SchoolID int,
	@Grade varchar(2),
	@GradesSubjTaught varchar(255),
	@GradeBaseline varchar(2),
	@ClassroomIDBaseline int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@TeacherID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tblTeacher]
(
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
)
VALUES
(
	@CaseID,
	@SchoolID,
	@Grade,
	@GradesSubjTaught,
	@GradeBaseline,
	@ClassroomIDBaseline,
	@CreatedBy,
	@CreatedOn,
	@LastModifiedBy,
	@LastModifiedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @TeacherID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tblTeacher'
-- Gets: @TeacherID int
-- Gets: @CaseID int
-- Gets: @SchoolID int
-- Gets: @Grade varchar(2)
-- Gets: @GradesSubjTaught varchar(255)
-- Gets: @GradeBaseline varchar(2)
-- Gets: @ClassroomIDBaseline int
-- Gets: @CreatedBy varchar(32)
-- Gets: @CreatedOn datetime
-- Gets: @LastModifiedBy varchar(32)
-- Gets: @LastModifiedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_Update]
	@TeacherID int,
	@CaseID int,
	@SchoolID int,
	@Grade varchar(2),
	@GradesSubjTaught varchar(255),
	@GradeBaseline varchar(2),
	@ClassroomIDBaseline int,
	@CreatedBy varchar(32),
	@CreatedOn datetime,
	@LastModifiedBy varchar(32),
	@LastModifiedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblTeacher]
SET 
	[CaseID] = @CaseID,
	[SchoolID] = @SchoolID,
	[Grade] = @Grade,
	[GradesSubjTaught] = @GradesSubjTaught,
	[GradeBaseline] = @GradeBaseline,
	[ClassroomIDBaseline] = @ClassroomIDBaseline,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn,
	[LastModifiedBy] = @LastModifiedBy,
	[LastModifiedOn] = @LastModifiedOn
WHERE
	[TeacherID] = @TeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_UpdateAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_UpdateAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblTeacher'.
-- Will reset field [CaseID] with value @CaseIDOld  to value @CaseID
-- Gets: @CaseID int
-- Gets: @CaseIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_UpdateAllWCaseIDLogic]
	@CaseID int,
	@CaseIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblTeacher]
SET
	[CaseID] = @CaseID
WHERE
	[CaseID] = @CaseIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_UpdateAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_UpdateAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tblTeacher'.
-- Will reset field [SchoolID] with value @SchoolIDOld  to value @SchoolID
-- Gets: @SchoolID int
-- Gets: @SchoolIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_UpdateAllWSchoolIDLogic]
	@SchoolID int,
	@SchoolIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tblTeacher]
SET
	[SchoolID] = @SchoolID
WHERE
	[SchoolID] = @SchoolIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tblTeacher'
-- using the Primary Key. 
-- Gets: @TeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_Delete]
	@TeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tblTeacher]
WHERE
	[TeacherID] = @TeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tblTeacher'
-- based on the Primary Key.
-- Gets: @TeacherID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_SelectOne]
	@TeacherID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[TeacherID],
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblTeacher]
WHERE
	[TeacherID] = @TeacherID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_SelectOneWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_SelectOneWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one existing row from the table 'tblTeacher'
-- based on the field [CaseID], which is unique per row.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_SelectOneWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[TeacherID],
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblTeacher]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tblTeacher'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[TeacherID],
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblTeacher]
ORDER BY 
	[TeacherID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [CaseID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_SelectAllWCaseIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_SelectAllWCaseIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblTeacher'
-- based on a foreign key field.
-- Gets: @CaseID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_SelectAllWCaseIDLogic]
	@CaseID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[TeacherID],
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblTeacher]
WHERE
	[CaseID] = @CaseID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SchoolID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tblTeacher_SelectAllWSchoolIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tblTeacher_SelectAllWSchoolIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tblTeacher'
-- based on a foreign key field.
-- Gets: @SchoolID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tblTeacher_SelectAllWSchoolIDLogic]
	@SchoolID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[TeacherID],
	[CaseID],
	[SchoolID],
	[Grade],
	[GradesSubjTaught],
	[GradeBaseline],
	[ClassroomIDBaseline],
	[CreatedBy],
	[CreatedOn],
	[LastModifiedBy],
	[LastModifiedOn]
FROM [dbo].[tblTeacher]
WHERE
	[SchoolID] = @SchoolID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tblTeacher]

GO

-- [Stored Procedures generated for table:  tlkpAddressReviewStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpAddressReviewStatus'
-- Gets: @Description varchar(50)
-- Returns: @AddressReviewStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewStatus_Insert]
	@Description varchar(50),
	@AddressReviewStatusID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpAddressReviewStatus]
(
	[Description]
)
VALUES
(
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @AddressReviewStatusID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpAddressReviewStatus'
-- Gets: @AddressReviewStatusID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewStatus_Update]
	@AddressReviewStatusID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpAddressReviewStatus]
SET 
	[Description] = @Description
WHERE
	[AddressReviewStatusID] = @AddressReviewStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpAddressReviewStatus'
-- using the Primary Key. 
-- Gets: @AddressReviewStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewStatus_Delete]
	@AddressReviewStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpAddressReviewStatus]
WHERE
	[AddressReviewStatusID] = @AddressReviewStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpAddressReviewStatus'
-- based on the Primary Key.
-- Gets: @AddressReviewStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewStatus_SelectOne]
	@AddressReviewStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressReviewStatusID],
	[Description]
FROM [dbo].[tlkpAddressReviewStatus]
WHERE
	[AddressReviewStatusID] = @AddressReviewStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpAddressReviewStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressReviewStatusID],
	[Description]
FROM [dbo].[tlkpAddressReviewStatus]
ORDER BY 
	[AddressReviewStatusID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpAddressReviewStatus]

GO

-- [Stored Procedures generated for table:  tlkpAddressReviewType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpAddressReviewType'
-- Gets: @Description varchar(50)
-- Returns: @AddressReviewTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewType_Insert]
	@Description varchar(50),
	@AddressReviewTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpAddressReviewType]
(
	[Description]
)
VALUES
(
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @AddressReviewTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpAddressReviewType'
-- Gets: @AddressReviewTypeID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewType_Update]
	@AddressReviewTypeID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpAddressReviewType]
SET 
	[Description] = @Description
WHERE
	[AddressReviewTypeID] = @AddressReviewTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpAddressReviewType'
-- using the Primary Key. 
-- Gets: @AddressReviewTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewType_Delete]
	@AddressReviewTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpAddressReviewType]
WHERE
	[AddressReviewTypeID] = @AddressReviewTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpAddressReviewType'
-- based on the Primary Key.
-- Gets: @AddressReviewTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewType_SelectOne]
	@AddressReviewTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressReviewTypeID],
	[Description]
FROM [dbo].[tlkpAddressReviewType]
WHERE
	[AddressReviewTypeID] = @AddressReviewTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressReviewType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressReviewType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpAddressReviewType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressReviewType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressReviewTypeID],
	[Description]
FROM [dbo].[tlkpAddressReviewType]
ORDER BY 
	[AddressReviewTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpAddressReviewType]

GO

-- [Stored Procedures generated for table:  tlkpAddressType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpAddressType'
-- Gets: @AddressTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressType_Insert]
	@AddressTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpAddressType]
(
	[AddressTypeID],
	[Description],
	[Rank]
)
VALUES
(
	@AddressTypeID,
	@Description,
	@Rank
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpAddressType'
-- Gets: @AddressTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressType_Update]
	@AddressTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpAddressType]
SET 
	[Description] = @Description,
	[Rank] = @Rank
WHERE
	[AddressTypeID] = @AddressTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpAddressType'
-- using the Primary Key. 
-- Gets: @AddressTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressType_Delete]
	@AddressTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpAddressType]
WHERE
	[AddressTypeID] = @AddressTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpAddressType'
-- based on the Primary Key.
-- Gets: @AddressTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressType_SelectOne]
	@AddressTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AddressTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpAddressType]
WHERE
	[AddressTypeID] = @AddressTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAddressType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAddressType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpAddressType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAddressType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AddressTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpAddressType]
ORDER BY 
	[AddressTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpAddressType]

GO

-- [Stored Procedures generated for table:  tlkpAssignment]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAssignment_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAssignment_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpAssignment'
-- Gets: @AssignmentID int
-- Gets: @Code varchar(3)
-- Gets: @Description varchar(50)
-- Gets: @ApplicableStratum1 int
-- Gets: @ApplicableStratum2 int
-- Gets: @ApplicableStratum3 int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAssignment_Insert]
	@AssignmentID int,
	@Code varchar(3),
	@Description varchar(50),
	@ApplicableStratum1 int,
	@ApplicableStratum2 int,
	@ApplicableStratum3 int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpAssignment]
(
	[AssignmentID],
	[Code],
	[Description],
	[ApplicableStratum1],
	[ApplicableStratum2],
	[ApplicableStratum3]
)
VALUES
(
	@AssignmentID,
	@Code,
	@Description,
	@ApplicableStratum1,
	@ApplicableStratum2,
	@ApplicableStratum3
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpAssignment_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpAssignment_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpAssignment'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpAssignment_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AssignmentID],
	[Code],
	[Description],
	[ApplicableStratum1],
	[ApplicableStratum2],
	[ApplicableStratum3]
FROM [dbo].[tlkpAssignment]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpAssignment]

GO

-- [Stored Procedures generated for table:  tlkpBatchType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpBatchType'
-- Gets: @Description varchar(50)
-- Gets: @MaxBatchSizeDefault int
-- Gets: @StatusCodeWhenBatched char(4)
-- Gets: @StatusCodeWhenBatchReceived char(4)
-- Returns: @BatchTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_Insert]
	@Description varchar(50),
	@MaxBatchSizeDefault int,
	@StatusCodeWhenBatched char(4),
	@StatusCodeWhenBatchReceived char(4),
	@BatchTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpBatchType]
(
	[Description],
	[MaxBatchSizeDefault],
	[StatusCodeWhenBatched],
	[StatusCodeWhenBatchReceived]
)
VALUES
(
	@Description,
	@MaxBatchSizeDefault,
	@StatusCodeWhenBatched,
	@StatusCodeWhenBatchReceived
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @BatchTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpBatchType'
-- Gets: @BatchTypeID int
-- Gets: @Description varchar(50)
-- Gets: @MaxBatchSizeDefault int
-- Gets: @StatusCodeWhenBatched char(4)
-- Gets: @StatusCodeWhenBatchReceived char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_Update]
	@BatchTypeID int,
	@Description varchar(50),
	@MaxBatchSizeDefault int,
	@StatusCodeWhenBatched char(4),
	@StatusCodeWhenBatchReceived char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpBatchType]
SET 
	[Description] = @Description,
	[MaxBatchSizeDefault] = @MaxBatchSizeDefault,
	[StatusCodeWhenBatched] = @StatusCodeWhenBatched,
	[StatusCodeWhenBatchReceived] = @StatusCodeWhenBatchReceived
WHERE
	[BatchTypeID] = @BatchTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [StatusCodeWhenBatched].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchedLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchedLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpBatchType'.
-- Will reset field [StatusCodeWhenBatched] with value @StatusCodeWhenBatchedOld  to value @StatusCodeWhenBatched
-- Gets: @StatusCodeWhenBatched char(4)
-- Gets: @StatusCodeWhenBatchedOld char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchedLogic]
	@StatusCodeWhenBatched char(4),
	@StatusCodeWhenBatchedOld char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpBatchType]
SET
	[StatusCodeWhenBatched] = @StatusCodeWhenBatched
WHERE
	[StatusCodeWhenBatched] = @StatusCodeWhenBatchedOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [StatusCodeWhenBatchReceived].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchReceivedLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchReceivedLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpBatchType'.
-- Will reset field [StatusCodeWhenBatchReceived] with value @StatusCodeWhenBatchReceivedOld  to value @StatusCodeWhenBatchReceived
-- Gets: @StatusCodeWhenBatchReceived char(4)
-- Gets: @StatusCodeWhenBatchReceivedOld char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_UpdateAllWStatusCodeWhenBatchReceivedLogic]
	@StatusCodeWhenBatchReceived char(4),
	@StatusCodeWhenBatchReceivedOld char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpBatchType]
SET
	[StatusCodeWhenBatchReceived] = @StatusCodeWhenBatchReceived
WHERE
	[StatusCodeWhenBatchReceived] = @StatusCodeWhenBatchReceivedOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpBatchType'
-- using the Primary Key. 
-- Gets: @BatchTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_Delete]
	@BatchTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpBatchType]
WHERE
	[BatchTypeID] = @BatchTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpBatchType'
-- based on the Primary Key.
-- Gets: @BatchTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_SelectOne]
	@BatchTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[BatchTypeID],
	[Description],
	[MaxBatchSizeDefault],
	[StatusCodeWhenBatched],
	[StatusCodeWhenBatchReceived]
FROM [dbo].[tlkpBatchType]
WHERE
	[BatchTypeID] = @BatchTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpBatchType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[BatchTypeID],
	[Description],
	[MaxBatchSizeDefault],
	[StatusCodeWhenBatched],
	[StatusCodeWhenBatchReceived]
FROM [dbo].[tlkpBatchType]
ORDER BY 
	[BatchTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [StatusCodeWhenBatched].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchedLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchedLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpBatchType'
-- based on a foreign key field.
-- Gets: @StatusCodeWhenBatched char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchedLogic]
	@StatusCodeWhenBatched char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchTypeID],
	[Description],
	[MaxBatchSizeDefault],
	[StatusCodeWhenBatched],
	[StatusCodeWhenBatchReceived]
FROM [dbo].[tlkpBatchType]
WHERE
	[StatusCodeWhenBatched] = @StatusCodeWhenBatched
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [StatusCodeWhenBatchReceived].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchReceivedLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchReceivedLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpBatchType'
-- based on a foreign key field.
-- Gets: @StatusCodeWhenBatchReceived char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchType_SelectAllWStatusCodeWhenBatchReceivedLogic]
	@StatusCodeWhenBatchReceived char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchTypeID],
	[Description],
	[MaxBatchSizeDefault],
	[StatusCodeWhenBatched],
	[StatusCodeWhenBatchReceived]
FROM [dbo].[tlkpBatchType]
WHERE
	[StatusCodeWhenBatchReceived] = @StatusCodeWhenBatchReceived
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpBatchType]

GO

-- [Stored Procedures generated for table:  tlkpBatchTypeStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpBatchTypeStatus'
-- Gets: @BatchTypeId int
-- Gets: @AvailableStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_Insert]
	@BatchTypeId int,
	@AvailableStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpBatchTypeStatus]
(
	[BatchTypeId],
	[AvailableStatus]
)
VALUES
(
	@BatchTypeId,
	@AvailableStatus
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpBatchTypeStatus'
-- using the Primary Key. 
-- Gets: @BatchTypeId int
-- Gets: @AvailableStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_Delete]
	@BatchTypeId int,
	@AvailableStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[BatchTypeId] = @BatchTypeId
	AND [AvailableStatus] = @AvailableStatus
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [BatchTypeId]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_DeleteWBatchTypeIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_DeleteWBatchTypeIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'tlkpBatchTypeStatus'
-- using the Primary Key field [BatchTypeId]. 
-- Gets: @BatchTypeId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_DeleteWBatchTypeIdLogic]
	@BatchTypeId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[BatchTypeId] = @BatchTypeId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using PK field [AvailableStatus]
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_DeleteWAvailableStatusLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_DeleteWAvailableStatusLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more  existing rows from the table 'tlkpBatchTypeStatus'
-- using the Primary Key field [AvailableStatus]. 
-- Gets: @AvailableStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_DeleteWAvailableStatusLogic]
	@AvailableStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE one or more existing rows from the table.
DELETE FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[AvailableStatus] = @AvailableStatus
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpBatchTypeStatus'
-- based on the Primary Key.
-- Gets: @BatchTypeId int
-- Gets: @AvailableStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_SelectOne]
	@BatchTypeId int,
	@AvailableStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[BatchTypeId],
	[AvailableStatus]
FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[BatchTypeId] = @BatchTypeId
	AND [AvailableStatus] = @AvailableStatus
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpBatchTypeStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[BatchTypeId],
	[AvailableStatus]
FROM [dbo].[tlkpBatchTypeStatus]
ORDER BY 
	[BatchTypeId] ASC
	, [AvailableStatus] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [BatchTypeId].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_SelectAllWBatchTypeIdLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_SelectAllWBatchTypeIdLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpBatchTypeStatus'
-- based on a foreign key field.
-- Gets: @BatchTypeId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_SelectAllWBatchTypeIdLogic]
	@BatchTypeId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchTypeId],
	[AvailableStatus]
FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[BatchTypeId] = @BatchTypeId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [AvailableStatus].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpBatchTypeStatus_SelectAllWAvailableStatusLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpBatchTypeStatus_SelectAllWAvailableStatusLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpBatchTypeStatus'
-- based on a foreign key field.
-- Gets: @AvailableStatus char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpBatchTypeStatus_SelectAllWAvailableStatusLogic]
	@AvailableStatus char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[BatchTypeId],
	[AvailableStatus]
FROM [dbo].[tlkpBatchTypeStatus]
WHERE
	[AvailableStatus] = @AvailableStatus
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpBatchTypeStatus]

GO

-- [Stored Procedures generated for table:  tlkpCoders]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpCoders_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpCoders_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpCoders'
-- Gets: @FirstName varchar(50)
-- Gets: @LastName varchar(50)
-- Gets: @FullName varchar(50)
-- Gets: @IsActive bit
-- Returns: @CoderId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpCoders_Insert]
	@FirstName varchar(50),
	@LastName varchar(50),
	@FullName varchar(50),
	@IsActive bit,
	@CoderId int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpCoders]
(
	[FirstName],
	[LastName],
	[FullName],
	[IsActive]
)
VALUES
(
	@FirstName,
	@LastName,
	@FullName,
	@IsActive
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @CoderId=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpCoders_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpCoders_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpCoders'
-- Gets: @CoderId int
-- Gets: @FirstName varchar(50)
-- Gets: @LastName varchar(50)
-- Gets: @FullName varchar(50)
-- Gets: @IsActive bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpCoders_Update]
	@CoderId int,
	@FirstName varchar(50),
	@LastName varchar(50),
	@FullName varchar(50),
	@IsActive bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpCoders]
SET 
	[FirstName] = @FirstName,
	[LastName] = @LastName,
	[FullName] = @FullName,
	[IsActive] = @IsActive
WHERE
	[CoderId] = @CoderId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpCoders_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpCoders_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpCoders'
-- using the Primary Key. 
-- Gets: @CoderId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpCoders_Delete]
	@CoderId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpCoders]
WHERE
	[CoderId] = @CoderId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpCoders_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpCoders_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpCoders'
-- based on the Primary Key.
-- Gets: @CoderId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpCoders_SelectOne]
	@CoderId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[CoderId],
	[FirstName],
	[LastName],
	[FullName],
	[IsActive]
FROM [dbo].[tlkpCoders]
WHERE
	[CoderId] = @CoderId
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpCoders_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpCoders_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpCoders'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpCoders_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[CoderId],
	[FirstName],
	[LastName],
	[FullName],
	[IsActive]
FROM [dbo].[tlkpCoders]
ORDER BY 
	[CoderId] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpCoders]

GO

-- [Stored Procedures generated for table:  tlkpConsentType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpConsentType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpConsentType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpConsentType'
-- Gets: @ConsentID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpConsentType_Insert]
	@ConsentID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpConsentType]
(
	[ConsentID],
	[Description]
)
VALUES
(
	@ConsentID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpConsentType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpConsentType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpConsentType'
-- Gets: @ConsentID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpConsentType_Update]
	@ConsentID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpConsentType]
SET 
	[Description] = @Description
WHERE
	[ConsentID] = @ConsentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpConsentType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpConsentType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpConsentType'
-- using the Primary Key. 
-- Gets: @ConsentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpConsentType_Delete]
	@ConsentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpConsentType]
WHERE
	[ConsentID] = @ConsentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpConsentType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpConsentType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpConsentType'
-- based on the Primary Key.
-- Gets: @ConsentID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpConsentType_SelectOne]
	@ConsentID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ConsentID],
	[Description]
FROM [dbo].[tlkpConsentType]
WHERE
	[ConsentID] = @ConsentID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpConsentType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpConsentType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpConsentType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpConsentType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ConsentID],
	[Description]
FROM [dbo].[tlkpConsentType]
ORDER BY 
	[ConsentID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpConsentType]

GO

-- [Stored Procedures generated for table:  tlkpDataImport]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDataImport_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDataImport_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpDataImport'
-- Gets: @DataImportID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDataImport_Insert]
	@DataImportID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpDataImport]
(
	[DataImportID],
	[Description]
)
VALUES
(
	@DataImportID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDataImport_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDataImport_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpDataImport'
-- Gets: @DataImportID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDataImport_Update]
	@DataImportID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDataImport]
SET 
	[Description] = @Description
WHERE
	[DataImportID] = @DataImportID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDataImport_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDataImport_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpDataImport'
-- using the Primary Key. 
-- Gets: @DataImportID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDataImport_Delete]
	@DataImportID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpDataImport]
WHERE
	[DataImportID] = @DataImportID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDataImport_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDataImport_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpDataImport'
-- based on the Primary Key.
-- Gets: @DataImportID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDataImport_SelectOne]
	@DataImportID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DataImportID],
	[Description]
FROM [dbo].[tlkpDataImport]
WHERE
	[DataImportID] = @DataImportID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDataImport_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDataImport_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpDataImport'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDataImport_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DataImportID],
	[Description]
FROM [dbo].[tlkpDataImport]
ORDER BY 
	[DataImportID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpDataImport]

GO

-- [Stored Procedures generated for table:  tlkpDocumentGroup]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentGroup_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentGroup_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpDocumentGroup'
-- Gets: @DocumentGroupID int
-- Gets: @Description varchar(50)
-- Gets: @IsActive bit
-- Gets: @IsDisplayed bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentGroup_Insert]
	@DocumentGroupID int,
	@Description varchar(50),
	@IsActive bit,
	@IsDisplayed bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpDocumentGroup]
(
	[DocumentGroupID],
	[Description],
	[IsActive],
	[IsDisplayed]
)
VALUES
(
	@DocumentGroupID,
	@Description,
	@IsActive,
	@IsDisplayed
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentGroup_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentGroup_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpDocumentGroup'
-- Gets: @DocumentGroupID int
-- Gets: @Description varchar(50)
-- Gets: @IsActive bit
-- Gets: @IsDisplayed bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentGroup_Update]
	@DocumentGroupID int,
	@Description varchar(50),
	@IsActive bit,
	@IsDisplayed bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDocumentGroup]
SET 
	[Description] = @Description,
	[IsActive] = @IsActive,
	[IsDisplayed] = @IsDisplayed
WHERE
	[DocumentGroupID] = @DocumentGroupID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentGroup_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentGroup_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpDocumentGroup'
-- using the Primary Key. 
-- Gets: @DocumentGroupID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentGroup_Delete]
	@DocumentGroupID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpDocumentGroup]
WHERE
	[DocumentGroupID] = @DocumentGroupID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentGroup_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentGroup_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpDocumentGroup'
-- based on the Primary Key.
-- Gets: @DocumentGroupID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentGroup_SelectOne]
	@DocumentGroupID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentGroupID],
	[Description],
	[IsActive],
	[IsDisplayed]
FROM [dbo].[tlkpDocumentGroup]
WHERE
	[DocumentGroupID] = @DocumentGroupID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentGroup_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentGroup_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpDocumentGroup'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentGroup_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentGroupID],
	[Description],
	[IsActive],
	[IsDisplayed]
FROM [dbo].[tlkpDocumentGroup]
ORDER BY 
	[DocumentGroupID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpDocumentGroup]

GO

-- [Stored Procedures generated for table:  tlkpDocumentOutputType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentOutputType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentOutputType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpDocumentOutputType'
-- Gets: @DocumentOutputTypeID int
-- Gets: @Description varchar(255)
-- Gets: @OutputFormat char(4)
-- Gets: @FileExtension varchar(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentOutputType_Insert]
	@DocumentOutputTypeID int,
	@Description varchar(255),
	@OutputFormat char(4),
	@FileExtension varchar(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpDocumentOutputType]
(
	[DocumentOutputTypeID],
	[Description],
	[OutputFormat],
	[FileExtension]
)
VALUES
(
	@DocumentOutputTypeID,
	@Description,
	@OutputFormat,
	@FileExtension
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentOutputType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentOutputType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpDocumentOutputType'
-- Gets: @DocumentOutputTypeID int
-- Gets: @Description varchar(255)
-- Gets: @OutputFormat char(4)
-- Gets: @FileExtension varchar(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentOutputType_Update]
	@DocumentOutputTypeID int,
	@Description varchar(255),
	@OutputFormat char(4),
	@FileExtension varchar(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDocumentOutputType]
SET 
	[Description] = @Description,
	[OutputFormat] = @OutputFormat,
	[FileExtension] = @FileExtension
WHERE
	[DocumentOutputTypeID] = @DocumentOutputTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentOutputType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentOutputType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpDocumentOutputType'
-- using the Primary Key. 
-- Gets: @DocumentOutputTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentOutputType_Delete]
	@DocumentOutputTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpDocumentOutputType]
WHERE
	[DocumentOutputTypeID] = @DocumentOutputTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentOutputType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentOutputType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpDocumentOutputType'
-- based on the Primary Key.
-- Gets: @DocumentOutputTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentOutputType_SelectOne]
	@DocumentOutputTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentOutputTypeID],
	[Description],
	[OutputFormat],
	[FileExtension]
FROM [dbo].[tlkpDocumentOutputType]
WHERE
	[DocumentOutputTypeID] = @DocumentOutputTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentOutputType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentOutputType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpDocumentOutputType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentOutputType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentOutputTypeID],
	[Description],
	[OutputFormat],
	[FileExtension]
FROM [dbo].[tlkpDocumentOutputType]
ORDER BY 
	[DocumentOutputTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpDocumentOutputType]

GO

-- [Stored Procedures generated for table:  tlkpDocumentStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpDocumentStatus'
-- Gets: @StatusDesc varchar(50)
-- Gets: @StatusTypeId int
-- Gets: @SetOrigAddrQualityTo int
-- Gets: @SetOrigAddrBestPhysicalTo varchar(50)
-- Gets: @SetOrigAddrBestMailTo varchar(50)
-- Gets: @ReturnedMailSetTo int
-- Gets: @OrigAddressNoteSet varchar(100)
-- Returns: @DocumentStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentStatus_Insert]
	@StatusDesc varchar(50),
	@StatusTypeId int,
	@SetOrigAddrQualityTo int,
	@SetOrigAddrBestPhysicalTo varchar(50),
	@SetOrigAddrBestMailTo varchar(50),
	@ReturnedMailSetTo int,
	@OrigAddressNoteSet varchar(100),
	@DocumentStatusID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpDocumentStatus]
(
	[StatusDesc],
	[StatusTypeId],
	[SetOrigAddrQualityTo],
	[SetOrigAddrBestPhysicalTo],
	[SetOrigAddrBestMailTo],
	[ReturnedMailSetTo],
	[OrigAddressNoteSet]
)
VALUES
(
	@StatusDesc,
	@StatusTypeId,
	@SetOrigAddrQualityTo,
	@SetOrigAddrBestPhysicalTo,
	@SetOrigAddrBestMailTo,
	@ReturnedMailSetTo,
	@OrigAddressNoteSet
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @DocumentStatusID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpDocumentStatus'
-- Gets: @DocumentStatusID int
-- Gets: @StatusDesc varchar(50)
-- Gets: @StatusTypeId int
-- Gets: @SetOrigAddrQualityTo int
-- Gets: @SetOrigAddrBestPhysicalTo varchar(50)
-- Gets: @SetOrigAddrBestMailTo varchar(50)
-- Gets: @ReturnedMailSetTo int
-- Gets: @OrigAddressNoteSet varchar(100)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentStatus_Update]
	@DocumentStatusID int,
	@StatusDesc varchar(50),
	@StatusTypeId int,
	@SetOrigAddrQualityTo int,
	@SetOrigAddrBestPhysicalTo varchar(50),
	@SetOrigAddrBestMailTo varchar(50),
	@ReturnedMailSetTo int,
	@OrigAddressNoteSet varchar(100),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDocumentStatus]
SET 
	[StatusDesc] = @StatusDesc,
	[StatusTypeId] = @StatusTypeId,
	[SetOrigAddrQualityTo] = @SetOrigAddrQualityTo,
	[SetOrigAddrBestPhysicalTo] = @SetOrigAddrBestPhysicalTo,
	[SetOrigAddrBestMailTo] = @SetOrigAddrBestMailTo,
	[ReturnedMailSetTo] = @ReturnedMailSetTo,
	[OrigAddressNoteSet] = @OrigAddressNoteSet
WHERE
	[DocumentStatusID] = @DocumentStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpDocumentStatus'
-- using the Primary Key. 
-- Gets: @DocumentStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentStatus_Delete]
	@DocumentStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpDocumentStatus]
WHERE
	[DocumentStatusID] = @DocumentStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpDocumentStatus'
-- based on the Primary Key.
-- Gets: @DocumentStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentStatus_SelectOne]
	@DocumentStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentStatusID],
	[StatusDesc],
	[StatusTypeId],
	[SetOrigAddrQualityTo],
	[SetOrigAddrBestPhysicalTo],
	[SetOrigAddrBestMailTo],
	[ReturnedMailSetTo],
	[OrigAddressNoteSet]
FROM [dbo].[tlkpDocumentStatus]
WHERE
	[DocumentStatusID] = @DocumentStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpDocumentStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentStatusID],
	[StatusDesc],
	[StatusTypeId],
	[SetOrigAddrQualityTo],
	[SetOrigAddrBestPhysicalTo],
	[SetOrigAddrBestMailTo],
	[ReturnedMailSetTo],
	[OrigAddressNoteSet]
FROM [dbo].[tlkpDocumentStatus]
ORDER BY 
	[DocumentStatusID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpDocumentStatus]

GO

-- [Stored Procedures generated for table:  tlkpDocumentType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpDocumentType'
-- Gets: @DocumentTypeID int
-- Gets: @Name varchar(255)
-- Gets: @Description varchar(255)
-- Gets: @DocumentGroupID int
-- Gets: @GroupOrder int
-- Gets: @IsActive bit
-- Gets: @IsDisplayed bit
-- Gets: @BaseDocTypeID int
-- Gets: @AllowOnTheFlyAdd bit
-- Gets: @AllowMultipleAdds bit
-- Gets: @DataSourceStoredProc varchar(50)
-- Gets: @DocumentOutputTypeID int
-- Gets: @CrystalReportShellFilePath varchar(255)
-- Gets: @CrystalReportShellFileName varchar(50)
-- Gets: @OutputFilePath varchar(255)
-- Gets: @OutputFileName varchar(50)
-- Gets: @SampleFilePathName varchar(255)
-- Gets: @ActionOnScanning varchar(255)
-- Gets: @ActionOnSend varchar(255)
-- Gets: @UseMapping int
-- Gets: @IsDocument bit
-- Gets: @IsSSRS bit
-- Gets: @IsForwardingAddressRemail bit
-- Gets: @IsNoForwardingAddressRemail bit
-- Gets: @IsSendToLocating bit
-- Gets: @MailType char(1)
-- Gets: @InstrumentTypeId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_Insert]
	@DocumentTypeID int,
	@Name varchar(255),
	@Description varchar(255),
	@DocumentGroupID int,
	@GroupOrder int,
	@IsActive bit,
	@IsDisplayed bit,
	@BaseDocTypeID int,
	@AllowOnTheFlyAdd bit,
	@AllowMultipleAdds bit,
	@DataSourceStoredProc varchar(50),
	@DocumentOutputTypeID int,
	@CrystalReportShellFilePath varchar(255),
	@CrystalReportShellFileName varchar(50),
	@OutputFilePath varchar(255),
	@OutputFileName varchar(50),
	@SampleFilePathName varchar(255),
	@ActionOnScanning varchar(255),
	@ActionOnSend varchar(255),
	@UseMapping int,
	@IsDocument bit,
	@IsSSRS bit,
	@IsForwardingAddressRemail bit,
	@IsNoForwardingAddressRemail bit,
	@IsSendToLocating bit,
	@MailType char(1),
	@InstrumentTypeId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpDocumentType]
(
	[DocumentTypeID],
	[Name],
	[Description],
	[DocumentGroupID],
	[GroupOrder],
	[IsActive],
	[IsDisplayed],
	[BaseDocTypeID],
	[AllowOnTheFlyAdd],
	[AllowMultipleAdds],
	[DataSourceStoredProc],
	[DocumentOutputTypeID],
	[CrystalReportShellFilePath],
	[CrystalReportShellFileName],
	[OutputFilePath],
	[OutputFileName],
	[SampleFilePathName],
	[ActionOnScanning],
	[ActionOnSend],
	[UseMapping],
	[IsDocument],
	[IsSSRS],
	[IsForwardingAddressRemail],
	[IsNoForwardingAddressRemail],
	[IsSendToLocating],
	[MailType],
	[InstrumentTypeId]
)
VALUES
(
	@DocumentTypeID,
	@Name,
	@Description,
	@DocumentGroupID,
	@GroupOrder,
	@IsActive,
	@IsDisplayed,
	@BaseDocTypeID,
	@AllowOnTheFlyAdd,
	@AllowMultipleAdds,
	@DataSourceStoredProc,
	ISNULL(@DocumentOutputTypeID, ((0))),
	@CrystalReportShellFilePath,
	@CrystalReportShellFileName,
	@OutputFilePath,
	@OutputFileName,
	@SampleFilePathName,
	@ActionOnScanning,
	@ActionOnSend,
	@UseMapping,
	@IsDocument,
	@IsSSRS,
	@IsForwardingAddressRemail,
	@IsNoForwardingAddressRemail,
	@IsSendToLocating,
	@MailType,
	@InstrumentTypeId
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpDocumentType'
-- Gets: @DocumentTypeID int
-- Gets: @Name varchar(255)
-- Gets: @Description varchar(255)
-- Gets: @DocumentGroupID int
-- Gets: @GroupOrder int
-- Gets: @IsActive bit
-- Gets: @IsDisplayed bit
-- Gets: @BaseDocTypeID int
-- Gets: @AllowOnTheFlyAdd bit
-- Gets: @AllowMultipleAdds bit
-- Gets: @DataSourceStoredProc varchar(50)
-- Gets: @DocumentOutputTypeID int
-- Gets: @CrystalReportShellFilePath varchar(255)
-- Gets: @CrystalReportShellFileName varchar(50)
-- Gets: @OutputFilePath varchar(255)
-- Gets: @OutputFileName varchar(50)
-- Gets: @SampleFilePathName varchar(255)
-- Gets: @ActionOnScanning varchar(255)
-- Gets: @ActionOnSend varchar(255)
-- Gets: @UseMapping int
-- Gets: @IsDocument bit
-- Gets: @IsSSRS bit
-- Gets: @IsForwardingAddressRemail bit
-- Gets: @IsNoForwardingAddressRemail bit
-- Gets: @IsSendToLocating bit
-- Gets: @MailType char(1)
-- Gets: @InstrumentTypeId int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_Update]
	@DocumentTypeID int,
	@Name varchar(255),
	@Description varchar(255),
	@DocumentGroupID int,
	@GroupOrder int,
	@IsActive bit,
	@IsDisplayed bit,
	@BaseDocTypeID int,
	@AllowOnTheFlyAdd bit,
	@AllowMultipleAdds bit,
	@DataSourceStoredProc varchar(50),
	@DocumentOutputTypeID int,
	@CrystalReportShellFilePath varchar(255),
	@CrystalReportShellFileName varchar(50),
	@OutputFilePath varchar(255),
	@OutputFileName varchar(50),
	@SampleFilePathName varchar(255),
	@ActionOnScanning varchar(255),
	@ActionOnSend varchar(255),
	@UseMapping int,
	@IsDocument bit,
	@IsSSRS bit,
	@IsForwardingAddressRemail bit,
	@IsNoForwardingAddressRemail bit,
	@IsSendToLocating bit,
	@MailType char(1),
	@InstrumentTypeId int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDocumentType]
SET 
	[Name] = @Name,
	[Description] = @Description,
	[DocumentGroupID] = @DocumentGroupID,
	[GroupOrder] = @GroupOrder,
	[IsActive] = @IsActive,
	[IsDisplayed] = @IsDisplayed,
	[BaseDocTypeID] = @BaseDocTypeID,
	[AllowOnTheFlyAdd] = @AllowOnTheFlyAdd,
	[AllowMultipleAdds] = @AllowMultipleAdds,
	[DataSourceStoredProc] = @DataSourceStoredProc,
	[DocumentOutputTypeID] = @DocumentOutputTypeID,
	[CrystalReportShellFilePath] = @CrystalReportShellFilePath,
	[CrystalReportShellFileName] = @CrystalReportShellFileName,
	[OutputFilePath] = @OutputFilePath,
	[OutputFileName] = @OutputFileName,
	[SampleFilePathName] = @SampleFilePathName,
	[ActionOnScanning] = @ActionOnScanning,
	[ActionOnSend] = @ActionOnSend,
	[UseMapping] = @UseMapping,
	[IsDocument] = @IsDocument,
	[IsSSRS] = @IsSSRS,
	[IsForwardingAddressRemail] = @IsForwardingAddressRemail,
	[IsNoForwardingAddressRemail] = @IsNoForwardingAddressRemail,
	[IsSendToLocating] = @IsSendToLocating,
	[MailType] = @MailType,
	[InstrumentTypeId] = @InstrumentTypeId
WHERE
	[DocumentTypeID] = @DocumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [DocumentOutputTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_UpdateAllWDocumentOutputTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_UpdateAllWDocumentOutputTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpDocumentType'.
-- Will reset field [DocumentOutputTypeID] with value @DocumentOutputTypeIDOld  to value @DocumentOutputTypeID
-- Gets: @DocumentOutputTypeID int
-- Gets: @DocumentOutputTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_UpdateAllWDocumentOutputTypeIDLogic]
	@DocumentOutputTypeID int,
	@DocumentOutputTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpDocumentType]
SET
	[DocumentOutputTypeID] = @DocumentOutputTypeID
WHERE
	[DocumentOutputTypeID] = @DocumentOutputTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpDocumentType'
-- using the Primary Key. 
-- Gets: @DocumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_Delete]
	@DocumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpDocumentType]
WHERE
	[DocumentTypeID] = @DocumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpDocumentType'
-- based on the Primary Key.
-- Gets: @DocumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_SelectOne]
	@DocumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[DocumentTypeID],
	[Name],
	[Description],
	[DocumentGroupID],
	[GroupOrder],
	[IsActive],
	[IsDisplayed],
	[BaseDocTypeID],
	[AllowOnTheFlyAdd],
	[AllowMultipleAdds],
	[DataSourceStoredProc],
	[DocumentOutputTypeID],
	[CrystalReportShellFilePath],
	[CrystalReportShellFileName],
	[OutputFilePath],
	[OutputFileName],
	[SampleFilePathName],
	[ActionOnScanning],
	[ActionOnSend],
	[UseMapping],
	[IsDocument],
	[IsSSRS],
	[IsForwardingAddressRemail],
	[IsNoForwardingAddressRemail],
	[IsSendToLocating],
	[MailType],
	[InstrumentTypeId]
FROM [dbo].[tlkpDocumentType]
WHERE
	[DocumentTypeID] = @DocumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpDocumentType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[DocumentTypeID],
	[Name],
	[Description],
	[DocumentGroupID],
	[GroupOrder],
	[IsActive],
	[IsDisplayed],
	[BaseDocTypeID],
	[AllowOnTheFlyAdd],
	[AllowMultipleAdds],
	[DataSourceStoredProc],
	[DocumentOutputTypeID],
	[CrystalReportShellFilePath],
	[CrystalReportShellFileName],
	[OutputFilePath],
	[OutputFileName],
	[SampleFilePathName],
	[ActionOnScanning],
	[ActionOnSend],
	[UseMapping],
	[IsDocument],
	[IsSSRS],
	[IsForwardingAddressRemail],
	[IsNoForwardingAddressRemail],
	[IsSendToLocating],
	[MailType],
	[InstrumentTypeId]
FROM [dbo].[tlkpDocumentType]
ORDER BY 
	[DocumentTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [DocumentOutputTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpDocumentType_SelectAllWDocumentOutputTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpDocumentType_SelectAllWDocumentOutputTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpDocumentType'
-- based on a foreign key field.
-- Gets: @DocumentOutputTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpDocumentType_SelectAllWDocumentOutputTypeIDLogic]
	@DocumentOutputTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[DocumentTypeID],
	[Name],
	[Description],
	[DocumentGroupID],
	[GroupOrder],
	[IsActive],
	[IsDisplayed],
	[BaseDocTypeID],
	[AllowOnTheFlyAdd],
	[AllowMultipleAdds],
	[DataSourceStoredProc],
	[DocumentOutputTypeID],
	[CrystalReportShellFilePath],
	[CrystalReportShellFileName],
	[OutputFilePath],
	[OutputFileName],
	[SampleFilePathName],
	[ActionOnScanning],
	[ActionOnSend],
	[UseMapping],
	[IsDocument],
	[IsSSRS],
	[IsForwardingAddressRemail],
	[IsNoForwardingAddressRemail],
	[IsSendToLocating],
	[MailType],
	[InstrumentTypeId]
FROM [dbo].[tlkpDocumentType]
WHERE
	[DocumentOutputTypeID] = @DocumentOutputTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpDocumentType]

GO

-- [Stored Procedures generated for table:  tlkpEmailType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEmailType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEmailType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpEmailType'
-- Gets: @EmailTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEmailType_Insert]
	@EmailTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpEmailType]
(
	[EmailTypeID],
	[Description],
	[Rank]
)
VALUES
(
	@EmailTypeID,
	@Description,
	@Rank
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEmailType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEmailType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpEmailType'
-- Gets: @EmailTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEmailType_Update]
	@EmailTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpEmailType]
SET 
	[Description] = @Description,
	[Rank] = @Rank
WHERE
	[EmailTypeID] = @EmailTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEmailType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEmailType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpEmailType'
-- using the Primary Key. 
-- Gets: @EmailTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEmailType_Delete]
	@EmailTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpEmailType]
WHERE
	[EmailTypeID] = @EmailTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEmailType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEmailType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpEmailType'
-- based on the Primary Key.
-- Gets: @EmailTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEmailType_SelectOne]
	@EmailTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[EmailTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpEmailType]
WHERE
	[EmailTypeID] = @EmailTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEmailType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEmailType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpEmailType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEmailType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[EmailTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpEmailType]
ORDER BY 
	[EmailTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpEmailType]

GO

-- [Stored Procedures generated for table:  tlkpEntityType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEntityType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEntityType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpEntityType'
-- Gets: @EntityTypeID int
-- Gets: @Description varchar(50)
-- Gets: @IsActive bit
-- Gets: @EntityAsSample bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEntityType_Insert]
	@EntityTypeID int,
	@Description varchar(50),
	@IsActive bit,
	@EntityAsSample bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpEntityType]
(
	[EntityTypeID],
	[Description],
	[IsActive],
	[EntityAsSample]
)
VALUES
(
	@EntityTypeID,
	@Description,
	@IsActive,
	@EntityAsSample
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpEntityType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpEntityType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpEntityType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpEntityType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[EntityTypeID],
	[Description],
	[IsActive],
	[EntityAsSample]
FROM [dbo].[tlkpEntityType]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpEntityType]

GO

-- [Stored Procedures generated for table:  tlkpGender]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpGender_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpGender_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpGender'
-- Gets: @Gender varchar(50)
-- Returns: @GenderID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpGender_Insert]
	@Gender varchar(50),
	@GenderID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpGender]
(
	[Gender]
)
VALUES
(
	@Gender
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @GenderID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpGender_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpGender_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpGender'
-- Gets: @GenderID int
-- Gets: @Gender varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpGender_Update]
	@GenderID int,
	@Gender varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpGender]
SET 
	[Gender] = @Gender
WHERE
	[GenderID] = @GenderID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpGender_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpGender_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpGender'
-- using the Primary Key. 
-- Gets: @GenderID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpGender_Delete]
	@GenderID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpGender]
WHERE
	[GenderID] = @GenderID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpGender_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpGender_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpGender'
-- based on the Primary Key.
-- Gets: @GenderID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpGender_SelectOne]
	@GenderID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[GenderID],
	[Gender]
FROM [dbo].[tlkpGender]
WHERE
	[GenderID] = @GenderID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpGender_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpGender_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpGender'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpGender_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[GenderID],
	[Gender]
FROM [dbo].[tlkpGender]
ORDER BY 
	[GenderID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpGender]

GO

-- [Stored Procedures generated for table:  tlkpInstrumentType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInstrumentType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInstrumentType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInstrumentType'
-- Gets: @Description varchar(100)
-- Gets: @EntityTypeID int
-- Gets: @IsCATI bit
-- Gets: @IsCAPI bit
-- Gets: @IsCAWI bit
-- Gets: @IsHardcopy bit
-- Gets: @IsConsentForm bit
-- Gets: @IsPrimaryFieldInstrument bit
-- Gets: @DataEntryProgramID varchar(50)
-- Gets: @MaxBatchSize int
-- Gets: @DataEntryProgramName varchar(50)
-- Gets: @IsAudioVisual bit
-- Gets: @ShowInBatching bit
-- Gets: @Round int
-- Gets: @BlaisePath nvarchar(250)
-- Gets: @IsSRDEE bit
-- Gets: @IsSRDEELock bit
-- Gets: @IsSRDEELongitudinal bit
-- Gets: @SRDEEViewLongitudinal varchar(50)
-- Gets: @SurveyID varchar(20)
-- Returns: @InstrumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInstrumentType_Insert]
	@Description varchar(100),
	@EntityTypeID int,
	@IsCATI bit,
	@IsCAPI bit,
	@IsCAWI bit,
	@IsHardcopy bit,
	@IsConsentForm bit,
	@IsPrimaryFieldInstrument bit,
	@DataEntryProgramID varchar(50),
	@MaxBatchSize int,
	@DataEntryProgramName varchar(50),
	@IsAudioVisual bit,
	@ShowInBatching bit,
	@Round int,
	@BlaisePath nvarchar(250),
	@IsSRDEE bit,
	@IsSRDEELock bit,
	@IsSRDEELongitudinal bit,
	@SRDEEViewLongitudinal varchar(50),
	@SurveyID varchar(20),
	@InstrumentTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInstrumentType]
(
	[Description],
	[EntityTypeID],
	[IsCATI],
	[IsCAPI],
	[IsCAWI],
	[IsHardcopy],
	[IsConsentForm],
	[IsPrimaryFieldInstrument],
	[DataEntryProgramID],
	[MaxBatchSize],
	[DataEntryProgramName],
	[IsAudioVisual],
	[ShowInBatching],
	[Round],
	[BlaisePath],
	[IsSRDEE],
	[IsSRDEELock],
	[IsSRDEELongitudinal],
	[SRDEEViewLongitudinal],
	[SurveyID]
)
VALUES
(
	@Description,
	@EntityTypeID,
	@IsCATI,
	@IsCAPI,
	@IsCAWI,
	@IsHardcopy,
	@IsConsentForm,
	@IsPrimaryFieldInstrument,
	@DataEntryProgramID,
	@MaxBatchSize,
	@DataEntryProgramName,
	@IsAudioVisual,
	@ShowInBatching,
	@Round,
	@BlaisePath,
	@IsSRDEE,
	@IsSRDEELock,
	@IsSRDEELongitudinal,
	@SRDEEViewLongitudinal,
	@SurveyID
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InstrumentTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInstrumentType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInstrumentType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInstrumentType'
-- Gets: @InstrumentTypeID int
-- Gets: @Description varchar(100)
-- Gets: @EntityTypeID int
-- Gets: @IsCATI bit
-- Gets: @IsCAPI bit
-- Gets: @IsCAWI bit
-- Gets: @IsHardcopy bit
-- Gets: @IsConsentForm bit
-- Gets: @IsPrimaryFieldInstrument bit
-- Gets: @DataEntryProgramID varchar(50)
-- Gets: @MaxBatchSize int
-- Gets: @DataEntryProgramName varchar(50)
-- Gets: @IsAudioVisual bit
-- Gets: @ShowInBatching bit
-- Gets: @Round int
-- Gets: @BlaisePath nvarchar(250)
-- Gets: @IsSRDEE bit
-- Gets: @IsSRDEELock bit
-- Gets: @IsSRDEELongitudinal bit
-- Gets: @SRDEEViewLongitudinal varchar(50)
-- Gets: @SurveyID varchar(20)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInstrumentType_Update]
	@InstrumentTypeID int,
	@Description varchar(100),
	@EntityTypeID int,
	@IsCATI bit,
	@IsCAPI bit,
	@IsCAWI bit,
	@IsHardcopy bit,
	@IsConsentForm bit,
	@IsPrimaryFieldInstrument bit,
	@DataEntryProgramID varchar(50),
	@MaxBatchSize int,
	@DataEntryProgramName varchar(50),
	@IsAudioVisual bit,
	@ShowInBatching bit,
	@Round int,
	@BlaisePath nvarchar(250),
	@IsSRDEE bit,
	@IsSRDEELock bit,
	@IsSRDEELongitudinal bit,
	@SRDEEViewLongitudinal varchar(50),
	@SurveyID varchar(20),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInstrumentType]
SET 
	[Description] = @Description,
	[EntityTypeID] = @EntityTypeID,
	[IsCATI] = @IsCATI,
	[IsCAPI] = @IsCAPI,
	[IsCAWI] = @IsCAWI,
	[IsHardcopy] = @IsHardcopy,
	[IsConsentForm] = @IsConsentForm,
	[IsPrimaryFieldInstrument] = @IsPrimaryFieldInstrument,
	[DataEntryProgramID] = @DataEntryProgramID,
	[MaxBatchSize] = @MaxBatchSize,
	[DataEntryProgramName] = @DataEntryProgramName,
	[IsAudioVisual] = @IsAudioVisual,
	[ShowInBatching] = @ShowInBatching,
	[Round] = @Round,
	[BlaisePath] = @BlaisePath,
	[IsSRDEE] = @IsSRDEE,
	[IsSRDEELock] = @IsSRDEELock,
	[IsSRDEELongitudinal] = @IsSRDEELongitudinal,
	[SRDEEViewLongitudinal] = @SRDEEViewLongitudinal,
	[SurveyID] = @SurveyID
WHERE
	[InstrumentTypeID] = @InstrumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInstrumentType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInstrumentType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInstrumentType'
-- using the Primary Key. 
-- Gets: @InstrumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInstrumentType_Delete]
	@InstrumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInstrumentType]
WHERE
	[InstrumentTypeID] = @InstrumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInstrumentType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInstrumentType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInstrumentType'
-- based on the Primary Key.
-- Gets: @InstrumentTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInstrumentType_SelectOne]
	@InstrumentTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InstrumentTypeID],
	[Description],
	[EntityTypeID],
	[IsCATI],
	[IsCAPI],
	[IsCAWI],
	[IsHardcopy],
	[IsConsentForm],
	[IsPrimaryFieldInstrument],
	[DataEntryProgramID],
	[MaxBatchSize],
	[DataEntryProgramName],
	[IsAudioVisual],
	[ShowInBatching],
	[Round],
	[BlaisePath],
	[IsSRDEE],
	[IsSRDEELock],
	[IsSRDEELongitudinal],
	[SRDEEViewLongitudinal],
	[SurveyID]
FROM [dbo].[tlkpInstrumentType]
WHERE
	[InstrumentTypeID] = @InstrumentTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInstrumentType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInstrumentType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInstrumentType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInstrumentType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InstrumentTypeID],
	[Description],
	[EntityTypeID],
	[IsCATI],
	[IsCAPI],
	[IsCAWI],
	[IsHardcopy],
	[IsConsentForm],
	[IsPrimaryFieldInstrument],
	[DataEntryProgramID],
	[MaxBatchSize],
	[DataEntryProgramName],
	[IsAudioVisual],
	[ShowInBatching],
	[Round],
	[BlaisePath],
	[IsSRDEE],
	[IsSRDEELock],
	[IsSRDEELongitudinal],
	[SRDEEViewLongitudinal],
	[SurveyID]
FROM [dbo].[tlkpInstrumentType]
ORDER BY 
	[InstrumentTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInstrumentType]

GO

-- [Stored Procedures generated for table:  tlkpInterviewer]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInterviewer'
-- Gets: @TeamID int
-- Gets: @InterviewerSupervisorID int
-- Gets: @FirstName varchar(50)
-- Gets: @LastName varchar(50)
-- Gets: @UserName varchar(32)
-- Gets: @Password varchar(32)
-- Gets: @AddressLine1 varchar(40)
-- Gets: @AddressLine2 varchar(40)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @EmployeeID varchar(10)
-- Gets: @Phone1 varchar(25)
-- Gets: @Phone2 varchar(25)
-- Gets: @Email varchar(255)
-- Gets: @ApptTime varchar(10)
-- Gets: @ApptDayofWeek varchar(10)
-- Gets: @ExpectedHoursPerWeek int
-- Gets: @Status varchar(10)
-- Gets: @Description varchar(10)
-- Gets: @Rate real
-- Gets: @MileageRate real
-- Gets: @LaptopID varchar(25)
-- Gets: @LastTransmissionDate datetime
-- Gets: @JASSPersonID bigint
-- Gets: @MPRIssuedCell varchar(25)
-- Gets: @AltAddressLine1 varchar(40)
-- Gets: @AltAddressLine2 varchar(40)
-- Gets: @AltCity varchar(25)
-- Gets: @AltState varchar(2)
-- Gets: @AltPostalCode varchar(50)
-- Returns: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_Insert]
	@TeamID int,
	@InterviewerSupervisorID int,
	@FirstName varchar(50),
	@LastName varchar(50),
	@UserName varchar(32),
	@Password varchar(32),
	@AddressLine1 varchar(40),
	@AddressLine2 varchar(40),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@EmployeeID varchar(10),
	@Phone1 varchar(25),
	@Phone2 varchar(25),
	@Email varchar(255),
	@ApptTime varchar(10),
	@ApptDayofWeek varchar(10),
	@ExpectedHoursPerWeek int,
	@Status varchar(10),
	@Description varchar(10),
	@Rate real,
	@MileageRate real,
	@LaptopID varchar(25),
	@LastTransmissionDate datetime,
	@JASSPersonID bigint,
	@MPRIssuedCell varchar(25),
	@AltAddressLine1 varchar(40),
	@AltAddressLine2 varchar(40),
	@AltCity varchar(25),
	@AltState varchar(2),
	@AltPostalCode varchar(50),
	@InterviewerID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInterviewer]
(
	[TeamID],
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[AddressLine1],
	[AddressLine2],
	[City],
	[State],
	[PostalCode],
	[EmployeeID],
	[Phone1],
	[Phone2],
	[Email],
	[ApptTime],
	[ApptDayofWeek],
	[ExpectedHoursPerWeek],
	[Status],
	[Description],
	[Rate],
	[MileageRate],
	[LaptopID],
	[LastTransmissionDate],
	[JASSPersonID],
	[MPRIssuedCell],
	[AltAddressLine1],
	[AltAddressLine2],
	[AltCity],
	[AltState],
	[AltPostalCode]
)
VALUES
(
	@TeamID,
	@InterviewerSupervisorID,
	@FirstName,
	@LastName,
	@UserName,
	@Password,
	@AddressLine1,
	@AddressLine2,
	@City,
	@State,
	@PostalCode,
	@EmployeeID,
	@Phone1,
	@Phone2,
	@Email,
	@ApptTime,
	@ApptDayofWeek,
	@ExpectedHoursPerWeek,
	@Status,
	@Description,
	@Rate,
	@MileageRate,
	@LaptopID,
	@LastTransmissionDate,
	@JASSPersonID,
	@MPRIssuedCell,
	@AltAddressLine1,
	@AltAddressLine2,
	@AltCity,
	@AltState,
	@AltPostalCode
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InterviewerID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInterviewer'
-- Gets: @InterviewerID int
-- Gets: @TeamID int
-- Gets: @InterviewerSupervisorID int
-- Gets: @FirstName varchar(50)
-- Gets: @LastName varchar(50)
-- Gets: @UserName varchar(32)
-- Gets: @Password varchar(32)
-- Gets: @AddressLine1 varchar(40)
-- Gets: @AddressLine2 varchar(40)
-- Gets: @City varchar(25)
-- Gets: @State varchar(2)
-- Gets: @PostalCode varchar(50)
-- Gets: @EmployeeID varchar(10)
-- Gets: @Phone1 varchar(25)
-- Gets: @Phone2 varchar(25)
-- Gets: @Email varchar(255)
-- Gets: @ApptTime varchar(10)
-- Gets: @ApptDayofWeek varchar(10)
-- Gets: @ExpectedHoursPerWeek int
-- Gets: @Status varchar(10)
-- Gets: @Description varchar(10)
-- Gets: @Rate real
-- Gets: @MileageRate real
-- Gets: @LaptopID varchar(25)
-- Gets: @LastTransmissionDate datetime
-- Gets: @JASSPersonID bigint
-- Gets: @MPRIssuedCell varchar(25)
-- Gets: @AltAddressLine1 varchar(40)
-- Gets: @AltAddressLine2 varchar(40)
-- Gets: @AltCity varchar(25)
-- Gets: @AltState varchar(2)
-- Gets: @AltPostalCode varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_Update]
	@InterviewerID int,
	@TeamID int,
	@InterviewerSupervisorID int,
	@FirstName varchar(50),
	@LastName varchar(50),
	@UserName varchar(32),
	@Password varchar(32),
	@AddressLine1 varchar(40),
	@AddressLine2 varchar(40),
	@City varchar(25),
	@State varchar(2),
	@PostalCode varchar(50),
	@EmployeeID varchar(10),
	@Phone1 varchar(25),
	@Phone2 varchar(25),
	@Email varchar(255),
	@ApptTime varchar(10),
	@ApptDayofWeek varchar(10),
	@ExpectedHoursPerWeek int,
	@Status varchar(10),
	@Description varchar(10),
	@Rate real,
	@MileageRate real,
	@LaptopID varchar(25),
	@LastTransmissionDate datetime,
	@JASSPersonID bigint,
	@MPRIssuedCell varchar(25),
	@AltAddressLine1 varchar(40),
	@AltAddressLine2 varchar(40),
	@AltCity varchar(25),
	@AltState varchar(2),
	@AltPostalCode varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewer]
SET 
	[TeamID] = @TeamID,
	[InterviewerSupervisorID] = @InterviewerSupervisorID,
	[FirstName] = @FirstName,
	[LastName] = @LastName,
	[UserName] = @UserName,
	[Password] = @Password,
	[AddressLine1] = @AddressLine1,
	[AddressLine2] = @AddressLine2,
	[City] = @City,
	[State] = @State,
	[PostalCode] = @PostalCode,
	[EmployeeID] = @EmployeeID,
	[Phone1] = @Phone1,
	[Phone2] = @Phone2,
	[Email] = @Email,
	[ApptTime] = @ApptTime,
	[ApptDayofWeek] = @ApptDayofWeek,
	[ExpectedHoursPerWeek] = @ExpectedHoursPerWeek,
	[Status] = @Status,
	[Description] = @Description,
	[Rate] = @Rate,
	[MileageRate] = @MileageRate,
	[LaptopID] = @LaptopID,
	[LastTransmissionDate] = @LastTransmissionDate,
	[JASSPersonID] = @JASSPersonID,
	[MPRIssuedCell] = @MPRIssuedCell,
	[AltAddressLine1] = @AltAddressLine1,
	[AltAddressLine2] = @AltAddressLine2,
	[AltCity] = @AltCity,
	[AltState] = @AltState,
	[AltPostalCode] = @AltPostalCode
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [TeamID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_UpdateAllWTeamIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_UpdateAllWTeamIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpInterviewer'.
-- Will reset field [TeamID] with value @TeamIDOld  to value @TeamID
-- Gets: @TeamID int
-- Gets: @TeamIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_UpdateAllWTeamIDLogic]
	@TeamID int,
	@TeamIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewer]
SET
	[TeamID] = @TeamID
WHERE
	[TeamID] = @TeamIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerSupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_UpdateAllWInterviewerSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_UpdateAllWInterviewerSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpInterviewer'.
-- Will reset field [InterviewerSupervisorID] with value @InterviewerSupervisorIDOld  to value @InterviewerSupervisorID
-- Gets: @InterviewerSupervisorID int
-- Gets: @InterviewerSupervisorIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_UpdateAllWInterviewerSupervisorIDLogic]
	@InterviewerSupervisorID int,
	@InterviewerSupervisorIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewer]
SET
	[InterviewerSupervisorID] = @InterviewerSupervisorID
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInterviewer'
-- using the Primary Key. 
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_Delete]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInterviewer]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInterviewer'
-- based on the Primary Key.
-- Gets: @InterviewerID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_SelectOne]
	@InterviewerID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerID],
	[TeamID],
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[AddressLine1],
	[AddressLine2],
	[City],
	[State],
	[PostalCode],
	[EmployeeID],
	[Phone1],
	[Phone2],
	[Email],
	[ApptTime],
	[ApptDayofWeek],
	[ExpectedHoursPerWeek],
	[Status],
	[Description],
	[Rate],
	[MileageRate],
	[LaptopID],
	[LastTransmissionDate],
	[JASSPersonID],
	[MPRIssuedCell],
	[AltAddressLine1],
	[AltAddressLine2],
	[AltCity],
	[AltState],
	[AltPostalCode]
FROM [dbo].[tlkpInterviewer]
WHERE
	[InterviewerID] = @InterviewerID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInterviewer'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InterviewerID],
	[TeamID],
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[AddressLine1],
	[AddressLine2],
	[City],
	[State],
	[PostalCode],
	[EmployeeID],
	[Phone1],
	[Phone2],
	[Email],
	[ApptTime],
	[ApptDayofWeek],
	[ExpectedHoursPerWeek],
	[Status],
	[Description],
	[Rate],
	[MileageRate],
	[LaptopID],
	[LastTransmissionDate],
	[JASSPersonID],
	[MPRIssuedCell],
	[AltAddressLine1],
	[AltAddressLine2],
	[AltCity],
	[AltState],
	[AltPostalCode]
FROM [dbo].[tlkpInterviewer]
ORDER BY 
	[InterviewerID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [TeamID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_SelectAllWTeamIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_SelectAllWTeamIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpInterviewer'
-- based on a foreign key field.
-- Gets: @TeamID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_SelectAllWTeamIDLogic]
	@TeamID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerID],
	[TeamID],
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[AddressLine1],
	[AddressLine2],
	[City],
	[State],
	[PostalCode],
	[EmployeeID],
	[Phone1],
	[Phone2],
	[Email],
	[ApptTime],
	[ApptDayofWeek],
	[ExpectedHoursPerWeek],
	[Status],
	[Description],
	[Rate],
	[MileageRate],
	[LaptopID],
	[LastTransmissionDate],
	[JASSPersonID],
	[MPRIssuedCell],
	[AltAddressLine1],
	[AltAddressLine2],
	[AltCity],
	[AltState],
	[AltPostalCode]
FROM [dbo].[tlkpInterviewer]
WHERE
	[TeamID] = @TeamID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerSupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewer_SelectAllWInterviewerSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewer_SelectAllWInterviewerSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpInterviewer'
-- based on a foreign key field.
-- Gets: @InterviewerSupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewer_SelectAllWInterviewerSupervisorIDLogic]
	@InterviewerSupervisorID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerID],
	[TeamID],
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[AddressLine1],
	[AddressLine2],
	[City],
	[State],
	[PostalCode],
	[EmployeeID],
	[Phone1],
	[Phone2],
	[Email],
	[ApptTime],
	[ApptDayofWeek],
	[ExpectedHoursPerWeek],
	[Status],
	[Description],
	[Rate],
	[MileageRate],
	[LaptopID],
	[LastTransmissionDate],
	[JASSPersonID],
	[MPRIssuedCell],
	[AltAddressLine1],
	[AltAddressLine2],
	[AltCity],
	[AltState],
	[AltPostalCode]
FROM [dbo].[tlkpInterviewer]
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInterviewer]

GO

-- [Stored Procedures generated for table:  tlkpInterviewerRegion]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerRegion_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerRegion_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInterviewerRegion'
-- Gets: @Name varchar(50)
-- Returns: @InterviewerRegionID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerRegion_Insert]
	@Name varchar(50),
	@InterviewerRegionID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInterviewerRegion]
(
	[Name]
)
VALUES
(
	@Name
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InterviewerRegionID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerRegion_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerRegion_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInterviewerRegion'
-- Gets: @InterviewerRegionID int
-- Gets: @Name varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerRegion_Update]
	@InterviewerRegionID int,
	@Name varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewerRegion]
SET 
	[Name] = @Name
WHERE
	[InterviewerRegionID] = @InterviewerRegionID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerRegion_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerRegion_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInterviewerRegion'
-- using the Primary Key. 
-- Gets: @InterviewerRegionID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerRegion_Delete]
	@InterviewerRegionID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInterviewerRegion]
WHERE
	[InterviewerRegionID] = @InterviewerRegionID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerRegion_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerRegion_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInterviewerRegion'
-- based on the Primary Key.
-- Gets: @InterviewerRegionID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerRegion_SelectOne]
	@InterviewerRegionID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerRegionID],
	[Name]
FROM [dbo].[tlkpInterviewerRegion]
WHERE
	[InterviewerRegionID] = @InterviewerRegionID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerRegion_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerRegion_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInterviewerRegion'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerRegion_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InterviewerRegionID],
	[Name]
FROM [dbo].[tlkpInterviewerRegion]
ORDER BY 
	[InterviewerRegionID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInterviewerRegion]

GO

-- [Stored Procedures generated for table:  tlkpInterviewerSupervisor]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInterviewerSupervisor'
-- Gets: @FirstName nvarchar(50)
-- Gets: @LastName nvarchar(50)
-- Gets: @UserName nvarchar(32)
-- Gets: @Password nvarchar(32)
-- Gets: @InterviewerRegionID int
-- Gets: @Region int
-- Gets: @EmployeeID varchar(10)
-- Returns: @InterviewerSupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_Insert]
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@UserName nvarchar(32),
	@Password nvarchar(32),
	@InterviewerRegionID int,
	@Region int,
	@EmployeeID varchar(10),
	@InterviewerSupervisorID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInterviewerSupervisor]
(
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[InterviewerRegionID],
	[Region],
	[EmployeeID]
)
VALUES
(
	@FirstName,
	@LastName,
	@UserName,
	@Password,
	@InterviewerRegionID,
	@Region,
	@EmployeeID
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @InterviewerSupervisorID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInterviewerSupervisor'
-- Gets: @InterviewerSupervisorID int
-- Gets: @FirstName nvarchar(50)
-- Gets: @LastName nvarchar(50)
-- Gets: @UserName nvarchar(32)
-- Gets: @Password nvarchar(32)
-- Gets: @InterviewerRegionID int
-- Gets: @Region int
-- Gets: @EmployeeID varchar(10)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_Update]
	@InterviewerSupervisorID int,
	@FirstName nvarchar(50),
	@LastName nvarchar(50),
	@UserName nvarchar(32),
	@Password nvarchar(32),
	@InterviewerRegionID int,
	@Region int,
	@EmployeeID varchar(10),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewerSupervisor]
SET 
	[FirstName] = @FirstName,
	[LastName] = @LastName,
	[UserName] = @UserName,
	[Password] = @Password,
	[InterviewerRegionID] = @InterviewerRegionID,
	[Region] = @Region,
	[EmployeeID] = @EmployeeID
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [InterviewerRegionID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_UpdateAllWInterviewerRegionIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_UpdateAllWInterviewerRegionIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpInterviewerSupervisor'.
-- Will reset field [InterviewerRegionID] with value @InterviewerRegionIDOld  to value @InterviewerRegionID
-- Gets: @InterviewerRegionID int
-- Gets: @InterviewerRegionIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_UpdateAllWInterviewerRegionIDLogic]
	@InterviewerRegionID int,
	@InterviewerRegionIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewerSupervisor]
SET
	[InterviewerRegionID] = @InterviewerRegionID
WHERE
	[InterviewerRegionID] = @InterviewerRegionIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInterviewerSupervisor'
-- using the Primary Key. 
-- Gets: @InterviewerSupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_Delete]
	@InterviewerSupervisorID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInterviewerSupervisor]
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInterviewerSupervisor'
-- based on the Primary Key.
-- Gets: @InterviewerSupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_SelectOne]
	@InterviewerSupervisorID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[InterviewerRegionID],
	[Region],
	[EmployeeID]
FROM [dbo].[tlkpInterviewerSupervisor]
WHERE
	[InterviewerSupervisorID] = @InterviewerSupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInterviewerSupervisor'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[InterviewerRegionID],
	[Region],
	[EmployeeID]
FROM [dbo].[tlkpInterviewerSupervisor]
ORDER BY 
	[InterviewerSupervisorID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [InterviewerRegionID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerSupervisor_SelectAllWInterviewerRegionIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerSupervisor_SelectAllWInterviewerRegionIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpInterviewerSupervisor'
-- based on a foreign key field.
-- Gets: @InterviewerRegionID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerSupervisor_SelectAllWInterviewerRegionIDLogic]
	@InterviewerRegionID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[InterviewerSupervisorID],
	[FirstName],
	[LastName],
	[UserName],
	[Password],
	[InterviewerRegionID],
	[Region],
	[EmployeeID]
FROM [dbo].[tlkpInterviewerSupervisor]
WHERE
	[InterviewerRegionID] = @InterviewerRegionID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInterviewerSupervisor]

GO

-- [Stored Procedures generated for table:  tlkpInterviewerTeam]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInterviewerTeam'
-- Gets: @TeamName varchar(50)
-- Gets: @SupervisorID int
-- Gets: @IsActive bit
-- Returns: @TeamID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_Insert]
	@TeamName varchar(50),
	@SupervisorID int,
	@IsActive bit,
	@TeamID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInterviewerTeam]
(
	[TeamName],
	[SupervisorID],
	[IsActive]
)
VALUES
(
	@TeamName,
	@SupervisorID,
	@IsActive
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @TeamID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInterviewerTeam'
-- Gets: @TeamID int
-- Gets: @TeamName varchar(50)
-- Gets: @SupervisorID int
-- Gets: @IsActive bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_Update]
	@TeamID int,
	@TeamName varchar(50),
	@SupervisorID int,
	@IsActive bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewerTeam]
SET 
	[TeamName] = @TeamName,
	[SupervisorID] = @SupervisorID,
	[IsActive] = @IsActive
WHERE
	[TeamID] = @TeamID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [SupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_UpdateAllWSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_UpdateAllWSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpInterviewerTeam'.
-- Will reset field [SupervisorID] with value @SupervisorIDOld  to value @SupervisorID
-- Gets: @SupervisorID int
-- Gets: @SupervisorIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_UpdateAllWSupervisorIDLogic]
	@SupervisorID int,
	@SupervisorIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewerTeam]
SET
	[SupervisorID] = @SupervisorID
WHERE
	[SupervisorID] = @SupervisorIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInterviewerTeam'
-- using the Primary Key. 
-- Gets: @TeamID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_Delete]
	@TeamID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInterviewerTeam]
WHERE
	[TeamID] = @TeamID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInterviewerTeam'
-- based on the Primary Key.
-- Gets: @TeamID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_SelectOne]
	@TeamID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[TeamID],
	[TeamName],
	[SupervisorID],
	[IsActive]
FROM [dbo].[tlkpInterviewerTeam]
WHERE
	[TeamID] = @TeamID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInterviewerTeam'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[TeamID],
	[TeamName],
	[SupervisorID],
	[IsActive]
FROM [dbo].[tlkpInterviewerTeam]
ORDER BY 
	[TeamID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [SupervisorID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewerTeam_SelectAllWSupervisorIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewerTeam_SelectAllWSupervisorIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpInterviewerTeam'
-- based on a foreign key field.
-- Gets: @SupervisorID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewerTeam_SelectAllWSupervisorIDLogic]
	@SupervisorID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[TeamID],
	[TeamName],
	[SupervisorID],
	[IsActive]
FROM [dbo].[tlkpInterviewerTeam]
WHERE
	[SupervisorID] = @SupervisorID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInterviewerTeam]

GO

-- [Stored Procedures generated for table:  tlkpInterviewWeek]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewWeek_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewWeek_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpInterviewWeek'
-- Gets: @WeekBeg datetime
-- Gets: @WeekEnd datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewWeek_Insert]
	@WeekBeg datetime,
	@WeekEnd datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpInterviewWeek]
(
	[WeekBeg],
	[WeekEnd]
)
VALUES
(
	@WeekBeg,
	@WeekEnd
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewWeek_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewWeek_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpInterviewWeek'
-- Gets: @WeekBeg datetime
-- Gets: @WeekEnd datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewWeek_Update]
	@WeekBeg datetime,
	@WeekEnd datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpInterviewWeek]
SET 
	[WeekEnd] = @WeekEnd
WHERE
	[WeekBeg] = @WeekBeg
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewWeek_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewWeek_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpInterviewWeek'
-- using the Primary Key. 
-- Gets: @WeekBeg datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewWeek_Delete]
	@WeekBeg datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpInterviewWeek]
WHERE
	[WeekBeg] = @WeekBeg
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewWeek_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewWeek_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpInterviewWeek'
-- based on the Primary Key.
-- Gets: @WeekBeg datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewWeek_SelectOne]
	@WeekBeg datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[WeekBeg],
	[WeekEnd]
FROM [dbo].[tlkpInterviewWeek]
WHERE
	[WeekBeg] = @WeekBeg
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpInterviewWeek_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpInterviewWeek_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpInterviewWeek'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpInterviewWeek_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[WeekBeg],
	[WeekEnd]
FROM [dbo].[tlkpInterviewWeek]
ORDER BY 
	[WeekBeg] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpInterviewWeek]

GO

-- [Stored Procedures generated for table:  tlkpLanguageType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLanguageType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLanguageType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpLanguageType'
-- Gets: @Description varchar(50)
-- Returns: @LanguageTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLanguageType_Insert]
	@Description varchar(50),
	@LanguageTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpLanguageType]
(
	[Description]
)
VALUES
(
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LanguageTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLanguageType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLanguageType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpLanguageType'
-- Gets: @LanguageTypeID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLanguageType_Update]
	@LanguageTypeID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpLanguageType]
SET 
	[Description] = @Description
WHERE
	[LanguageTypeID] = @LanguageTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLanguageType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLanguageType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpLanguageType'
-- using the Primary Key. 
-- Gets: @LanguageTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLanguageType_Delete]
	@LanguageTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpLanguageType]
WHERE
	[LanguageTypeID] = @LanguageTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLanguageType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLanguageType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpLanguageType'
-- based on the Primary Key.
-- Gets: @LanguageTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLanguageType_SelectOne]
	@LanguageTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LanguageTypeID],
	[Description]
FROM [dbo].[tlkpLanguageType]
WHERE
	[LanguageTypeID] = @LanguageTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLanguageType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLanguageType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpLanguageType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLanguageType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LanguageTypeID],
	[Description]
FROM [dbo].[tlkpLanguageType]
ORDER BY 
	[LanguageTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpLanguageType]

GO

-- [Stored Procedures generated for table:  tlkpLocatedPhoneSettings]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatedPhoneSettings_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatedPhoneSettings_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpLocatedPhoneSettings'
-- Gets: @ID int
-- Gets: @ConfirmitVariable varchar(128)
-- Gets: @SMSVariable varchar(128)
-- Gets: @ConfirmitVarHasSuffix bit
-- Gets: @StaticValue varchar(10)
-- Gets: @Notes varchar(255)
-- Gets: @InRespondent bit
-- Gets: @InResponse bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatedPhoneSettings_Insert]
	@ID int,
	@ConfirmitVariable varchar(128),
	@SMSVariable varchar(128),
	@ConfirmitVarHasSuffix bit,
	@StaticValue varchar(10),
	@Notes varchar(255),
	@InRespondent bit,
	@InResponse bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpLocatedPhoneSettings]
(
	[ID],
	[ConfirmitVariable],
	[SMSVariable],
	[ConfirmitVarHasSuffix],
	[StaticValue],
	[Notes],
	[InRespondent],
	[InResponse]
)
VALUES
(
	@ID,
	@ConfirmitVariable,
	@SMSVariable,
	@ConfirmitVarHasSuffix,
	@StaticValue,
	@Notes,
	@InRespondent,
	@InResponse
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatedPhoneSettings_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatedPhoneSettings_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpLocatedPhoneSettings'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatedPhoneSettings_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ID],
	[ConfirmitVariable],
	[SMSVariable],
	[ConfirmitVarHasSuffix],
	[StaticValue],
	[Notes],
	[InRespondent],
	[InResponse]
FROM [dbo].[tlkpLocatedPhoneSettings]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpLocatedPhoneSettings]

GO

-- [Stored Procedures generated for table:  tlkpLocatingAttemptResult]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptResult_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptResult_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpLocatingAttemptResult'
-- Gets: @LocatingAttemptResult varchar(100)
-- Gets: @AppliesTo varchar(1)
-- Gets: @AssociatedStatus varchar(4)
-- Gets: @SortOrder int
-- Gets: @FieldAppliesTo varchar(2)
-- Gets: @IsForAutoAddedAttempt bit
-- Gets: @IsForMemberAddress bit
-- Gets: @IsForMemberPhone bit
-- Gets: @IsForMemNeighbor bit
-- Gets: @IsForAddressService bit
-- Gets: @IsForSchool bit
-- Gets: @IsForCenter bit
-- Gets: @IsForChildCareCenter bit
-- Gets: @IsForInstitution bit
-- Gets: @IsAppointment bit
-- Gets: @IsBarrier bit
-- Returns: @LocatingAttemptResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptResult_Insert]
	@LocatingAttemptResult varchar(100),
	@AppliesTo varchar(1),
	@AssociatedStatus varchar(4),
	@SortOrder int,
	@FieldAppliesTo varchar(2),
	@IsForAutoAddedAttempt bit,
	@IsForMemberAddress bit,
	@IsForMemberPhone bit,
	@IsForMemNeighbor bit,
	@IsForAddressService bit,
	@IsForSchool bit,
	@IsForCenter bit,
	@IsForChildCareCenter bit,
	@IsForInstitution bit,
	@IsAppointment bit,
	@IsBarrier bit,
	@LocatingAttemptResultID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpLocatingAttemptResult]
(
	[LocatingAttemptResult],
	[AppliesTo],
	[AssociatedStatus],
	[SortOrder],
	[FieldAppliesTo],
	[IsForAutoAddedAttempt],
	[IsForMemberAddress],
	[IsForMemberPhone],
	[IsForMemNeighbor],
	[IsForAddressService],
	[IsForSchool],
	[IsForCenter],
	[IsForChildCareCenter],
	[IsForInstitution],
	[IsAppointment],
	[IsBarrier]
)
VALUES
(
	@LocatingAttemptResult,
	@AppliesTo,
	@AssociatedStatus,
	@SortOrder,
	@FieldAppliesTo,
	ISNULL(@IsForAutoAddedAttempt, ((0))),
	ISNULL(@IsForMemberAddress, ((1))),
	ISNULL(@IsForMemberPhone, ((0))),
	ISNULL(@IsForMemNeighbor, ((1))),
	ISNULL(@IsForAddressService, ((0))),
	ISNULL(@IsForSchool, ((0))),
	ISNULL(@IsForCenter, ((0))),
	ISNULL(@IsForChildCareCenter, ((0))),
	ISNULL(@IsForInstitution, ((1))),
	ISNULL(@IsAppointment, ((0))),
	ISNULL(@IsBarrier, ((0)))
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @LocatingAttemptResultID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptResult_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptResult_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpLocatingAttemptResult'
-- Gets: @LocatingAttemptResultID int
-- Gets: @LocatingAttemptResult varchar(100)
-- Gets: @AppliesTo varchar(1)
-- Gets: @AssociatedStatus varchar(4)
-- Gets: @SortOrder int
-- Gets: @FieldAppliesTo varchar(2)
-- Gets: @IsForAutoAddedAttempt bit
-- Gets: @IsForMemberAddress bit
-- Gets: @IsForMemberPhone bit
-- Gets: @IsForMemNeighbor bit
-- Gets: @IsForAddressService bit
-- Gets: @IsForSchool bit
-- Gets: @IsForCenter bit
-- Gets: @IsForChildCareCenter bit
-- Gets: @IsForInstitution bit
-- Gets: @IsAppointment bit
-- Gets: @IsBarrier bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptResult_Update]
	@LocatingAttemptResultID int,
	@LocatingAttemptResult varchar(100),
	@AppliesTo varchar(1),
	@AssociatedStatus varchar(4),
	@SortOrder int,
	@FieldAppliesTo varchar(2),
	@IsForAutoAddedAttempt bit,
	@IsForMemberAddress bit,
	@IsForMemberPhone bit,
	@IsForMemNeighbor bit,
	@IsForAddressService bit,
	@IsForSchool bit,
	@IsForCenter bit,
	@IsForChildCareCenter bit,
	@IsForInstitution bit,
	@IsAppointment bit,
	@IsBarrier bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpLocatingAttemptResult]
SET 
	[LocatingAttemptResult] = @LocatingAttemptResult,
	[AppliesTo] = @AppliesTo,
	[AssociatedStatus] = @AssociatedStatus,
	[SortOrder] = @SortOrder,
	[FieldAppliesTo] = @FieldAppliesTo,
	[IsForAutoAddedAttempt] = @IsForAutoAddedAttempt,
	[IsForMemberAddress] = @IsForMemberAddress,
	[IsForMemberPhone] = @IsForMemberPhone,
	[IsForMemNeighbor] = @IsForMemNeighbor,
	[IsForAddressService] = @IsForAddressService,
	[IsForSchool] = @IsForSchool,
	[IsForCenter] = @IsForCenter,
	[IsForChildCareCenter] = @IsForChildCareCenter,
	[IsForInstitution] = @IsForInstitution,
	[IsAppointment] = @IsAppointment,
	[IsBarrier] = @IsBarrier
WHERE
	[LocatingAttemptResultID] = @LocatingAttemptResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptResult_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptResult_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpLocatingAttemptResult'
-- using the Primary Key. 
-- Gets: @LocatingAttemptResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptResult_Delete]
	@LocatingAttemptResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpLocatingAttemptResult]
WHERE
	[LocatingAttemptResultID] = @LocatingAttemptResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptResult_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptResult_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpLocatingAttemptResult'
-- based on the Primary Key.
-- Gets: @LocatingAttemptResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptResult_SelectOne]
	@LocatingAttemptResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingAttemptResultID],
	[LocatingAttemptResult],
	[AppliesTo],
	[AssociatedStatus],
	[SortOrder],
	[FieldAppliesTo],
	[IsForAutoAddedAttempt],
	[IsForMemberAddress],
	[IsForMemberPhone],
	[IsForMemNeighbor],
	[IsForAddressService],
	[IsForSchool],
	[IsForCenter],
	[IsForChildCareCenter],
	[IsForInstitution],
	[IsAppointment],
	[IsBarrier]
FROM [dbo].[tlkpLocatingAttemptResult]
WHERE
	[LocatingAttemptResultID] = @LocatingAttemptResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptResult_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptResult_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpLocatingAttemptResult'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptResult_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingAttemptResultID],
	[LocatingAttemptResult],
	[AppliesTo],
	[AssociatedStatus],
	[SortOrder],
	[FieldAppliesTo],
	[IsForAutoAddedAttempt],
	[IsForMemberAddress],
	[IsForMemberPhone],
	[IsForMemNeighbor],
	[IsForAddressService],
	[IsForSchool],
	[IsForCenter],
	[IsForChildCareCenter],
	[IsForInstitution],
	[IsAppointment],
	[IsBarrier]
FROM [dbo].[tlkpLocatingAttemptResult]
ORDER BY 
	[LocatingAttemptResultID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpLocatingAttemptResult]

GO

-- [Stored Procedures generated for table:  tlkpLocatingAttemptType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpLocatingAttemptType'
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptType varchar(50)
-- Gets: @IsActive bit
-- Gets: @SortOrder int
-- Gets: @AllowMultipleAttempts bit
-- Gets: @ApplicationLocation varchar(100)
-- Gets: @ShowURL varchar(100)
-- Gets: @ShowInSeparateBrowser bit
-- Gets: @ShowCaseMembers bit
-- Gets: @ShowPersonName bit
-- Gets: @ShowAddresses bit
-- Gets: @ShowPhones bit
-- Gets: @ShowEmails bit
-- Gets: @ShowAddDocument bit
-- Gets: @ShowChangeRespondent bit
-- Gets: @ShowDefault char(1)
-- Gets: @ResultDefault int
-- Gets: @IsFieldLocating bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptType_Insert]
	@LocatingAttemptTypeID int,
	@LocatingAttemptType varchar(50),
	@IsActive bit,
	@SortOrder int,
	@AllowMultipleAttempts bit,
	@ApplicationLocation varchar(100),
	@ShowURL varchar(100),
	@ShowInSeparateBrowser bit,
	@ShowCaseMembers bit,
	@ShowPersonName bit,
	@ShowAddresses bit,
	@ShowPhones bit,
	@ShowEmails bit,
	@ShowAddDocument bit,
	@ShowChangeRespondent bit,
	@ShowDefault char(1),
	@ResultDefault int,
	@IsFieldLocating bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpLocatingAttemptType]
(
	[LocatingAttemptTypeID],
	[LocatingAttemptType],
	[IsActive],
	[SortOrder],
	[AllowMultipleAttempts],
	[ApplicationLocation],
	[ShowURL],
	[ShowInSeparateBrowser],
	[ShowCaseMembers],
	[ShowPersonName],
	[ShowAddresses],
	[ShowPhones],
	[ShowEmails],
	[ShowAddDocument],
	[ShowChangeRespondent],
	[ShowDefault],
	[ResultDefault],
	[IsFieldLocating]
)
VALUES
(
	@LocatingAttemptTypeID,
	@LocatingAttemptType,
	ISNULL(@IsActive, ((0))),
	@SortOrder,
	ISNULL(@AllowMultipleAttempts, ((0))),
	@ApplicationLocation,
	@ShowURL,
	@ShowInSeparateBrowser,
	@ShowCaseMembers,
	ISNULL(@ShowPersonName, ((0))),
	ISNULL(@ShowAddresses, ((0))),
	ISNULL(@ShowPhones, ((0))),
	ISNULL(@ShowEmails, ((0))),
	ISNULL(@ShowAddDocument, ((0))),
	ISNULL(@ShowChangeRespondent, ((0))),
	@ShowDefault,
	@ResultDefault,
	ISNULL(@IsFieldLocating, ((0)))
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpLocatingAttemptType'
-- Gets: @LocatingAttemptTypeID int
-- Gets: @LocatingAttemptType varchar(50)
-- Gets: @IsActive bit
-- Gets: @SortOrder int
-- Gets: @AllowMultipleAttempts bit
-- Gets: @ApplicationLocation varchar(100)
-- Gets: @ShowURL varchar(100)
-- Gets: @ShowInSeparateBrowser bit
-- Gets: @ShowCaseMembers bit
-- Gets: @ShowPersonName bit
-- Gets: @ShowAddresses bit
-- Gets: @ShowPhones bit
-- Gets: @ShowEmails bit
-- Gets: @ShowAddDocument bit
-- Gets: @ShowChangeRespondent bit
-- Gets: @ShowDefault char(1)
-- Gets: @ResultDefault int
-- Gets: @IsFieldLocating bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptType_Update]
	@LocatingAttemptTypeID int,
	@LocatingAttemptType varchar(50),
	@IsActive bit,
	@SortOrder int,
	@AllowMultipleAttempts bit,
	@ApplicationLocation varchar(100),
	@ShowURL varchar(100),
	@ShowInSeparateBrowser bit,
	@ShowCaseMembers bit,
	@ShowPersonName bit,
	@ShowAddresses bit,
	@ShowPhones bit,
	@ShowEmails bit,
	@ShowAddDocument bit,
	@ShowChangeRespondent bit,
	@ShowDefault char(1),
	@ResultDefault int,
	@IsFieldLocating bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpLocatingAttemptType]
SET 
	[LocatingAttemptType] = @LocatingAttemptType,
	[IsActive] = @IsActive,
	[SortOrder] = @SortOrder,
	[AllowMultipleAttempts] = @AllowMultipleAttempts,
	[ApplicationLocation] = @ApplicationLocation,
	[ShowURL] = @ShowURL,
	[ShowInSeparateBrowser] = @ShowInSeparateBrowser,
	[ShowCaseMembers] = @ShowCaseMembers,
	[ShowPersonName] = @ShowPersonName,
	[ShowAddresses] = @ShowAddresses,
	[ShowPhones] = @ShowPhones,
	[ShowEmails] = @ShowEmails,
	[ShowAddDocument] = @ShowAddDocument,
	[ShowChangeRespondent] = @ShowChangeRespondent,
	[ShowDefault] = @ShowDefault,
	[ResultDefault] = @ResultDefault,
	[IsFieldLocating] = @IsFieldLocating
WHERE
	[LocatingAttemptTypeID] = @LocatingAttemptTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpLocatingAttemptType'
-- using the Primary Key. 
-- Gets: @LocatingAttemptTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptType_Delete]
	@LocatingAttemptTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpLocatingAttemptType]
WHERE
	[LocatingAttemptTypeID] = @LocatingAttemptTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpLocatingAttemptType'
-- based on the Primary Key.
-- Gets: @LocatingAttemptTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptType_SelectOne]
	@LocatingAttemptTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[LocatingAttemptTypeID],
	[LocatingAttemptType],
	[IsActive],
	[SortOrder],
	[AllowMultipleAttempts],
	[ApplicationLocation],
	[ShowURL],
	[ShowInSeparateBrowser],
	[ShowCaseMembers],
	[ShowPersonName],
	[ShowAddresses],
	[ShowPhones],
	[ShowEmails],
	[ShowAddDocument],
	[ShowChangeRespondent],
	[ShowDefault],
	[ResultDefault],
	[IsFieldLocating]
FROM [dbo].[tlkpLocatingAttemptType]
WHERE
	[LocatingAttemptTypeID] = @LocatingAttemptTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpLocatingAttemptType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpLocatingAttemptType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpLocatingAttemptType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpLocatingAttemptType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[LocatingAttemptTypeID],
	[LocatingAttemptType],
	[IsActive],
	[SortOrder],
	[AllowMultipleAttempts],
	[ApplicationLocation],
	[ShowURL],
	[ShowInSeparateBrowser],
	[ShowCaseMembers],
	[ShowPersonName],
	[ShowAddresses],
	[ShowPhones],
	[ShowEmails],
	[ShowAddDocument],
	[ShowChangeRespondent],
	[ShowDefault],
	[ResultDefault],
	[IsFieldLocating]
FROM [dbo].[tlkpLocatingAttemptType]
ORDER BY 
	[LocatingAttemptTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpLocatingAttemptType]

GO

-- [Stored Procedures generated for table:  tlkpMelissaResultCode]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpMelissaResultCode'
-- Gets: @ResultCode varchar(5)
-- Gets: @ShortDescription varchar(100)
-- Gets: @Description varchar(500)
-- Gets: @ResultCodeTypeID int
-- Gets: @Notes varchar(200)
-- Gets: @isClean int
-- Returns: @ResultCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_Insert]
	@ResultCode varchar(5),
	@ShortDescription varchar(100),
	@Description varchar(500),
	@ResultCodeTypeID int,
	@Notes varchar(200),
	@isClean int,
	@ResultCodeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpMelissaResultCode]
(
	[ResultCode],
	[ShortDescription],
	[Description],
	[ResultCodeTypeID],
	[Notes],
	[isClean]
)
VALUES
(
	@ResultCode,
	@ShortDescription,
	@Description,
	@ResultCodeTypeID,
	@Notes,
	@isClean
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ResultCodeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpMelissaResultCode'
-- Gets: @ResultCodeID int
-- Gets: @ResultCode varchar(5)
-- Gets: @ShortDescription varchar(100)
-- Gets: @Description varchar(500)
-- Gets: @ResultCodeTypeID int
-- Gets: @Notes varchar(200)
-- Gets: @isClean int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_Update]
	@ResultCodeID int,
	@ResultCode varchar(5),
	@ShortDescription varchar(100),
	@Description varchar(500),
	@ResultCodeTypeID int,
	@Notes varchar(200),
	@isClean int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMelissaResultCode]
SET 
	[ResultCode] = @ResultCode,
	[ShortDescription] = @ShortDescription,
	[Description] = @Description,
	[ResultCodeTypeID] = @ResultCodeTypeID,
	[Notes] = @Notes,
	[isClean] = @isClean
WHERE
	[ResultCodeID] = @ResultCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [ResultCodeTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_UpdateAllWResultCodeTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_UpdateAllWResultCodeTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpMelissaResultCode'.
-- Will reset field [ResultCodeTypeID] with value @ResultCodeTypeIDOld  to value @ResultCodeTypeID
-- Gets: @ResultCodeTypeID int
-- Gets: @ResultCodeTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_UpdateAllWResultCodeTypeIDLogic]
	@ResultCodeTypeID int,
	@ResultCodeTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMelissaResultCode]
SET
	[ResultCodeTypeID] = @ResultCodeTypeID
WHERE
	[ResultCodeTypeID] = @ResultCodeTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpMelissaResultCode'
-- using the Primary Key. 
-- Gets: @ResultCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_Delete]
	@ResultCodeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpMelissaResultCode]
WHERE
	[ResultCodeID] = @ResultCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpMelissaResultCode'
-- based on the Primary Key.
-- Gets: @ResultCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_SelectOne]
	@ResultCodeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ResultCodeID],
	[ResultCode],
	[ShortDescription],
	[Description],
	[ResultCodeTypeID],
	[Notes],
	[isClean]
FROM [dbo].[tlkpMelissaResultCode]
WHERE
	[ResultCodeID] = @ResultCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpMelissaResultCode'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ResultCodeID],
	[ResultCode],
	[ShortDescription],
	[Description],
	[ResultCodeTypeID],
	[Notes],
	[isClean]
FROM [dbo].[tlkpMelissaResultCode]
ORDER BY 
	[ResultCodeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [ResultCodeTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCode_SelectAllWResultCodeTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCode_SelectAllWResultCodeTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpMelissaResultCode'
-- based on a foreign key field.
-- Gets: @ResultCodeTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCode_SelectAllWResultCodeTypeIDLogic]
	@ResultCodeTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[ResultCodeID],
	[ResultCode],
	[ShortDescription],
	[Description],
	[ResultCodeTypeID],
	[Notes],
	[isClean]
FROM [dbo].[tlkpMelissaResultCode]
WHERE
	[ResultCodeTypeID] = @ResultCodeTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpMelissaResultCode]

GO

-- [Stored Procedures generated for table:  tlkpMelissaResultCodeType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCodeType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCodeType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpMelissaResultCodeType'
-- Gets: @Description varchar(50)
-- Gets: @Prefix varchar(2)
-- Gets: @Notes varchar(200)
-- Returns: @ResultCodeTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCodeType_Insert]
	@Description varchar(50),
	@Prefix varchar(2),
	@Notes varchar(200),
	@ResultCodeTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpMelissaResultCodeType]
(
	[Description],
	[Prefix],
	[Notes]
)
VALUES
(
	@Description,
	@Prefix,
	@Notes
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ResultCodeTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCodeType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCodeType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpMelissaResultCodeType'
-- Gets: @ResultCodeTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Prefix varchar(2)
-- Gets: @Notes varchar(200)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCodeType_Update]
	@ResultCodeTypeID int,
	@Description varchar(50),
	@Prefix varchar(2),
	@Notes varchar(200),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMelissaResultCodeType]
SET 
	[Description] = @Description,
	[Prefix] = @Prefix,
	[Notes] = @Notes
WHERE
	[ResultCodeTypeID] = @ResultCodeTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCodeType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCodeType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpMelissaResultCodeType'
-- using the Primary Key. 
-- Gets: @ResultCodeTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCodeType_Delete]
	@ResultCodeTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpMelissaResultCodeType]
WHERE
	[ResultCodeTypeID] = @ResultCodeTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCodeType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCodeType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpMelissaResultCodeType'
-- based on the Primary Key.
-- Gets: @ResultCodeTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCodeType_SelectOne]
	@ResultCodeTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ResultCodeTypeID],
	[Description],
	[Prefix],
	[Notes]
FROM [dbo].[tlkpMelissaResultCodeType]
WHERE
	[ResultCodeTypeID] = @ResultCodeTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMelissaResultCodeType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMelissaResultCodeType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpMelissaResultCodeType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMelissaResultCodeType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ResultCodeTypeID],
	[Description],
	[Prefix],
	[Notes]
FROM [dbo].[tlkpMelissaResultCodeType]
ORDER BY 
	[ResultCodeTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpMelissaResultCodeType]

GO

-- [Stored Procedures generated for table:  tlkpMobilityCode]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpMobilityCode'
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityTypeID int
-- Gets: @Description varchar(100)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_Insert]
	@MobilityCode varchar(10),
	@MobilityTypeID int,
	@Description varchar(100),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpMobilityCode]
(
	[MobilityCode],
	[MobilityTypeID],
	[Description]
)
VALUES
(
	@MobilityCode,
	@MobilityTypeID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpMobilityCode'
-- Gets: @MobilityCode varchar(10)
-- Gets: @MobilityTypeID int
-- Gets: @Description varchar(100)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_Update]
	@MobilityCode varchar(10),
	@MobilityTypeID int,
	@Description varchar(100),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMobilityCode]
SET 
	[MobilityTypeID] = @MobilityTypeID,
	[Description] = @Description
WHERE
	[MobilityCode] = @MobilityCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one or more rows using field [MobilityTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_UpdateAllWMobilityTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_UpdateAllWMobilityTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'tlkpMobilityCode'.
-- Will reset field [MobilityTypeID] with value @MobilityTypeIDOld  to value @MobilityTypeID
-- Gets: @MobilityTypeID int
-- Gets: @MobilityTypeIDOld int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_UpdateAllWMobilityTypeIDLogic]
	@MobilityTypeID int,
	@MobilityTypeIDOld int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMobilityCode]
SET
	[MobilityTypeID] = @MobilityTypeID
WHERE
	[MobilityTypeID] = @MobilityTypeIDOld
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpMobilityCode'
-- using the Primary Key. 
-- Gets: @MobilityCode varchar(10)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_Delete]
	@MobilityCode varchar(10),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpMobilityCode]
WHERE
	[MobilityCode] = @MobilityCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpMobilityCode'
-- based on the Primary Key.
-- Gets: @MobilityCode varchar(10)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_SelectOne]
	@MobilityCode varchar(10),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[MobilityCode],
	[MobilityTypeID],
	[Description]
FROM [dbo].[tlkpMobilityCode]
WHERE
	[MobilityCode] = @MobilityCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpMobilityCode'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[MobilityCode],
	[MobilityTypeID],
	[Description]
FROM [dbo].[tlkpMobilityCode]
ORDER BY 
	[MobilityCode] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on field [MobilityTypeID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityCode_SelectAllWMobilityTypeIDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityCode_SelectAllWMobilityTypeIDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select one or more existing rows from the table 'tlkpMobilityCode'
-- based on a foreign key field.
-- Gets: @MobilityTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityCode_SelectAllWMobilityTypeIDLogic]
	@MobilityTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT one or more existing rows from the table.
SELECT
	[MobilityCode],
	[MobilityTypeID],
	[Description]
FROM [dbo].[tlkpMobilityCode]
WHERE
	[MobilityTypeID] = @MobilityTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpMobilityCode]

GO

-- [Stored Procedures generated for table:  tlkpMobilityType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpMobilityType'
-- Gets: @MobilityTypeID int
-- Gets: @MobilityType varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityType_Insert]
	@MobilityTypeID int,
	@MobilityType varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpMobilityType]
(
	[MobilityTypeID],
	[MobilityType]
)
VALUES
(
	@MobilityTypeID,
	@MobilityType
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpMobilityType'
-- Gets: @MobilityTypeID int
-- Gets: @MobilityType varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityType_Update]
	@MobilityTypeID int,
	@MobilityType varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpMobilityType]
SET 
	[MobilityType] = @MobilityType
WHERE
	[MobilityTypeID] = @MobilityTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpMobilityType'
-- using the Primary Key. 
-- Gets: @MobilityTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityType_Delete]
	@MobilityTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpMobilityType]
WHERE
	[MobilityTypeID] = @MobilityTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpMobilityType'
-- based on the Primary Key.
-- Gets: @MobilityTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityType_SelectOne]
	@MobilityTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[MobilityTypeID],
	[MobilityType]
FROM [dbo].[tlkpMobilityType]
WHERE
	[MobilityTypeID] = @MobilityTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpMobilityType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpMobilityType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpMobilityType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpMobilityType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[MobilityTypeID],
	[MobilityType]
FROM [dbo].[tlkpMobilityType]
ORDER BY 
	[MobilityTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpMobilityType]

GO

-- [Stored Procedures generated for table:  tlkpNoteType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpNoteType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpNoteType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpNoteType'
-- Gets: @NoteTypeID smallint
-- Gets: @Description nvarchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpNoteType_Insert]
	@NoteTypeID smallint,
	@Description nvarchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpNoteType]
(
	[NoteTypeID],
	[Description]
)
VALUES
(
	@NoteTypeID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpNoteType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpNoteType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpNoteType'
-- Gets: @NoteTypeID smallint
-- Gets: @Description nvarchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpNoteType_Update]
	@NoteTypeID smallint,
	@Description nvarchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpNoteType]
SET 
	[Description] = @Description
WHERE
	[NoteTypeID] = @NoteTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpNoteType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpNoteType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpNoteType'
-- using the Primary Key. 
-- Gets: @NoteTypeID smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpNoteType_Delete]
	@NoteTypeID smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpNoteType]
WHERE
	[NoteTypeID] = @NoteTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpNoteType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpNoteType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpNoteType'
-- based on the Primary Key.
-- Gets: @NoteTypeID smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpNoteType_SelectOne]
	@NoteTypeID smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[NoteTypeID],
	[Description]
FROM [dbo].[tlkpNoteType]
WHERE
	[NoteTypeID] = @NoteTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpNoteType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpNoteType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpNoteType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpNoteType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[NoteTypeID],
	[Description]
FROM [dbo].[tlkpNoteType]
ORDER BY 
	[NoteTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpNoteType]

GO

-- [Stored Procedures generated for table:  tlkpPhoneTime]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneTime_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneTime_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpPhoneTime'
-- Gets: @PhoneTimeID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneTime_Insert]
	@PhoneTimeID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpPhoneTime]
(
	[PhoneTimeID],
	[Description]
)
VALUES
(
	@PhoneTimeID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneTime_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneTime_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpPhoneTime'
-- Gets: @PhoneTimeID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneTime_Update]
	@PhoneTimeID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpPhoneTime]
SET 
	[Description] = @Description
WHERE
	[PhoneTimeID] = @PhoneTimeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneTime_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneTime_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpPhoneTime'
-- using the Primary Key. 
-- Gets: @PhoneTimeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneTime_Delete]
	@PhoneTimeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpPhoneTime]
WHERE
	[PhoneTimeID] = @PhoneTimeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneTime_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneTime_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpPhoneTime'
-- based on the Primary Key.
-- Gets: @PhoneTimeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneTime_SelectOne]
	@PhoneTimeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PhoneTimeID],
	[Description]
FROM [dbo].[tlkpPhoneTime]
WHERE
	[PhoneTimeID] = @PhoneTimeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneTime_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneTime_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpPhoneTime'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneTime_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PhoneTimeID],
	[Description]
FROM [dbo].[tlkpPhoneTime]
ORDER BY 
	[PhoneTimeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpPhoneTime]

GO

-- [Stored Procedures generated for table:  tlkpPhoneType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpPhoneType'
-- Gets: @PhoneTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneType_Insert]
	@PhoneTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpPhoneType]
(
	[PhoneTypeID],
	[Description],
	[Rank]
)
VALUES
(
	@PhoneTypeID,
	@Description,
	@Rank
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpPhoneType'
-- Gets: @PhoneTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneType_Update]
	@PhoneTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpPhoneType]
SET 
	[Description] = @Description,
	[Rank] = @Rank
WHERE
	[PhoneTypeID] = @PhoneTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpPhoneType'
-- using the Primary Key. 
-- Gets: @PhoneTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneType_Delete]
	@PhoneTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpPhoneType]
WHERE
	[PhoneTypeID] = @PhoneTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpPhoneType'
-- based on the Primary Key.
-- Gets: @PhoneTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneType_SelectOne]
	@PhoneTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[PhoneTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpPhoneType]
WHERE
	[PhoneTypeID] = @PhoneTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpPhoneType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpPhoneType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpPhoneType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpPhoneType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[PhoneTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpPhoneType]
ORDER BY 
	[PhoneTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpPhoneType]

GO

-- [Stored Procedures generated for table:  tlkpRaceType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRaceType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRaceType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpRaceType'
-- Gets: @Description varchar(50)
-- Returns: @RaceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRaceType_Insert]
	@Description varchar(50),
	@RaceTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpRaceType]
(
	[Description]
)
VALUES
(
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @RaceTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRaceType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRaceType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpRaceType'
-- Gets: @RaceTypeID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRaceType_Update]
	@RaceTypeID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpRaceType]
SET 
	[Description] = @Description
WHERE
	[RaceTypeID] = @RaceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRaceType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRaceType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpRaceType'
-- using the Primary Key. 
-- Gets: @RaceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRaceType_Delete]
	@RaceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpRaceType]
WHERE
	[RaceTypeID] = @RaceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRaceType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRaceType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpRaceType'
-- based on the Primary Key.
-- Gets: @RaceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRaceType_SelectOne]
	@RaceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[RaceTypeID],
	[Description]
FROM [dbo].[tlkpRaceType]
WHERE
	[RaceTypeID] = @RaceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRaceType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRaceType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpRaceType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRaceType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[RaceTypeID],
	[Description]
FROM [dbo].[tlkpRaceType]
ORDER BY 
	[RaceTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpRaceType]

GO

-- [Stored Procedures generated for table:  tlkpRelationshipType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRelationshipType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRelationshipType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpRelationshipType'
-- Gets: @RelationshipType varchar(50)
-- Gets: @IsRespondent bit
-- Gets: @IsPrimarySampleMember bit
-- Gets: @IsContact bit
-- Gets: @GuardianRank int
-- Gets: @EntityTypeID int
-- Gets: @IsActiveInSmartField bit
-- Returns: @RelationshipTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRelationshipType_Insert]
	@RelationshipType varchar(50),
	@IsRespondent bit,
	@IsPrimarySampleMember bit,
	@IsContact bit,
	@GuardianRank int,
	@EntityTypeID int,
	@IsActiveInSmartField bit,
	@RelationshipTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpRelationshipType]
(
	[RelationshipType],
	[IsRespondent],
	[IsPrimarySampleMember],
	[IsContact],
	[GuardianRank],
	[EntityTypeID],
	[IsActiveInSmartField]
)
VALUES
(
	@RelationshipType,
	@IsRespondent,
	@IsPrimarySampleMember,
	@IsContact,
	@GuardianRank,
	@EntityTypeID,
	@IsActiveInSmartField
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @RelationshipTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRelationshipType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRelationshipType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpRelationshipType'
-- Gets: @RelationshipTypeID int
-- Gets: @RelationshipType varchar(50)
-- Gets: @IsRespondent bit
-- Gets: @IsPrimarySampleMember bit
-- Gets: @IsContact bit
-- Gets: @GuardianRank int
-- Gets: @EntityTypeID int
-- Gets: @IsActiveInSmartField bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRelationshipType_Update]
	@RelationshipTypeID int,
	@RelationshipType varchar(50),
	@IsRespondent bit,
	@IsPrimarySampleMember bit,
	@IsContact bit,
	@GuardianRank int,
	@EntityTypeID int,
	@IsActiveInSmartField bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpRelationshipType]
SET 
	[RelationshipType] = @RelationshipType,
	[IsRespondent] = @IsRespondent,
	[IsPrimarySampleMember] = @IsPrimarySampleMember,
	[IsContact] = @IsContact,
	[GuardianRank] = @GuardianRank,
	[EntityTypeID] = @EntityTypeID,
	[IsActiveInSmartField] = @IsActiveInSmartField
WHERE
	[RelationshipTypeID] = @RelationshipTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRelationshipType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRelationshipType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpRelationshipType'
-- using the Primary Key. 
-- Gets: @RelationshipTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRelationshipType_Delete]
	@RelationshipTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpRelationshipType]
WHERE
	[RelationshipTypeID] = @RelationshipTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRelationshipType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRelationshipType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpRelationshipType'
-- based on the Primary Key.
-- Gets: @RelationshipTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRelationshipType_SelectOne]
	@RelationshipTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[RelationshipTypeID],
	[RelationshipType],
	[IsRespondent],
	[IsPrimarySampleMember],
	[IsContact],
	[GuardianRank],
	[EntityTypeID],
	[IsActiveInSmartField]
FROM [dbo].[tlkpRelationshipType]
WHERE
	[RelationshipTypeID] = @RelationshipTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpRelationshipType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpRelationshipType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpRelationshipType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpRelationshipType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[RelationshipTypeID],
	[RelationshipType],
	[IsRespondent],
	[IsPrimarySampleMember],
	[IsContact],
	[GuardianRank],
	[EntityTypeID],
	[IsActiveInSmartField]
FROM [dbo].[tlkpRelationshipType]
ORDER BY 
	[RelationshipTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpRelationshipType]

GO

-- [Stored Procedures generated for table:  tlkpReturnedMailReason]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpReturnedMailReason_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpReturnedMailReason_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpReturnedMailReason'
-- Gets: @Description varchar(50)
-- Returns: @ReturnedMailReasonID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpReturnedMailReason_Insert]
	@Description varchar(50),
	@ReturnedMailReasonID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpReturnedMailReason]
(
	[Description]
)
VALUES
(
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @ReturnedMailReasonID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpReturnedMailReason_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpReturnedMailReason_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpReturnedMailReason'
-- Gets: @ReturnedMailReasonID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpReturnedMailReason_Update]
	@ReturnedMailReasonID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpReturnedMailReason]
SET 
	[Description] = @Description
WHERE
	[ReturnedMailReasonID] = @ReturnedMailReasonID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpReturnedMailReason_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpReturnedMailReason_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpReturnedMailReason'
-- using the Primary Key. 
-- Gets: @ReturnedMailReasonID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpReturnedMailReason_Delete]
	@ReturnedMailReasonID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpReturnedMailReason]
WHERE
	[ReturnedMailReasonID] = @ReturnedMailReasonID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpReturnedMailReason_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpReturnedMailReason_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpReturnedMailReason'
-- based on the Primary Key.
-- Gets: @ReturnedMailReasonID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpReturnedMailReason_SelectOne]
	@ReturnedMailReasonID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ReturnedMailReasonID],
	[Description]
FROM [dbo].[tlkpReturnedMailReason]
WHERE
	[ReturnedMailReasonID] = @ReturnedMailReasonID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpReturnedMailReason_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpReturnedMailReason_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpReturnedMailReason'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpReturnedMailReason_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ReturnedMailReasonID],
	[Description]
FROM [dbo].[tlkpReturnedMailReason]
ORDER BY 
	[ReturnedMailReasonID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpReturnedMailReason]

GO

-- [Stored Procedures generated for table:  tlkpSettings]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSettings_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSettings_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpSettings'
-- Gets: @Setting varchar(50)
-- Gets: @Value varchar(200)
-- Gets: @Description varchar(200)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSettings_Insert]
	@Setting varchar(50),
	@Value varchar(200),
	@Description varchar(200),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpSettings]
(
	[Setting],
	[Value],
	[Description]
)
VALUES
(
	@Setting,
	@Value,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSettings_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSettings_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpSettings'
-- Gets: @Setting varchar(50)
-- Gets: @Value varchar(200)
-- Gets: @Description varchar(200)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSettings_Update]
	@Setting varchar(50),
	@Value varchar(200),
	@Description varchar(200),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpSettings]
SET 
	[Value] = @Value,
	[Description] = @Description
WHERE
	[Setting] = @Setting
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSettings_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSettings_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpSettings'
-- using the Primary Key. 
-- Gets: @Setting varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSettings_Delete]
	@Setting varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpSettings]
WHERE
	[Setting] = @Setting
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSettings_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSettings_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpSettings'
-- based on the Primary Key.
-- Gets: @Setting varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSettings_SelectOne]
	@Setting varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Setting],
	[Value],
	[Description]
FROM [dbo].[tlkpSettings]
WHERE
	[Setting] = @Setting
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSettings_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSettings_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpSettings'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSettings_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Setting],
	[Value],
	[Description]
FROM [dbo].[tlkpSettings]
ORDER BY 
	[Setting] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpSettings]

GO

-- [Stored Procedures generated for table:  tlkpSocialNetworkStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpSocialNetworkStatus'
-- Gets: @Description varchar(50)
-- Gets: @SortOrder int
-- Gets: @IsActiveRequest bit
-- Returns: @SocialNetworkStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkStatus_Insert]
	@Description varchar(50),
	@SortOrder int,
	@IsActiveRequest bit,
	@SocialNetworkStatusID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpSocialNetworkStatus]
(
	[Description],
	[SortOrder],
	[IsActiveRequest]
)
VALUES
(
	@Description,
	@SortOrder,
	@IsActiveRequest
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SocialNetworkStatusID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpSocialNetworkStatus'
-- Gets: @SocialNetworkStatusID int
-- Gets: @Description varchar(50)
-- Gets: @SortOrder int
-- Gets: @IsActiveRequest bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkStatus_Update]
	@SocialNetworkStatusID int,
	@Description varchar(50),
	@SortOrder int,
	@IsActiveRequest bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpSocialNetworkStatus]
SET 
	[Description] = @Description,
	[SortOrder] = @SortOrder,
	[IsActiveRequest] = @IsActiveRequest
WHERE
	[SocialNetworkStatusID] = @SocialNetworkStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpSocialNetworkStatus'
-- using the Primary Key. 
-- Gets: @SocialNetworkStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkStatus_Delete]
	@SocialNetworkStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpSocialNetworkStatus]
WHERE
	[SocialNetworkStatusID] = @SocialNetworkStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpSocialNetworkStatus'
-- based on the Primary Key.
-- Gets: @SocialNetworkStatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkStatus_SelectOne]
	@SocialNetworkStatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SocialNetworkStatusID],
	[Description],
	[SortOrder],
	[IsActiveRequest]
FROM [dbo].[tlkpSocialNetworkStatus]
WHERE
	[SocialNetworkStatusID] = @SocialNetworkStatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpSocialNetworkStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SocialNetworkStatusID],
	[Description],
	[SortOrder],
	[IsActiveRequest]
FROM [dbo].[tlkpSocialNetworkStatus]
ORDER BY 
	[SocialNetworkStatusID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpSocialNetworkStatus]

GO

-- [Stored Procedures generated for table:  tlkpSocialNetworkType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpSocialNetworkType'
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @SocialNetworkTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkType_Insert]
	@Description varchar(50),
	@Rank int,
	@SocialNetworkTypeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpSocialNetworkType]
(
	[Description],
	[Rank]
)
VALUES
(
	@Description,
	@Rank
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @SocialNetworkTypeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpSocialNetworkType'
-- Gets: @SocialNetworkTypeID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkType_Update]
	@SocialNetworkTypeID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpSocialNetworkType]
SET 
	[Description] = @Description,
	[Rank] = @Rank
WHERE
	[SocialNetworkTypeID] = @SocialNetworkTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpSocialNetworkType'
-- using the Primary Key. 
-- Gets: @SocialNetworkTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkType_Delete]
	@SocialNetworkTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpSocialNetworkType]
WHERE
	[SocialNetworkTypeID] = @SocialNetworkTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpSocialNetworkType'
-- based on the Primary Key.
-- Gets: @SocialNetworkTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkType_SelectOne]
	@SocialNetworkTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SocialNetworkTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpSocialNetworkType]
WHERE
	[SocialNetworkTypeID] = @SocialNetworkTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSocialNetworkType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSocialNetworkType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpSocialNetworkType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSocialNetworkType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SocialNetworkTypeID],
	[Description],
	[Rank]
FROM [dbo].[tlkpSocialNetworkType]
ORDER BY 
	[SocialNetworkTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpSocialNetworkType]

GO

-- [Stored Procedures generated for table:  tlkpSourceQuality]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceQuality_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceQuality_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpSourceQuality'
-- Gets: @SourceQualityID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceQuality_Insert]
	@SourceQualityID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpSourceQuality]
(
	[SourceQualityID],
	[Description],
	[Rank]
)
VALUES
(
	@SourceQualityID,
	@Description,
	@Rank
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceQuality_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceQuality_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpSourceQuality'
-- Gets: @SourceQualityID int
-- Gets: @Description varchar(50)
-- Gets: @Rank int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceQuality_Update]
	@SourceQualityID int,
	@Description varchar(50),
	@Rank int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpSourceQuality]
SET 
	[Description] = @Description,
	[Rank] = @Rank
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceQuality_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceQuality_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpSourceQuality'
-- using the Primary Key. 
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceQuality_Delete]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpSourceQuality]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceQuality_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceQuality_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpSourceQuality'
-- based on the Primary Key.
-- Gets: @SourceQualityID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceQuality_SelectOne]
	@SourceQualityID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SourceQualityID],
	[Description],
	[Rank]
FROM [dbo].[tlkpSourceQuality]
WHERE
	[SourceQualityID] = @SourceQualityID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceQuality_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceQuality_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpSourceQuality'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceQuality_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SourceQualityID],
	[Description],
	[Rank]
FROM [dbo].[tlkpSourceQuality]
ORDER BY 
	[SourceQualityID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpSourceQuality]

GO

-- [Stored Procedures generated for table:  tlkpSourceType]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceType_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceType_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpSourceType'
-- Gets: @SourceTypeID int
-- Gets: @Description varchar(50)
-- Gets: @AssignInField bit
-- Gets: @Ranking smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceType_Insert]
	@SourceTypeID int,
	@Description varchar(50),
	@AssignInField bit,
	@Ranking smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpSourceType]
(
	[SourceTypeID],
	[Description],
	[AssignInField],
	[Ranking]
)
VALUES
(
	@SourceTypeID,
	@Description,
	@AssignInField,
	@Ranking
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceType_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceType_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpSourceType'
-- Gets: @SourceTypeID int
-- Gets: @Description varchar(50)
-- Gets: @AssignInField bit
-- Gets: @Ranking smallint
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceType_Update]
	@SourceTypeID int,
	@Description varchar(50),
	@AssignInField bit,
	@Ranking smallint,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpSourceType]
SET 
	[Description] = @Description,
	[AssignInField] = @AssignInField,
	[Ranking] = @Ranking
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceType_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceType_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpSourceType'
-- using the Primary Key. 
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceType_Delete]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpSourceType]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceType_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceType_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpSourceType'
-- based on the Primary Key.
-- Gets: @SourceTypeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceType_SelectOne]
	@SourceTypeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[SourceTypeID],
	[Description],
	[AssignInField],
	[Ranking]
FROM [dbo].[tlkpSourceType]
WHERE
	[SourceTypeID] = @SourceTypeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpSourceType_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpSourceType_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpSourceType'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpSourceType_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[SourceTypeID],
	[Description],
	[AssignInField],
	[Ranking]
FROM [dbo].[tlkpSourceType]
ORDER BY 
	[SourceTypeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpSourceType]

GO

-- [Stored Procedures generated for table:  tlkpStates]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStates_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStates_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpStates'
-- Gets: @StateID int
-- Gets: @State varchar(2)
-- Gets: @StateName varchar(50)
-- Gets: @Region int
-- Gets: @ValidateZip bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStates_Insert]
	@StateID int,
	@State varchar(2),
	@StateName varchar(50),
	@Region int,
	@ValidateZip bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpStates]
(
	[StateID],
	[State],
	[StateName],
	[Region],
	[ValidateZip]
)
VALUES
(
	@StateID,
	@State,
	@StateName,
	@Region,
	@ValidateZip
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStates_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStates_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpStates'
-- Gets: @StateID int
-- Gets: @State varchar(2)
-- Gets: @StateName varchar(50)
-- Gets: @Region int
-- Gets: @ValidateZip bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStates_Update]
	@StateID int,
	@State varchar(2),
	@StateName varchar(50),
	@Region int,
	@ValidateZip bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpStates]
SET 
	[State] = @State,
	[StateName] = @StateName,
	[Region] = @Region,
	[ValidateZip] = @ValidateZip
WHERE
	[StateID] = @StateID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStates_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStates_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpStates'
-- using the Primary Key. 
-- Gets: @StateID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStates_Delete]
	@StateID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpStates]
WHERE
	[StateID] = @StateID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStates_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStates_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpStates'
-- based on the Primary Key.
-- Gets: @StateID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStates_SelectOne]
	@StateID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StateID],
	[State],
	[StateName],
	[Region],
	[ValidateZip]
FROM [dbo].[tlkpStates]
WHERE
	[StateID] = @StateID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStates_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStates_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpStates'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStates_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StateID],
	[State],
	[StateName],
	[Region],
	[ValidateZip]
FROM [dbo].[tlkpStates]
ORDER BY 
	[StateID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpStates]

GO

-- [Stored Procedures generated for table:  tlkpStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpStatus'
-- Gets: @Code char(4)
-- Gets: @Description varchar(100)
-- Gets: @AltCode varchar(50)
-- Gets: @BlaiseReturnCode char(1)
-- Gets: @StatusType varchar(50)
-- Gets: @IsActive bit
-- Gets: @IsComplete bit
-- Gets: @IsFinalStatus bit
-- Gets: @IsInterimStatus bit
-- Gets: @IsCATIStatus bit
-- Gets: @IsCAPIStatus bit
-- Gets: @IsCAWIStatus bit
-- Gets: @IsHardcopyStatus bit
-- Gets: @IsCaseInLocating bit
-- Gets: @IsCaseInLocatingSupervisor bit
-- Gets: @IsStatusAvailableInLocating bit
-- Gets: @IsStatusAvailableInLocatingSupervisor bit
-- Gets: @IsSentToCATI bit
-- Gets: @IsFieldInterviewStatus bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatus_Insert]
	@Code char(4),
	@Description varchar(100),
	@AltCode varchar(50),
	@BlaiseReturnCode char(1),
	@StatusType varchar(50),
	@IsActive bit,
	@IsComplete bit,
	@IsFinalStatus bit,
	@IsInterimStatus bit,
	@IsCATIStatus bit,
	@IsCAPIStatus bit,
	@IsCAWIStatus bit,
	@IsHardcopyStatus bit,
	@IsCaseInLocating bit,
	@IsCaseInLocatingSupervisor bit,
	@IsStatusAvailableInLocating bit,
	@IsStatusAvailableInLocatingSupervisor bit,
	@IsSentToCATI bit,
	@IsFieldInterviewStatus bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpStatus]
(
	[Code],
	[Description],
	[AltCode],
	[BlaiseReturnCode],
	[StatusType],
	[IsActive],
	[IsComplete],
	[IsFinalStatus],
	[IsInterimStatus],
	[IsCATIStatus],
	[IsCAPIStatus],
	[IsCAWIStatus],
	[IsHardcopyStatus],
	[IsCaseInLocating],
	[IsCaseInLocatingSupervisor],
	[IsStatusAvailableInLocating],
	[IsStatusAvailableInLocatingSupervisor],
	[IsSentToCATI],
	[IsFieldInterviewStatus]
)
VALUES
(
	@Code,
	@Description,
	@AltCode,
	@BlaiseReturnCode,
	@StatusType,
	ISNULL(@IsActive, ((0))),
	ISNULL(@IsComplete, ((0))),
	ISNULL(@IsFinalStatus, ((0))),
	ISNULL(@IsInterimStatus, ((0))),
	ISNULL(@IsCATIStatus, ((0))),
	ISNULL(@IsCAPIStatus, ((0))),
	ISNULL(@IsCAWIStatus, ((0))),
	ISNULL(@IsHardcopyStatus, ((0))),
	ISNULL(@IsCaseInLocating, ((0))),
	ISNULL(@IsCaseInLocatingSupervisor, ((0))),
	ISNULL(@IsStatusAvailableInLocating, ((0))),
	ISNULL(@IsStatusAvailableInLocatingSupervisor, ((0))),
	ISNULL(@IsSentToCATI, ((0))),
	ISNULL(@IsFieldInterviewStatus, ((0)))
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpStatus'
-- Gets: @Code char(4)
-- Gets: @Description varchar(100)
-- Gets: @AltCode varchar(50)
-- Gets: @BlaiseReturnCode char(1)
-- Gets: @StatusType varchar(50)
-- Gets: @IsActive bit
-- Gets: @IsComplete bit
-- Gets: @IsFinalStatus bit
-- Gets: @IsInterimStatus bit
-- Gets: @IsCATIStatus bit
-- Gets: @IsCAPIStatus bit
-- Gets: @IsCAWIStatus bit
-- Gets: @IsHardcopyStatus bit
-- Gets: @IsCaseInLocating bit
-- Gets: @IsCaseInLocatingSupervisor bit
-- Gets: @IsStatusAvailableInLocating bit
-- Gets: @IsStatusAvailableInLocatingSupervisor bit
-- Gets: @IsSentToCATI bit
-- Gets: @IsFieldInterviewStatus bit
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatus_Update]
	@Code char(4),
	@Description varchar(100),
	@AltCode varchar(50),
	@BlaiseReturnCode char(1),
	@StatusType varchar(50),
	@IsActive bit,
	@IsComplete bit,
	@IsFinalStatus bit,
	@IsInterimStatus bit,
	@IsCATIStatus bit,
	@IsCAPIStatus bit,
	@IsCAWIStatus bit,
	@IsHardcopyStatus bit,
	@IsCaseInLocating bit,
	@IsCaseInLocatingSupervisor bit,
	@IsStatusAvailableInLocating bit,
	@IsStatusAvailableInLocatingSupervisor bit,
	@IsSentToCATI bit,
	@IsFieldInterviewStatus bit,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpStatus]
SET 
	[Description] = @Description,
	[AltCode] = @AltCode,
	[BlaiseReturnCode] = @BlaiseReturnCode,
	[StatusType] = @StatusType,
	[IsActive] = @IsActive,
	[IsComplete] = @IsComplete,
	[IsFinalStatus] = @IsFinalStatus,
	[IsInterimStatus] = @IsInterimStatus,
	[IsCATIStatus] = @IsCATIStatus,
	[IsCAPIStatus] = @IsCAPIStatus,
	[IsCAWIStatus] = @IsCAWIStatus,
	[IsHardcopyStatus] = @IsHardcopyStatus,
	[IsCaseInLocating] = @IsCaseInLocating,
	[IsCaseInLocatingSupervisor] = @IsCaseInLocatingSupervisor,
	[IsStatusAvailableInLocating] = @IsStatusAvailableInLocating,
	[IsStatusAvailableInLocatingSupervisor] = @IsStatusAvailableInLocatingSupervisor,
	[IsSentToCATI] = @IsSentToCATI,
	[IsFieldInterviewStatus] = @IsFieldInterviewStatus
WHERE
	[Code] = @Code
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpStatus'
-- using the Primary Key. 
-- Gets: @Code char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatus_Delete]
	@Code char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpStatus]
WHERE
	[Code] = @Code
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpStatus'
-- based on the Primary Key.
-- Gets: @Code char(4)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatus_SelectOne]
	@Code char(4),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[Code],
	[Description],
	[AltCode],
	[BlaiseReturnCode],
	[StatusType],
	[IsActive],
	[IsComplete],
	[IsFinalStatus],
	[IsInterimStatus],
	[IsCATIStatus],
	[IsCAPIStatus],
	[IsCAWIStatus],
	[IsHardcopyStatus],
	[IsCaseInLocating],
	[IsCaseInLocatingSupervisor],
	[IsStatusAvailableInLocating],
	[IsStatusAvailableInLocatingSupervisor],
	[IsSentToCATI],
	[IsFieldInterviewStatus]
FROM [dbo].[tlkpStatus]
WHERE
	[Code] = @Code
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[Code],
	[Description],
	[AltCode],
	[BlaiseReturnCode],
	[StatusType],
	[IsActive],
	[IsComplete],
	[IsFinalStatus],
	[IsInterimStatus],
	[IsCATIStatus],
	[IsCAPIStatus],
	[IsCAWIStatus],
	[IsHardcopyStatus],
	[IsCaseInLocating],
	[IsCaseInLocatingSupervisor],
	[IsStatusAvailableInLocating],
	[IsStatusAvailableInLocatingSupervisor],
	[IsSentToCATI],
	[IsFieldInterviewStatus]
FROM [dbo].[tlkpStatus]
ORDER BY 
	[Code] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpStatus]

GO

-- [Stored Procedures generated for table:  tlkpStatusResult]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusResult_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusResult_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpStatusResult'
-- Gets: @ResultID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusResult_Insert]
	@ResultID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpStatusResult]
(
	[ResultID],
	[Description]
)
VALUES
(
	@ResultID,
	@Description
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusResult_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusResult_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpStatusResult'
-- Gets: @ResultID int
-- Gets: @Description varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusResult_Update]
	@ResultID int,
	@Description varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpStatusResult]
SET 
	[Description] = @Description
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusResult_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusResult_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpStatusResult'
-- using the Primary Key. 
-- Gets: @ResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusResult_Delete]
	@ResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpStatusResult]
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusResult_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusResult_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpStatusResult'
-- based on the Primary Key.
-- Gets: @ResultID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusResult_SelectOne]
	@ResultID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[ResultID],
	[Description]
FROM [dbo].[tlkpStatusResult]
WHERE
	[ResultID] = @ResultID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusResult_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusResult_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpStatusResult'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusResult_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[ResultID],
	[Description]
FROM [dbo].[tlkpStatusResult]
ORDER BY 
	[ResultID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpStatusResult]

GO

-- [Stored Procedures generated for table:  tlkpStatusUpdateRule]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusUpdateRule_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusUpdateRule_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpStatusUpdateRule'
-- Gets: @ExistingStatus char(4)
-- Gets: @NewStatus char(4)
-- Gets: @ResultStatus char(4)
-- Gets: @ResultID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Returns: @StatusUpdateRuleID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusUpdateRule_Insert]
	@ExistingStatus char(4),
	@NewStatus char(4),
	@ResultStatus char(4),
	@ResultID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@StatusUpdateRuleID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpStatusUpdateRule]
(
	[ExistingStatus],
	[NewStatus],
	[ResultStatus],
	[ResultID],
	[CreatedBy],
	[CreatedOn]
)
VALUES
(
	@ExistingStatus,
	@NewStatus,
	@ResultStatus,
	@ResultID,
	@CreatedBy,
	@CreatedOn
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @StatusUpdateRuleID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusUpdateRule_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusUpdateRule_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpStatusUpdateRule'
-- Gets: @StatusUpdateRuleID int
-- Gets: @ExistingStatus char(4)
-- Gets: @NewStatus char(4)
-- Gets: @ResultStatus char(4)
-- Gets: @ResultID int
-- Gets: @CreatedBy varchar(50)
-- Gets: @CreatedOn datetime
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusUpdateRule_Update]
	@StatusUpdateRuleID int,
	@ExistingStatus char(4),
	@NewStatus char(4),
	@ResultStatus char(4),
	@ResultID int,
	@CreatedBy varchar(50),
	@CreatedOn datetime,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpStatusUpdateRule]
SET 
	[ExistingStatus] = @ExistingStatus,
	[NewStatus] = @NewStatus,
	[ResultStatus] = @ResultStatus,
	[ResultID] = @ResultID,
	[CreatedBy] = @CreatedBy,
	[CreatedOn] = @CreatedOn
WHERE
	[StatusUpdateRuleID] = @StatusUpdateRuleID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusUpdateRule_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusUpdateRule_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpStatusUpdateRule'
-- using the Primary Key. 
-- Gets: @StatusUpdateRuleID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusUpdateRule_Delete]
	@StatusUpdateRuleID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpStatusUpdateRule]
WHERE
	[StatusUpdateRuleID] = @StatusUpdateRuleID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusUpdateRule_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusUpdateRule_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpStatusUpdateRule'
-- based on the Primary Key.
-- Gets: @StatusUpdateRuleID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusUpdateRule_SelectOne]
	@StatusUpdateRuleID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StatusUpdateRuleID],
	[ExistingStatus],
	[NewStatus],
	[ResultStatus],
	[ResultID],
	[CreatedBy],
	[CreatedOn]
FROM [dbo].[tlkpStatusUpdateRule]
WHERE
	[StatusUpdateRuleID] = @StatusUpdateRuleID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStatusUpdateRule_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStatusUpdateRule_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpStatusUpdateRule'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStatusUpdateRule_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StatusUpdateRuleID],
	[ExistingStatus],
	[NewStatus],
	[ResultStatus],
	[ResultID],
	[CreatedBy],
	[CreatedOn]
FROM [dbo].[tlkpStatusUpdateRule]
ORDER BY 
	[StatusUpdateRuleID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpStatusUpdateRule]

GO

-- [Stored Procedures generated for table:  tlkpStratificationCode]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStratificationCode_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStratificationCode_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpStratificationCode'
-- Gets: @StratificationCode varchar(50)
-- Returns: @StratificationCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStratificationCode_Insert]
	@StratificationCode varchar(50),
	@StratificationCodeID int OUTPUT,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpStratificationCode]
(
	[StratificationCode]
)
VALUES
(
	@StratificationCode
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
-- Get the IDENTITY value for the row just inserted.
SELECT @StratificationCodeID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStratificationCode_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStratificationCode_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpStratificationCode'
-- Gets: @StratificationCodeID int
-- Gets: @StratificationCode varchar(50)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStratificationCode_Update]
	@StratificationCodeID int,
	@StratificationCode varchar(50),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpStratificationCode]
SET 
	[StratificationCode] = @StratificationCode
WHERE
	[StratificationCodeID] = @StratificationCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStratificationCode_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStratificationCode_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpStratificationCode'
-- using the Primary Key. 
-- Gets: @StratificationCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStratificationCode_Delete]
	@StratificationCodeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpStratificationCode]
WHERE
	[StratificationCodeID] = @StratificationCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStratificationCode_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStratificationCode_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpStratificationCode'
-- based on the Primary Key.
-- Gets: @StratificationCodeID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStratificationCode_SelectOne]
	@StratificationCodeID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StratificationCodeID],
	[StratificationCode]
FROM [dbo].[tlkpStratificationCode]
WHERE
	[StratificationCodeID] = @StratificationCodeID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpStratificationCode_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpStratificationCode_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpStratificationCode'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpStratificationCode_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StratificationCodeID],
	[StratificationCode]
FROM [dbo].[tlkpStratificationCode]
ORDER BY 
	[StratificationCodeID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpStratificationCode]

GO

-- [Stored Procedures generated for table:  tlkpTimeZone]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZone_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZone_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpTimeZone'
-- Gets: @AreaCode varchar(3)
-- Gets: @Code varchar(2)
-- Gets: @Description varchar(50)
-- Gets: @State varchar(2)
-- Gets: @Country varchar(3)
-- Gets: @CityNames varchar(70)
-- Gets: @Daylight varchar(1)
-- Gets: @ConfirmitTZCD varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZone_Insert]
	@AreaCode varchar(3),
	@Code varchar(2),
	@Description varchar(50),
	@State varchar(2),
	@Country varchar(3),
	@CityNames varchar(70),
	@Daylight varchar(1),
	@ConfirmitTZCD varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpTimeZone]
(
	[AreaCode],
	[Code],
	[Description],
	[State],
	[Country],
	[CityNames],
	[Daylight],
	[ConfirmitTZCD]
)
VALUES
(
	@AreaCode,
	@Code,
	@Description,
	@State,
	@Country,
	@CityNames,
	@Daylight,
	@ConfirmitTZCD
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZone_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZone_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpTimeZone'
-- Gets: @AreaCode varchar(3)
-- Gets: @Code varchar(2)
-- Gets: @Description varchar(50)
-- Gets: @State varchar(2)
-- Gets: @Country varchar(3)
-- Gets: @CityNames varchar(70)
-- Gets: @Daylight varchar(1)
-- Gets: @ConfirmitTZCD varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZone_Update]
	@AreaCode varchar(3),
	@Code varchar(2),
	@Description varchar(50),
	@State varchar(2),
	@Country varchar(3),
	@CityNames varchar(70),
	@Daylight varchar(1),
	@ConfirmitTZCD varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpTimeZone]
SET 
	[Code] = @Code,
	[Description] = @Description,
	[State] = @State,
	[Country] = @Country,
	[CityNames] = @CityNames,
	[Daylight] = @Daylight,
	[ConfirmitTZCD] = @ConfirmitTZCD
WHERE
	[AreaCode] = @AreaCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZone_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZone_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpTimeZone'
-- using the Primary Key. 
-- Gets: @AreaCode varchar(3)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZone_Delete]
	@AreaCode varchar(3),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpTimeZone]
WHERE
	[AreaCode] = @AreaCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZone_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZone_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpTimeZone'
-- based on the Primary Key.
-- Gets: @AreaCode varchar(3)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZone_SelectOne]
	@AreaCode varchar(3),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[AreaCode],
	[Code],
	[Description],
	[State],
	[Country],
	[CityNames],
	[Daylight],
	[ConfirmitTZCD]
FROM [dbo].[tlkpTimeZone]
WHERE
	[AreaCode] = @AreaCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZone_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZone_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpTimeZone'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZone_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[AreaCode],
	[Code],
	[Description],
	[State],
	[Country],
	[CityNames],
	[Daylight],
	[ConfirmitTZCD]
FROM [dbo].[tlkpTimeZone]
ORDER BY 
	[AreaCode] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpTimeZone]

GO

-- [Stored Procedures generated for table:  tlkpTimeZoneCode]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZoneCode_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZoneCode_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpTimeZoneCode'
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @TimeZoneName varchar(10)
-- Gets: @Description varchar(50)
-- Gets: @CallingWindowStartTime varchar(10)
-- Gets: @CallingWindowEndTime varchar(10)
-- Gets: @ConfirmitCode varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZoneCode_Insert]
	@TimeZoneCode varchar(2),
	@TimeZoneName varchar(10),
	@Description varchar(50),
	@CallingWindowStartTime varchar(10),
	@CallingWindowEndTime varchar(10),
	@ConfirmitCode varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpTimeZoneCode]
(
	[TimeZoneCode],
	[TimeZoneName],
	[Description],
	[CallingWindowStartTime],
	[CallingWindowEndTime],
	[ConfirmitCode]
)
VALUES
(
	@TimeZoneCode,
	@TimeZoneName,
	@Description,
	@CallingWindowStartTime,
	@CallingWindowEndTime,
	@ConfirmitCode
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZoneCode_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZoneCode_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpTimeZoneCode'
-- Gets: @TimeZoneCode varchar(2)
-- Gets: @TimeZoneName varchar(10)
-- Gets: @Description varchar(50)
-- Gets: @CallingWindowStartTime varchar(10)
-- Gets: @CallingWindowEndTime varchar(10)
-- Gets: @ConfirmitCode varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZoneCode_Update]
	@TimeZoneCode varchar(2),
	@TimeZoneName varchar(10),
	@Description varchar(50),
	@CallingWindowStartTime varchar(10),
	@CallingWindowEndTime varchar(10),
	@ConfirmitCode varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpTimeZoneCode]
SET 
	[TimeZoneName] = @TimeZoneName,
	[Description] = @Description,
	[CallingWindowStartTime] = @CallingWindowStartTime,
	[CallingWindowEndTime] = @CallingWindowEndTime,
	[ConfirmitCode] = @ConfirmitCode
WHERE
	[TimeZoneCode] = @TimeZoneCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZoneCode_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZoneCode_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpTimeZoneCode'
-- using the Primary Key. 
-- Gets: @TimeZoneCode varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZoneCode_Delete]
	@TimeZoneCode varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpTimeZoneCode]
WHERE
	[TimeZoneCode] = @TimeZoneCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZoneCode_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZoneCode_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpTimeZoneCode'
-- based on the Primary Key.
-- Gets: @TimeZoneCode varchar(2)
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZoneCode_SelectOne]
	@TimeZoneCode varchar(2),
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[TimeZoneCode],
	[TimeZoneName],
	[Description],
	[CallingWindowStartTime],
	[CallingWindowEndTime],
	[ConfirmitCode]
FROM [dbo].[tlkpTimeZoneCode]
WHERE
	[TimeZoneCode] = @TimeZoneCode
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpTimeZoneCode_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpTimeZoneCode_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpTimeZoneCode'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpTimeZoneCode_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[TimeZoneCode],
	[TimeZoneName],
	[Description],
	[CallingWindowStartTime],
	[CallingWindowEndTime],
	[ConfirmitCode]
FROM [dbo].[tlkpTimeZoneCode]
ORDER BY 
	[TimeZoneCode] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpTimeZoneCode]

GO

-- [Stored Procedures generated for table:  tlkpValidationStatus]

GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpValidationStatus_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpValidationStatus_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'tlkpValidationStatus'
-- Gets: @StatusID int
-- Gets: @Description varchar(50)
-- Gets: @ReportOrder int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpValidationStatus_Insert]
	@StatusID int,
	@Description varchar(50),
	@ReportOrder int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- INSERT a new row in the table.
INSERT [dbo].[tlkpValidationStatus]
(
	[StatusID],
	[Description],
	[ReportOrder]
)
VALUES
(
	@StatusID,
	@Description,
	@ReportOrder
)
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpValidationStatus_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpValidationStatus_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'tlkpValidationStatus'
-- Gets: @StatusID int
-- Gets: @Description varchar(50)
-- Gets: @ReportOrder int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpValidationStatus_Update]
	@StatusID int,
	@Description varchar(50),
	@ReportOrder int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- UPDATE an existing row in the table.
UPDATE [dbo].[tlkpValidationStatus]
SET 
	[Description] = @Description,
	[ReportOrder] = @ReportOrder
WHERE
	[StatusID] = @StatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpValidationStatus_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpValidationStatus_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'tlkpValidationStatus'
-- using the Primary Key. 
-- Gets: @StatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpValidationStatus_Delete]
	@StatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- DELETE an existing row from the table.
DELETE FROM [dbo].[tlkpValidationStatus]
WHERE
	[StatusID] = @StatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select Stored procedure, based on Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpValidationStatus_SelectOne]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpValidationStatus_SelectOne]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select an existing row from the table 'tlkpValidationStatus'
-- based on the Primary Key.
-- Gets: @StatusID int
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpValidationStatus_SelectOne]
	@StatusID int,
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT an existing row from the table.
SELECT
	[StatusID],
	[Description],
	[ReportOrder]
FROM [dbo].[tlkpValidationStatus]
WHERE
	[StatusID] = @StatusID
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_tlkpValidationStatus_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_tlkpValidationStatus_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the table 'tlkpValidationStatus'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_tlkpValidationStatus_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the table.
SELECT
	[StatusID],
	[Description],
	[ReportOrder]
FROM [dbo].[tlkpValidationStatus]
ORDER BY 
	[StatusID] ASC
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for table:     tlkpValidationStatus]

GO

-- [Stored Procedures generated for view:  vwAllNotes]

GO

-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_vwAllNotes_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_vwAllNotes_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the view 'vwAllNotes'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_vwAllNotes_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the view.
SELECT
	[CaseID],
	[MPRID],
	[NoteDate],
	[Notes],
	[Source],
	[InstrumentType],
	[UserName],
	[Round],
	[Phone]
FROM [dbo].[vwAllNotes]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for view:     vwAllNotes]

GO

-- [Stored Procedures generated for view:  vwExtAccurintResult]

GO

-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_vwExtAccurintResult_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_vwExtAccurintResult_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the view 'vwExtAccurintResult'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_vwExtAccurintResult_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the view.
SELECT
	[processes],
	[percaseid],
	[blank],
	[firstname],
	[middlename],
	[lastname],
	[dob],
	[ssn],
	[address1_1],
	[address1_2],
	[city1],
	[state1],
	[zip1],
	[phone1],
	[email1],
	[AgeOfIndividual],
	[Deceased_First_Name],
	[Deceased_Middle_Name],
	[Deceased_Last_Name],
	[Deceased_Date],
	[LinkID],
	[Address_Match],
	[Best_Street1],
	[Best_City1],
	[Best_State1],
	[Best_Zip1],
	[Best_FirstSeen1],
	[Best_LastSeen1],
	[Best_Street2],
	[Best_City2],
	[Best_State2],
	[Best_Zip2],
	[Best_FirstSeen2],
	[Best_LastSeen2],
	[Best_Street3],
	[Best_City3],
	[Best_State3],
	[Best_Zip3],
	[Best_FirstSeen3],
	[Best_LastSeen3],
	[Phone_Match],
	[Phone1_1],
	[SwitchType1],
	[PhoneLevel1],
	[Phone2],
	[SwitchType2],
	[PhoneLevel2],
	[Phone3],
	[SwitchType3],
	[PhoneLevel3],
	[rel_first_name_1],
	[rel_middle_name_1],
	[rel_last_name_1],
	[rel_address_1],
	[rel_city_1],
	[rel_state_1],
	[rel_zipcode_1],
	[rel_phone_1],
	[rel_dod_1],
	[rel_first_name_2],
	[rel_middle_name_2],
	[rel_last_name_2],
	[rel_address_2],
	[rel_city_2],
	[rel_state_2],
	[rel_zipcode_2],
	[rel_phone_2],
	[rel_dod_2],
	[rel_first_name_3],
	[rel_middle_name_3],
	[rel_last_name_3],
	[rel_address_3],
	[rel_city_3],
	[rel_state_3],
	[rel_zipcode_3],
	[rel_phone_3],
	[rel_dod_3],
	[rel_first_name_4],
	[rel_middle_name_4],
	[rel_last_name_4],
	[rel_address_4],
	[rel_city_4],
	[rel_state_4],
	[rel_zipcode_4],
	[rel_phone_4],
	[rel_dod_4],
	[rel_first_name_5],
	[rel_middle_name_5],
	[rel_last_name_5],
	[rel_address_5],
	[rel_city_5],
	[rel_state_5],
	[rel_zipcode_5],
	[rel_phone_5],
	[rel_dod_5],
	[rel_first_name_6],
	[rel_middle_name_6],
	[rel_last_name_6],
	[rel_address_6],
	[rel_city_6],
	[rel_state_6],
	[rel_zipcode_6],
	[rel_phone_6],
	[rel_dod_6],
	[asso_first_name_1],
	[asso_middle_name_1],
	[asso_last_name_1],
	[asso_address_1],
	[asso_city_1],
	[asso_state_1],
	[asso_zipcode_1],
	[asso_phone_1],
	[asso_ssn_1],
	[asso_dob_1],
	[asso_dod_1],
	[asso_first_name_2],
	[asso_middle_name_2],
	[asso_last_name_2],
	[asso_address_2],
	[asso_city_2],
	[asso_state_2],
	[asso_zipcode_2],
	[asso_phone_2],
	[asso_ssn_2],
	[asso_dob_2],
	[asso_dod_2],
	[asso_first_name_3],
	[asso_middle_name_3],
	[asso_last_name_3],
	[asso_address_3],
	[asso_city_3],
	[asso_state_3],
	[asso_zipcode_3],
	[asso_phone_3],
	[asso_ssn_3],
	[asso_dob_3],
	[asso_dod_3],
	[asso_first_name_4],
	[asso_middle_name_4],
	[asso_last_name_4],
	[asso_address_4],
	[asso_city_4],
	[asso_state_4],
	[asso_zipcode_4],
	[asso_phone_4],
	[asso_ssn_4],
	[asso_dob_4],
	[asso_dod_4],
	[asso_first_name_5],
	[asso_middle_name_5],
	[asso_last_name_5],
	[asso_address_5],
	[asso_city_5],
	[asso_state_5],
	[asso_zipcode_5],
	[asso_phone_5],
	[asso_ssn_5],
	[asso_dob_5],
	[asso_dod_5],
	[asso_first_name_6],
	[asso_middle_name_6],
	[asso_last_name_6],
	[asso_address_6],
	[asso_city_6],
	[asso_state_6],
	[asso_zipcode_6],
	[asso_phone_6],
	[asso_ssn_6],
	[asso_dob_6],
	[asso_dod_6],
	[email_orig_first_name_1],
	[email_orig_last_name_1],
	[email_orig_address_1],
	[email_orig_city_1],
	[email_orig_state_1],
	[email_orig_zip_1],
	[email_orig_zip4_1],
	[email_orig_email_1],
	[email_title_1],
	[email_fname_1],
	[email_mname_1],
	[email_lname_1],
	[email_name_suffix_1],
	[email_prim_range_1],
	[email_predir_1],
	[email_prim_name_1],
	[email_addr_suffix_1],
	[email_postdir_1],
	[email_unit_desig_1],
	[email_sec_range_1],
	[email_p_city_name_1],
	[email_st_1],
	[email_zip_1],
	[email_zip4_1],
	[email_process_date_1],
	[email_orig_first_name_2],
	[email_orig_last_name_2],
	[email_orig_address_2],
	[email_orig_city_2],
	[email_orig_state_2],
	[email_orig_zip_2],
	[email_orig_zip4_2],
	[email_orig_email_2],
	[email_title_2],
	[email_fname_2],
	[email_mname_2],
	[email_lname_2],
	[email_name_suffix_2],
	[email_prim_range_2],
	[email_predir_2],
	[email_prim_name_2],
	[email_addr_suffix_2],
	[email_postdir_2],
	[email_unit_desig_2],
	[email_sec_range_2],
	[email_p_city_name_2],
	[email_st_2],
	[email_zip_2],
	[email_zip4_2],
	[email_process_date_2],
	[email_orig_first_name_3],
	[email_orig_last_name_3],
	[email_orig_address_3],
	[email_orig_city_3],
	[email_orig_state_3],
	[email_orig_zip_3],
	[email_orig_zip4_3],
	[email_orig_email_3],
	[email_title_3],
	[email_fname_3],
	[email_mname_3],
	[email_lname_3],
	[email_name_suffix_3],
	[email_prim_range_3],
	[email_predir_3],
	[email_prim_name_3],
	[email_addr_suffix_3],
	[email_postdir_3],
	[email_unit_desig_3],
	[email_sec_range_3],
	[email_p_city_name_3],
	[email_st_3],
	[email_zip_3],
	[email_zip4_3],
	[email_process_date_3],
	[email_orig_first_name_4],
	[email_orig_last_name_4],
	[email_orig_address_4],
	[email_orig_city_4],
	[email_orig_state_4],
	[email_orig_zip_4],
	[email_orig_zip4_4],
	[email_orig_email_4],
	[email_title_4],
	[email_fname_4]
FROM [dbo].[vwExtAccurintResult]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for view:     vwExtAccurintResult]

GO

-- [Stored Procedures generated for view:  vwExtTestSample]

GO

-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_vwExtTestSample_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_vwExtTestSample_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the view 'vwExtTestSample'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_vwExtTestSample_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the view.
SELECT
	[ID],
	[FirstName],
	[MiddleName],
	[LastName],
	[DateOfBirth],
	[LanguageTypeID],
	[EmailTypeID],
	[EmailAddress],
	[PhoneNum],
	[Extension],
	[TimeZoneCode],
	[DSTI],
	[PhoneTimeID],
	[PhoneTypeID],
	[Title],
	[Prefix],
	[Suffix],
	[GenderID],
	[SSN],
	[Facility1],
	[Facility2],
	[AddressTypeID],
	[Address1],
	[Address2],
	[Address3],
	[Address4],
	[City],
	[State],
	[PostalCode],
	[County],
	[Country],
	[ImportedOn]
FROM [dbo].[vwExtTestSample]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for view:     vwExtTestSample]

GO

-- [Stored Procedures generated for view:  vwLocatingSelectionDetail]

GO

-- //// Select All Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[wiz_vwLocatingSelectionDetail_SelectAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[wiz_vwLocatingSelectionDetail_SelectAll]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will select all rows from the view 'vwLocatingSelectionDetail'
-- Returns: @ErrorCode int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[wiz_vwLocatingSelectionDetail_SelectAll]
	@ErrorCode int OUTPUT
AS
SET NOCOUNT ON
-- SELECT all rows from the view.
SELECT
	[MPRID],
	[Priority],
	[Name],
	[LocatingStatus],
	[StatusDate],
	[DateSentToLocating],
	[LastModifiedBy],
	[DaysInLocating],
	[TimesInLocating],
	[TimesTouched],
	[NumAttempts],
	[TotalSecondsInLocating],
	[TotalHoursInLocating],
	[Language],
	[State],
	[TimeZone],
	[TimeZoneCode],
	[UserName],
	[Site],
	[Accurint]
FROM [dbo].[vwLocatingSelectionDetail]
-- Get the Error Code for the statement just executed.
SELECT @ErrorCode=@@ERROR
GO


-- [End of Stored Procedures for view:     vwLocatingSelectionDetail]

GO
