' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:32 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblLocatingAttempt.
	''' </summary>

	Public Class TblLocatingAttempt
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _locatingStatus As SqlString
		Private _locatingStatusOld As SqlString

		Private _locatingAttemptDate As SqlDateTime
		Private _locatingAttemptDateOld As SqlDateTime
		Private _appointmentDateTime As SqlDateTime
		Private _appointmentDateTimeOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _emailHistoryID As SqlInt32
		Private _emailHistoryIDOld As SqlInt32
		Private _documentID As SqlInt32
		Private _documentIDOld As SqlInt32
		Private _socialNetworkHistoryID As SqlInt32
		Private _socialNetworkHistoryIDOld As SqlInt32
		Private _appointmentLocationID As SqlInt32
		Private _appointmentLocationIDOld As SqlInt32
		Private _locatingAttemptID As SqlInt32
		Private _locatingAttemptIDOld As SqlInt32
		Private _locatingEntityID As SqlInt32
		Private _locatingEntityIDOld As SqlInt32
		Private _phoneHistoryID As SqlInt32
		Private _phoneHistoryIDOld As SqlInt32
		Private _locatingAttemptTypeID As SqlInt32
		Private _locatingAttemptTypeIDOld As SqlInt32
		Private _locatingAttemptResultID As SqlInt32
		Private _locatingAttemptResultIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _personHistoryID As SqlInt32
		Private _personHistoryIDOld As SqlInt32
		Private _timeSpentInSeconds As SqlInt32
		Private _timeSpentInSecondsOld As SqlInt32
		Private _addressHistoryID As SqlInt32
		Private _addressHistoryIDOld As SqlInt32

		Private _note As SqlString
		Private _noteOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _appointmentType As SqlString
		Private _appointmentTypeOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The TblLocatingAttempt constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblLocatingAttempt class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblLocatingAttempt class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblLocatingAttempt class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_locatingAttemptID = New SqlInt32(CType(objDataRow("LocatingAttemptID"), Integer))
			
			_locatingAttemptIDOld = _locatingAttemptID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objDataRow("LocatingAttemptDate") Is System.DBNull.Value Then
				_locatingAttemptDate = SqlDateTime.Null
			Else
				_locatingAttemptDate = New SqlDateTime(CType(objDataRow("LocatingAttemptDate"), Date))
			End If
			
			_locatingAttemptDateOld = _locatingAttemptDate
			
			If objDataRow("LocatingAttemptTypeID") Is System.DBNull.Value Then
				_locatingAttemptTypeID = SqlInt32.Null
			Else
				_locatingAttemptTypeID = New SqlInt32(CType(objDataRow("LocatingAttemptTypeID"), Integer))
			End If
			
			_locatingAttemptTypeIDOld = _locatingAttemptTypeID
			
			If objDataRow("LocatingAttemptResultID") Is System.DBNull.Value Then
				_locatingAttemptResultID = SqlInt32.Null
			Else
				_locatingAttemptResultID = New SqlInt32(CType(objDataRow("LocatingAttemptResultID"), Integer))
			End If
			
			_locatingAttemptResultIDOld = _locatingAttemptResultID
			
			If objDataRow("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objDataRow("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objDataRow("TimeSpentInSeconds") Is System.DBNull.Value Then
				_timeSpentInSeconds = SqlInt32.Null
			Else
				_timeSpentInSeconds = New SqlInt32(CType(objDataRow("TimeSpentInSeconds"), Integer))
			End If
			
			_timeSpentInSecondsOld = _timeSpentInSeconds
			
			If objDataRow("PersonHistoryID") Is System.DBNull.Value Then
				_personHistoryID = SqlInt32.Null
			Else
				_personHistoryID = New SqlInt32(CType(objDataRow("PersonHistoryID"), Integer))
			End If
			
			_personHistoryIDOld = _personHistoryID
			
			If objDataRow("AddressHistoryID") Is System.DBNull.Value Then
				_addressHistoryID = SqlInt32.Null
			Else
				_addressHistoryID = New SqlInt32(CType(objDataRow("AddressHistoryID"), Integer))
			End If
			
			_addressHistoryIDOld = _addressHistoryID
			
			If objDataRow("PhoneHistoryID") Is System.DBNull.Value Then
				_phoneHistoryID = SqlInt32.Null
			Else
				_phoneHistoryID = New SqlInt32(CType(objDataRow("PhoneHistoryID"), Integer))
			End If
			
			_phoneHistoryIDOld = _phoneHistoryID
			
			If objDataRow("EmailHistoryID") Is System.DBNull.Value Then
				_emailHistoryID = SqlInt32.Null
			Else
				_emailHistoryID = New SqlInt32(CType(objDataRow("EmailHistoryID"), Integer))
			End If
			
			_emailHistoryIDOld = _emailHistoryID
			
			If objDataRow("SocialNetworkHistoryID") Is System.DBNull.Value Then
				_socialNetworkHistoryID = SqlInt32.Null
			Else
				_socialNetworkHistoryID = New SqlInt32(CType(objDataRow("SocialNetworkHistoryID"), Integer))
			End If
			
			_socialNetworkHistoryIDOld = _socialNetworkHistoryID
			
			If objDataRow("DocumentID") Is System.DBNull.Value Then
				_documentID = SqlInt32.Null
			Else
				_documentID = New SqlInt32(CType(objDataRow("DocumentID"), Integer))
			End If
			
			_documentIDOld = _documentID
			
			If objDataRow("Note") Is System.DBNull.Value Then
				_note = New SqlString("")
			Else
				_note = New SqlString(CType(objDataRow("Note"), String))
			End If
			
			_noteOld = _note
			
			If objDataRow("LocatingEntityID") Is System.DBNull.Value Then
				_locatingEntityID = SqlInt32.Null
			Else
				_locatingEntityID = New SqlInt32(CType(objDataRow("LocatingEntityID"), Integer))
			End If
			
			_locatingEntityIDOld = _locatingEntityID
			
			If objDataRow("AppointmentDateTime") Is System.DBNull.Value Then
				_appointmentDateTime = SqlDateTime.Null
			Else
				_appointmentDateTime = New SqlDateTime(CType(objDataRow("AppointmentDateTime"), Date))
			End If
			
			_appointmentDateTimeOld = _appointmentDateTime
			
			If objDataRow("AppointmentType") Is System.DBNull.Value Then
				_appointmentType = New SqlString("")
			Else
				_appointmentType = New SqlString(CType(objDataRow("AppointmentType"), String))
			End If
			
			_appointmentTypeOld = _appointmentType
			
			If objDataRow("AppointmentLocationID") Is System.DBNull.Value Then
				_appointmentLocationID = SqlInt32.Null
			Else
				_appointmentLocationID = New SqlInt32(CType(objDataRow("AppointmentLocationID"), Integer))
			End If
			
			_appointmentLocationIDOld = _appointmentLocationID
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_locatingAttemptID = New SqlInt32(CType(objSqlDataReader("LocatingAttemptID"), Integer))
			
			_locatingAttemptIDOld = _locatingAttemptID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("LocatingAttemptDate") Is System.DBNull.Value Then
				_locatingAttemptDate = SqlDateTime.Null
			Else
				_locatingAttemptDate = New SqlDateTime(CType(objSqlDataReader("LocatingAttemptDate"), Date))
			End If
			
			_locatingAttemptDateOld = _locatingAttemptDate
			
			If objSqlDataReader("LocatingAttemptTypeID") Is System.DBNull.Value Then
				_locatingAttemptTypeID = SqlInt32.Null
			Else
				_locatingAttemptTypeID = New SqlInt32(CType(objSqlDataReader("LocatingAttemptTypeID"), Integer))
			End If
			
			_locatingAttemptTypeIDOld = _locatingAttemptTypeID
			
			If objSqlDataReader("LocatingAttemptResultID") Is System.DBNull.Value Then
				_locatingAttemptResultID = SqlInt32.Null
			Else
				_locatingAttemptResultID = New SqlInt32(CType(objSqlDataReader("LocatingAttemptResultID"), Integer))
			End If
			
			_locatingAttemptResultIDOld = _locatingAttemptResultID
			
			If objSqlDataReader("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objSqlDataReader("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objSqlDataReader("TimeSpentInSeconds") Is System.DBNull.Value Then
				_timeSpentInSeconds = SqlInt32.Null
			Else
				_timeSpentInSeconds = New SqlInt32(CType(objSqlDataReader("TimeSpentInSeconds"), Integer))
			End If
			
			_timeSpentInSecondsOld = _timeSpentInSeconds
			
			If objSqlDataReader("PersonHistoryID") Is System.DBNull.Value Then
				_personHistoryID = SqlInt32.Null
			Else
				_personHistoryID = New SqlInt32(CType(objSqlDataReader("PersonHistoryID"), Integer))
			End If
			
			_personHistoryIDOld = _personHistoryID
			
			If objSqlDataReader("AddressHistoryID") Is System.DBNull.Value Then
				_addressHistoryID = SqlInt32.Null
			Else
				_addressHistoryID = New SqlInt32(CType(objSqlDataReader("AddressHistoryID"), Integer))
			End If
			
			_addressHistoryIDOld = _addressHistoryID
			
			If objSqlDataReader("PhoneHistoryID") Is System.DBNull.Value Then
				_phoneHistoryID = SqlInt32.Null
			Else
				_phoneHistoryID = New SqlInt32(CType(objSqlDataReader("PhoneHistoryID"), Integer))
			End If
			
			_phoneHistoryIDOld = _phoneHistoryID
			
			If objSqlDataReader("EmailHistoryID") Is System.DBNull.Value Then
				_emailHistoryID = SqlInt32.Null
			Else
				_emailHistoryID = New SqlInt32(CType(objSqlDataReader("EmailHistoryID"), Integer))
			End If
			
			_emailHistoryIDOld = _emailHistoryID
			
			If objSqlDataReader("SocialNetworkHistoryID") Is System.DBNull.Value Then
				_socialNetworkHistoryID = SqlInt32.Null
			Else
				_socialNetworkHistoryID = New SqlInt32(CType(objSqlDataReader("SocialNetworkHistoryID"), Integer))
			End If
			
			_socialNetworkHistoryIDOld = _socialNetworkHistoryID
			
			If objSqlDataReader("DocumentID") Is System.DBNull.Value Then
				_documentID = SqlInt32.Null
			Else
				_documentID = New SqlInt32(CType(objSqlDataReader("DocumentID"), Integer))
			End If
			
			_documentIDOld = _documentID
			
			If objSqlDataReader("Note") Is System.DBNull.Value Then
				_note = New SqlString("")
			Else
				_note = New SqlString(CType(objSqlDataReader("Note"), String))
			End If
			
			_noteOld = _note
			
			If objSqlDataReader("LocatingEntityID") Is System.DBNull.Value Then
				_locatingEntityID = SqlInt32.Null
			Else
				_locatingEntityID = New SqlInt32(CType(objSqlDataReader("LocatingEntityID"), Integer))
			End If
			
			_locatingEntityIDOld = _locatingEntityID
			
			If objSqlDataReader("AppointmentDateTime") Is System.DBNull.Value Then
				_appointmentDateTime = SqlDateTime.Null
			Else
				_appointmentDateTime = New SqlDateTime(CType(objSqlDataReader("AppointmentDateTime"), Date))
			End If
			
			_appointmentDateTimeOld = _appointmentDateTime
			
			If objSqlDataReader("AppointmentType") Is System.DBNull.Value Then
				_appointmentType = New SqlString("")
			Else
				_appointmentType = New SqlString(CType(objSqlDataReader("AppointmentType"), String))
			End If
			
			_appointmentTypeOld = _appointmentType
			
			If objSqlDataReader("AppointmentLocationID") Is System.DBNull.Value Then
				_appointmentLocationID = SqlInt32.Null
			Else
				_appointmentLocationID = New SqlInt32(CType(objSqlDataReader("AppointmentLocationID"), Integer))
			End If
			
			_appointmentLocationIDOld = _appointmentLocationID
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			
			_locatingStatus = New SqlString("")
			_locatingStatusOld = _locatingStatus
			
			
			
			
			
			
			
			
			_note = New SqlString("")
			_noteOld = _note
			
			
			
			_appointmentType = New SqlString("")
			_appointmentTypeOld = _appointmentType
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_locatingAttemptID = _locatingAttemptIDOld
			
			_round = _roundOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_locatingAttemptDate = _locatingAttemptDateOld
			
			_locatingAttemptTypeID = _locatingAttemptTypeIDOld
			
			_locatingAttemptResultID = _locatingAttemptResultIDOld
			
			_locatingStatus = _locatingStatusOld
			
			_timeSpentInSeconds = _timeSpentInSecondsOld
			
			_personHistoryID = _personHistoryIDOld
			
			_addressHistoryID = _addressHistoryIDOld
			
			_phoneHistoryID = _phoneHistoryIDOld
			
			_emailHistoryID = _emailHistoryIDOld
			
			_socialNetworkHistoryID = _socialNetworkHistoryIDOld
			
			_documentID = _documentIDOld
			
			_note = _noteOld
			
			_locatingEntityID = _locatingEntityIDOld
			
			_appointmentDateTime = _appointmentDateTimeOld
			
			_appointmentType = _appointmentTypeOld
			
			_appointmentLocationID = _appointmentLocationIDOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingAttemptDate. May be SqlDateTime.Null</LI>
		'''		 <LI>LocatingAttemptTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>LocatingAttemptResultID. May be SqlInt32.Null</LI>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		'''		 <LI>TimeSpentInSeconds. May be SqlInt32.Null</LI>
		'''		 <LI>PersonHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>AddressHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>EmailHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>SocialNetworkHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>DocumentID. May be SqlInt32.Null</LI>
		'''		 <LI>Note. May be SqlString.Null</LI>
		'''		 <LI>LocatingEntityID. May be SqlInt32.Null</LI>
		'''		 <LI>AppointmentDateTime. May be SqlDateTime.Null</LI>
		'''		 <LI>AppointmentType. May be SqlString.Null</LI>
		'''		 <LI>AppointmentLocationID. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>LocatingAttemptID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@TimeSpentInSeconds", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _timeSpentInSeconds))
				cmdToExecute.Parameters.Add(New SqlParameter("@PersonHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _personHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmailHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _emailHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Note", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _note))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingEntityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingEntityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentDateTime", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appointmentDateTime))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentType", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appointmentType))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentLocationID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _appointmentLocationID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingAttemptID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_locatingAttemptID = CType(cmdToExecute.Parameters.Item("@LocatingAttemptID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingAttemptDate. May be SqlDateTime.Null</LI>
		'''		 <LI>LocatingAttemptTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>LocatingAttemptResultID. May be SqlInt32.Null</LI>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		'''		 <LI>TimeSpentInSeconds. May be SqlInt32.Null</LI>
		'''		 <LI>PersonHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>AddressHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>EmailHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>SocialNetworkHistoryID. May be SqlInt32.Null</LI>
		'''		 <LI>DocumentID. May be SqlInt32.Null</LI>
		'''		 <LI>Note. May be SqlString.Null</LI>
		'''		 <LI>LocatingEntityID. May be SqlInt32.Null</LI>
		'''		 <LI>AppointmentDateTime. May be SqlDateTime.Null</LI>
		'''		 <LI>AppointmentType. May be SqlString.Null</LI>
		'''		 <LI>AppointmentLocationID. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@TimeSpentInSeconds", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _timeSpentInSeconds))
				cmdToExecute.Parameters.Add(New SqlParameter("@PersonHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _personHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmailHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _emailHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Note", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _note))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingEntityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _locatingEntityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentDateTime", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appointmentDateTime))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentType", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appointmentType))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppointmentLocationID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _appointmentLocationID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'MPRID.
		''' It will reset the field 'MPRID' in
		''' all rows which have as value for this field the value as set in property 'MPRIDOld' to 
		''' the value as set in property 'MPRID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		'''		 <LI>MPRIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWMPRIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_UpdateAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRIDOld", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 8, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_UpdateAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::UpdateAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>LocatingAttemptID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingAttemptDate</LI>
		'''		 <LI>LocatingAttemptTypeID</LI>
		'''		 <LI>LocatingAttemptResultID</LI>
		'''		 <LI>LocatingStatus</LI>
		'''		 <LI>TimeSpentInSeconds</LI>
		'''		 <LI>PersonHistoryID</LI>
		'''		 <LI>AddressHistoryID</LI>
		'''		 <LI>PhoneHistoryID</LI>
		'''		 <LI>EmailHistoryID</LI>
		'''		 <LI>SocialNetworkHistoryID</LI>
		'''		 <LI>DocumentID</LI>
		'''		 <LI>Note</LI>
		'''		 <LI>LocatingEntityID</LI>
		'''		 <LI>AppointmentDateTime</LI>
		'''		 <LI>AppointmentType</LI>
		'''		 <LI>AppointmentLocationID</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingAttempt")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingAttemptID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingAttempt")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'MPRID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWMPRIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingAttempt_SelectAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingAttempt")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingAttempt_SelectAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingAttempt::SelectAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptID]() As SqlInt32
			Get
				Return _locatingAttemptID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingAttemptID.Equals(Value) Then
					If _locatingAttemptIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptID.Equals(_locatingAttemptIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim locatingAttemptIDTmp As SqlInt32 = Value
				If locatingAttemptIDTmp.IsNull Then
					Throw New NullValueException("LocatingAttemptID", "LocatingAttemptID can't be NULL")
				End If
				_locatingAttemptID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property
		Protected Property [MPRIDOld]() As SqlString
			Get
				Return _mPRIDOld
			End Get
			Set(ByVal Value As SqlString)
				Dim mPRIDOldTmp As SqlString = Value
				If mPRIDOldTmp.IsNull Then
					Throw New NullValueException("MPRIDOld", "MPRIDOld can't be NULL")
				End If
				_mPRIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptDate]() As SqlDateTime
			Get
				Return _locatingAttemptDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _locatingAttemptDate.Equals(Value) Then
					If _locatingAttemptDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptDate.Equals(_locatingAttemptDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_locatingAttemptDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptTypeID]() As SqlInt32
			Get
				Return _locatingAttemptTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingAttemptTypeID.Equals(Value) Then
					If _locatingAttemptTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptTypeID.Equals(_locatingAttemptTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_locatingAttemptTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptResultID]() As SqlInt32
			Get
				Return _locatingAttemptResultID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingAttemptResultID.Equals(Value) Then
					If _locatingAttemptResultIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptResultID.Equals(_locatingAttemptResultIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_locatingAttemptResultID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingStatus]() As SqlString
			Get
				Return _locatingStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingStatus.IsNull Then
					CurrentValue = _locatingStatus.Value
				End If
				If Not _locatingStatusOld.IsNull Then
					OldValue = _locatingStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimeSpentInSeconds]() As SqlInt32
			Get
				Return _timeSpentInSeconds
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _timeSpentInSeconds.Equals(Value) Then
					If _timeSpentInSecondsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _timeSpentInSeconds.Equals(_timeSpentInSecondsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_timeSpentInSeconds = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PersonHistoryID]() As SqlInt32
			Get
				Return _personHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _personHistoryID.Equals(Value) Then
					If _personHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _personHistoryID.Equals(_personHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_personHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressHistoryID]() As SqlInt32
			Get
				Return _addressHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressHistoryID.Equals(Value) Then
					If _addressHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressHistoryID.Equals(_addressHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_addressHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneHistoryID]() As SqlInt32
			Get
				Return _phoneHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneHistoryID.Equals(Value) Then
					If _phoneHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneHistoryID.Equals(_phoneHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EmailHistoryID]() As SqlInt32
			Get
				Return _emailHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _emailHistoryID.Equals(Value) Then
					If _emailHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _emailHistoryID.Equals(_emailHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_emailHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SocialNetworkHistoryID]() As SqlInt32
			Get
				Return _socialNetworkHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _socialNetworkHistoryID.Equals(Value) Then
					If _socialNetworkHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _socialNetworkHistoryID.Equals(_socialNetworkHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_socialNetworkHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DocumentID]() As SqlInt32
			Get
				Return _documentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentID.Equals(Value) Then
					If _documentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentID.Equals(_documentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_documentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Note]() As SqlString
			Get
				Return _note
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _note.IsNull Then
					CurrentValue = _note.Value
				End If
				If Not _noteOld.IsNull Then
					OldValue = _noteOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_note = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingEntityID]() As SqlInt32
			Get
				Return _locatingEntityID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingEntityID.Equals(Value) Then
					If _locatingEntityIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingEntityID.Equals(_locatingEntityIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_locatingEntityID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AppointmentDateTime]() As SqlDateTime
			Get
				Return _appointmentDateTime
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _appointmentDateTime.Equals(Value) Then
					If _appointmentDateTimeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _appointmentDateTime.Equals(_appointmentDateTimeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_appointmentDateTime = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AppointmentType]() As SqlString
			Get
				Return _appointmentType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _appointmentType.IsNull Then
					CurrentValue = _appointmentType.Value
				End If
				If Not _appointmentTypeOld.IsNull Then
					OldValue = _appointmentTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_appointmentType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AppointmentLocationID]() As SqlInt32
			Get
				Return _appointmentLocationID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _appointmentLocationID.Equals(Value) Then
					If _appointmentLocationIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _appointmentLocationID.Equals(_appointmentLocationIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_appointmentLocationID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
