' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:30 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblCaseRA.
	''' </summary>

	Public Class TblCaseRA
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _overrideDuplicate As SqlBoolean
		Private _overrideDuplicateOld As SqlBoolean

		Private _researchStatus As SqlString
		Private _researchStatusOld As SqlString
		Private _randomizationStatus As SqlString
		Private _randomizationStatusOld As SqlString
		Private _randomAssignment As SqlString
		Private _randomAssignmentOld As SqlString

		Private _randomizationDate As SqlDateTime
		Private _randomizationDateOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _randomNumber As SqlDouble
		Private _randomNumberOld As SqlDouble

		Private _numberOfDuplicates As SqlInt32
		Private _numberOfDuplicatesOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _forcedAssignmentFlag As SqlInt32
		Private _forcedAssignmentFlagOld As SqlInt32
		Private _nonResearchReason As SqlInt32
		Private _nonResearchReasonOld As SqlInt32
		Private _stratificationCode1 As SqlInt32
		Private _stratificationCode1Old As SqlInt32
		Private _stratificationCode2 As SqlInt32
		Private _stratificationCode2Old As SqlInt32
		Private _numberOfErrors As SqlInt32
		Private _numberOfErrorsOld As SqlInt32
		Private _numberOfRAChoices As SqlInt32
		Private _numberOfRAChoicesOld As SqlInt32

		Private _forcedAssignment As SqlString
		Private _forcedAssignmentOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The TblCaseRA constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblCaseRA class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCaseRA class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCaseRA class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("RandomAssignment") Is System.DBNull.Value Then
				_randomAssignment = New SqlString("")
			Else
				_randomAssignment = New SqlString(CType(objDataRow("RandomAssignment"), String))
			End If
			
			_randomAssignmentOld = _randomAssignment
			
			If objDataRow("ResearchStatus") Is System.DBNull.Value Then
				_researchStatus = New SqlString("")
			Else
				_researchStatus = New SqlString(CType(objDataRow("ResearchStatus"), String))
			End If
			
			_researchStatusOld = _researchStatus
			
			If objDataRow("NonResearchReason") Is System.DBNull.Value Then
				_nonResearchReason = SqlInt32.Null
			Else
				_nonResearchReason = New SqlInt32(CType(objDataRow("NonResearchReason"), Integer))
			End If
			
			_nonResearchReasonOld = _nonResearchReason
			
			If objDataRow("RandomNumber") Is System.DBNull.Value Then
				_randomNumber = SqlDouble.Null
			Else
				_randomNumber = New SqlDouble(CType(objDataRow("RandomNumber"), Double))
			End If
			
			_randomNumberOld = _randomNumber
			
			If objDataRow("RandomizationStatus") Is System.DBNull.Value Then
				_randomizationStatus = New SqlString("")
			Else
				_randomizationStatus = New SqlString(CType(objDataRow("RandomizationStatus"), String))
			End If
			
			_randomizationStatusOld = _randomizationStatus
			
			If objDataRow("RandomizationDate") Is System.DBNull.Value Then
				_randomizationDate = SqlDateTime.Null
			Else
				_randomizationDate = New SqlDateTime(CType(objDataRow("RandomizationDate"), Date))
			End If
			
			_randomizationDateOld = _randomizationDate
			
			If objDataRow("StratificationCode1") Is System.DBNull.Value Then
				_stratificationCode1 = SqlInt32.Null
			Else
				_stratificationCode1 = New SqlInt32(CType(objDataRow("StratificationCode1"), Integer))
			End If
			
			_stratificationCode1Old = _stratificationCode1
			
			If objDataRow("StratificationCode2") Is System.DBNull.Value Then
				_stratificationCode2 = SqlInt32.Null
			Else
				_stratificationCode2 = New SqlInt32(CType(objDataRow("StratificationCode2"), Integer))
			End If
			
			_stratificationCode2Old = _stratificationCode2
			
			If objDataRow("NumberOfRAChoices") Is System.DBNull.Value Then
				_numberOfRAChoices = SqlInt32.Null
			Else
				_numberOfRAChoices = New SqlInt32(CType(objDataRow("NumberOfRAChoices"), Integer))
			End If
			
			_numberOfRAChoicesOld = _numberOfRAChoices
			
			If objDataRow("NumberOfErrors") Is System.DBNull.Value Then
				_numberOfErrors = SqlInt32.Null
			Else
				_numberOfErrors = New SqlInt32(CType(objDataRow("NumberOfErrors"), Integer))
			End If
			
			_numberOfErrorsOld = _numberOfErrors
			
			If objDataRow("NumberOfDuplicates") Is System.DBNull.Value Then
				_numberOfDuplicates = SqlInt32.Null
			Else
				_numberOfDuplicates = New SqlInt32(CType(objDataRow("NumberOfDuplicates"), Integer))
			End If
			
			_numberOfDuplicatesOld = _numberOfDuplicates
			
			If objDataRow("OverrideDuplicate") Is System.DBNull.Value Then
				_overrideDuplicate = New SqlBoolean(False)
			Else
				_overrideDuplicate = New SqlBoolean(CType(objDataRow("OverrideDuplicate"), Boolean))
			End If
			
			_overrideDuplicateOld = _overrideDuplicate
			
			If objDataRow("ForcedAssignmentFlag") Is System.DBNull.Value Then
				_forcedAssignmentFlag = SqlInt32.Null
			Else
				_forcedAssignmentFlag = New SqlInt32(CType(objDataRow("ForcedAssignmentFlag"), Integer))
			End If
			
			_forcedAssignmentFlagOld = _forcedAssignmentFlag
			
			If objDataRow("ForcedAssignment") Is System.DBNull.Value Then
				_forcedAssignment = New SqlString("")
			Else
				_forcedAssignment = New SqlString(CType(objDataRow("ForcedAssignment"), String))
			End If
			
			_forcedAssignmentOld = _forcedAssignment
			
			_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("RandomAssignment") Is System.DBNull.Value Then
				_randomAssignment = New SqlString("")
			Else
				_randomAssignment = New SqlString(CType(objSqlDataReader("RandomAssignment"), String))
			End If
			
			_randomAssignmentOld = _randomAssignment
			
			If objSqlDataReader("ResearchStatus") Is System.DBNull.Value Then
				_researchStatus = New SqlString("")
			Else
				_researchStatus = New SqlString(CType(objSqlDataReader("ResearchStatus"), String))
			End If
			
			_researchStatusOld = _researchStatus
			
			If objSqlDataReader("NonResearchReason") Is System.DBNull.Value Then
				_nonResearchReason = SqlInt32.Null
			Else
				_nonResearchReason = New SqlInt32(CType(objSqlDataReader("NonResearchReason"), Integer))
			End If
			
			_nonResearchReasonOld = _nonResearchReason
			
			If objSqlDataReader("RandomNumber") Is System.DBNull.Value Then
				_randomNumber = SqlDouble.Null
			Else
				_randomNumber = New SqlDouble(CType(objSqlDataReader("RandomNumber"), Double))
			End If
			
			_randomNumberOld = _randomNumber
			
			If objSqlDataReader("RandomizationStatus") Is System.DBNull.Value Then
				_randomizationStatus = New SqlString("")
			Else
				_randomizationStatus = New SqlString(CType(objSqlDataReader("RandomizationStatus"), String))
			End If
			
			_randomizationStatusOld = _randomizationStatus
			
			If objSqlDataReader("RandomizationDate") Is System.DBNull.Value Then
				_randomizationDate = SqlDateTime.Null
			Else
				_randomizationDate = New SqlDateTime(CType(objSqlDataReader("RandomizationDate"), Date))
			End If
			
			_randomizationDateOld = _randomizationDate
			
			If objSqlDataReader("StratificationCode1") Is System.DBNull.Value Then
				_stratificationCode1 = SqlInt32.Null
			Else
				_stratificationCode1 = New SqlInt32(CType(objSqlDataReader("StratificationCode1"), Integer))
			End If
			
			_stratificationCode1Old = _stratificationCode1
			
			If objSqlDataReader("StratificationCode2") Is System.DBNull.Value Then
				_stratificationCode2 = SqlInt32.Null
			Else
				_stratificationCode2 = New SqlInt32(CType(objSqlDataReader("StratificationCode2"), Integer))
			End If
			
			_stratificationCode2Old = _stratificationCode2
			
			If objSqlDataReader("NumberOfRAChoices") Is System.DBNull.Value Then
				_numberOfRAChoices = SqlInt32.Null
			Else
				_numberOfRAChoices = New SqlInt32(CType(objSqlDataReader("NumberOfRAChoices"), Integer))
			End If
			
			_numberOfRAChoicesOld = _numberOfRAChoices
			
			If objSqlDataReader("NumberOfErrors") Is System.DBNull.Value Then
				_numberOfErrors = SqlInt32.Null
			Else
				_numberOfErrors = New SqlInt32(CType(objSqlDataReader("NumberOfErrors"), Integer))
			End If
			
			_numberOfErrorsOld = _numberOfErrors
			
			If objSqlDataReader("NumberOfDuplicates") Is System.DBNull.Value Then
				_numberOfDuplicates = SqlInt32.Null
			Else
				_numberOfDuplicates = New SqlInt32(CType(objSqlDataReader("NumberOfDuplicates"), Integer))
			End If
			
			_numberOfDuplicatesOld = _numberOfDuplicates
			
			If objSqlDataReader("OverrideDuplicate") Is System.DBNull.Value Then
				_overrideDuplicate = New SqlBoolean(False)
			Else
				_overrideDuplicate = New SqlBoolean(CType(objSqlDataReader("OverrideDuplicate"), Boolean))
			End If
			
			_overrideDuplicateOld = _overrideDuplicate
			
			If objSqlDataReader("ForcedAssignmentFlag") Is System.DBNull.Value Then
				_forcedAssignmentFlag = SqlInt32.Null
			Else
				_forcedAssignmentFlag = New SqlInt32(CType(objSqlDataReader("ForcedAssignmentFlag"), Integer))
			End If
			
			_forcedAssignmentFlagOld = _forcedAssignmentFlag
			
			If objSqlDataReader("ForcedAssignment") Is System.DBNull.Value Then
				_forcedAssignment = New SqlString("")
			Else
				_forcedAssignment = New SqlString(CType(objSqlDataReader("ForcedAssignment"), String))
			End If
			
			_forcedAssignmentOld = _forcedAssignment
			
			_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_randomAssignment = New SqlString("")
			_randomAssignmentOld = _randomAssignment
			
			_researchStatus = New SqlString("")
			_researchStatusOld = _researchStatus
			
			
			
			_randomizationStatus = New SqlString("")
			_randomizationStatusOld = _randomizationStatus
			
			
			
			
			
			
			
			_overrideDuplicate = New SqlBoolean(False)
			_overrideDuplicateOld = _overrideDuplicate
			
			
			_forcedAssignment = New SqlString("")
			_forcedAssignmentOld = _forcedAssignment
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_caseID = _caseIDOld
			
			_randomAssignment = _randomAssignmentOld
			
			_researchStatus = _researchStatusOld
			
			_nonResearchReason = _nonResearchReasonOld
			
			_randomNumber = _randomNumberOld
			
			_randomizationStatus = _randomizationStatusOld
			
			_randomizationDate = _randomizationDateOld
			
			_stratificationCode1 = _stratificationCode1Old
			
			_stratificationCode2 = _stratificationCode2Old
			
			_numberOfRAChoices = _numberOfRAChoicesOld
			
			_numberOfErrors = _numberOfErrorsOld
			
			_numberOfDuplicates = _numberOfDuplicatesOld
			
			_overrideDuplicate = _overrideDuplicateOld
			
			_forcedAssignmentFlag = _forcedAssignmentFlagOld
			
			_forcedAssignment = _forcedAssignmentOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>RandomAssignment. May be SqlString.Null</LI>
		'''		 <LI>ResearchStatus. May be SqlString.Null</LI>
		'''		 <LI>NonResearchReason. May be SqlInt32.Null</LI>
		'''		 <LI>RandomNumber. May be SqlDouble.Null</LI>
		'''		 <LI>RandomizationStatus. May be SqlString.Null</LI>
		'''		 <LI>RandomizationDate. May be SqlDateTime.Null</LI>
		'''		 <LI>StratificationCode1. May be SqlInt32.Null</LI>
		'''		 <LI>StratificationCode2. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfRAChoices. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfErrors. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfDuplicates. May be SqlInt32.Null</LI>
		'''		 <LI>OverrideDuplicate. May be SqlBoolean.Null</LI>
		'''		 <LI>ForcedAssignmentFlag. May be SqlInt32.Null</LI>
		'''		 <LI>ForcedAssignment. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseRA_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomAssignment", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomAssignment))
				cmdToExecute.Parameters.Add(New SqlParameter("@ResearchStatus", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _researchStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@NonResearchReason", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _nonResearchReason))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomNumber", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _randomNumber))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomizationStatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomizationStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomizationDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomizationDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@StratificationCode1", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stratificationCode1))
				cmdToExecute.Parameters.Add(New SqlParameter("@StratificationCode2", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stratificationCode2))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfRAChoices", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfRAChoices))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfErrors", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfErrors))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfDuplicates", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfDuplicates))
				cmdToExecute.Parameters.Add(New SqlParameter("@OverrideDuplicate", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _overrideDuplicate))
				cmdToExecute.Parameters.Add(New SqlParameter("@ForcedAssignmentFlag", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _forcedAssignmentFlag))
				cmdToExecute.Parameters.Add(New SqlParameter("@ForcedAssignment", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _forcedAssignment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseRA_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseRA::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>RandomAssignment. May be SqlString.Null</LI>
		'''		 <LI>ResearchStatus. May be SqlString.Null</LI>
		'''		 <LI>NonResearchReason. May be SqlInt32.Null</LI>
		'''		 <LI>RandomNumber. May be SqlDouble.Null</LI>
		'''		 <LI>RandomizationStatus. May be SqlString.Null</LI>
		'''		 <LI>RandomizationDate. May be SqlDateTime.Null</LI>
		'''		 <LI>StratificationCode1. May be SqlInt32.Null</LI>
		'''		 <LI>StratificationCode2. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfRAChoices. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfErrors. May be SqlInt32.Null</LI>
		'''		 <LI>NumberOfDuplicates. May be SqlInt32.Null</LI>
		'''		 <LI>OverrideDuplicate. May be SqlBoolean.Null</LI>
		'''		 <LI>ForcedAssignmentFlag. May be SqlInt32.Null</LI>
		'''		 <LI>ForcedAssignment. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseRA_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomAssignment", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomAssignment))
				cmdToExecute.Parameters.Add(New SqlParameter("@ResearchStatus", SqlDbType.Char, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _researchStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@NonResearchReason", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _nonResearchReason))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomNumber", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _randomNumber))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomizationStatus", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomizationStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@RandomizationDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _randomizationDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@StratificationCode1", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stratificationCode1))
				cmdToExecute.Parameters.Add(New SqlParameter("@StratificationCode2", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stratificationCode2))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfRAChoices", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfRAChoices))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfErrors", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfErrors))
				cmdToExecute.Parameters.Add(New SqlParameter("@NumberOfDuplicates", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _numberOfDuplicates))
				cmdToExecute.Parameters.Add(New SqlParameter("@OverrideDuplicate", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _overrideDuplicate))
				cmdToExecute.Parameters.Add(New SqlParameter("@ForcedAssignmentFlag", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _forcedAssignmentFlag))
				cmdToExecute.Parameters.Add(New SqlParameter("@ForcedAssignment", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _forcedAssignment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseRA_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseRA::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseRA_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseRA_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseRA::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>RandomAssignment</LI>
		'''		 <LI>ResearchStatus</LI>
		'''		 <LI>NonResearchReason</LI>
		'''		 <LI>RandomNumber</LI>
		'''		 <LI>RandomizationStatus</LI>
		'''		 <LI>RandomizationDate</LI>
		'''		 <LI>StratificationCode1</LI>
		'''		 <LI>StratificationCode2</LI>
		'''		 <LI>NumberOfRAChoices</LI>
		'''		 <LI>NumberOfErrors</LI>
		'''		 <LI>NumberOfDuplicates</LI>
		'''		 <LI>OverrideDuplicate</LI>
		'''		 <LI>ForcedAssignmentFlag</LI>
		'''		 <LI>ForcedAssignment</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseRA_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseRA")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseRA_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseRA::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseRA_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseRA")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseRA_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseRA::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(0)", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RandomAssignment]() As SqlString
			Get
				Return _randomAssignment
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _randomAssignment.IsNull Then
					CurrentValue = _randomAssignment.Value
				End If
				If Not _randomAssignmentOld.IsNull Then
					OldValue = _randomAssignmentOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_randomAssignment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ResearchStatus]() As SqlString
			Get
				Return _researchStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _researchStatus.IsNull Then
					CurrentValue = _researchStatus.Value
				End If
				If Not _researchStatusOld.IsNull Then
					OldValue = _researchStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_researchStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NonResearchReason]() As SqlInt32
			Get
				Return _nonResearchReason
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _nonResearchReason.Equals(Value) Then
					If _nonResearchReasonOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _nonResearchReason.Equals(_nonResearchReasonOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_nonResearchReason = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RandomNumber]() As SqlDouble
			Get
				Return _randomNumber
			End Get
			Set(ByVal Value As SqlDouble)
				If Not _randomNumber.Equals(Value) Then
					If _randomNumberOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _randomNumber.Equals(_randomNumberOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_randomNumber = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RandomizationStatus]() As SqlString
			Get
				Return _randomizationStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _randomizationStatus.IsNull Then
					CurrentValue = _randomizationStatus.Value
				End If
				If Not _randomizationStatusOld.IsNull Then
					OldValue = _randomizationStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_randomizationStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RandomizationDate]() As SqlDateTime
			Get
				Return _randomizationDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _randomizationDate.Equals(Value) Then
					If _randomizationDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _randomizationDate.Equals(_randomizationDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_randomizationDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StratificationCode1]() As SqlInt32
			Get
				Return _stratificationCode1
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _stratificationCode1.Equals(Value) Then
					If _stratificationCode1Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _stratificationCode1.Equals(_stratificationCode1Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_stratificationCode1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StratificationCode2]() As SqlInt32
			Get
				Return _stratificationCode2
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _stratificationCode2.Equals(Value) Then
					If _stratificationCode2Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _stratificationCode2.Equals(_stratificationCode2Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_stratificationCode2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NumberOfRAChoices]() As SqlInt32
			Get
				Return _numberOfRAChoices
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _numberOfRAChoices.Equals(Value) Then
					If _numberOfRAChoicesOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _numberOfRAChoices.Equals(_numberOfRAChoicesOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_numberOfRAChoices = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NumberOfErrors]() As SqlInt32
			Get
				Return _numberOfErrors
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _numberOfErrors.Equals(Value) Then
					If _numberOfErrorsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _numberOfErrors.Equals(_numberOfErrorsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_numberOfErrors = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NumberOfDuplicates]() As SqlInt32
			Get
				Return _numberOfDuplicates
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _numberOfDuplicates.Equals(Value) Then
					If _numberOfDuplicatesOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _numberOfDuplicates.Equals(_numberOfDuplicatesOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_numberOfDuplicates = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OverrideDuplicate]() As SqlBoolean
			Get
				Return _overrideDuplicate
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _overrideDuplicate.Equals(Value) Then
					If _overrideDuplicateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _overrideDuplicate.Equals(_overrideDuplicateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_overrideDuplicate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ForcedAssignmentFlag]() As SqlInt32
			Get
				Return _forcedAssignmentFlag
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _forcedAssignmentFlag.Equals(Value) Then
					If _forcedAssignmentFlagOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _forcedAssignmentFlag.Equals(_forcedAssignmentFlagOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_forcedAssignmentFlag = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ForcedAssignment]() As SqlString
			Get
				Return _forcedAssignment
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _forcedAssignment.IsNull Then
					CurrentValue = _forcedAssignment.Value
				End If
				If Not _forcedAssignmentOld.IsNull Then
					OldValue = _forcedAssignmentOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_forcedAssignment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
