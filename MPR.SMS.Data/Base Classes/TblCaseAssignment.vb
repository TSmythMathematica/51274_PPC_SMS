' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:30 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblCaseAssignment.
	''' </summary>

	Public Class TblCaseAssignment
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _lastReleasedOn As SqlDateTime
		Private _lastReleasedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _dateAssigned As SqlDateTime
		Private _dateAssignedOld As SqlDateTime

		Private _lastReleasedTo As SqlInt32
		Private _lastReleasedToOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _caseAssignmentID As SqlInt32
		Private _caseAssignmentIDOld As SqlInt32
		Private _interviewerSupervisorID As SqlInt32
		Private _interviewerSupervisorIDOld As SqlInt32
		Private _interviewerTeamID As SqlInt32
		Private _interviewerTeamIDOld As SqlInt32
		Private _interviewerRegionID As SqlInt32
		Private _interviewerRegionIDOld As SqlInt32
		Private _interviewerID As SqlInt32
		Private _interviewerIDOld As SqlInt32

		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString

#End Region

		''' <overloads>
		''' The TblCaseAssignment constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblCaseAssignment class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCaseAssignment class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCaseAssignment class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_caseAssignmentID = New SqlInt32(CType(objDataRow("CaseAssignmentID"), Integer))
			
			_caseAssignmentIDOld = _caseAssignmentID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("InterviewerRegionID") Is System.DBNull.Value Then
				_interviewerRegionID = SqlInt32.Null
			Else
				_interviewerRegionID = New SqlInt32(CType(objDataRow("InterviewerRegionID"), Integer))
			End If
			
			_interviewerRegionIDOld = _interviewerRegionID
			
			If objDataRow("InterviewerSupervisorID") Is System.DBNull.Value Then
				_interviewerSupervisorID = SqlInt32.Null
			Else
				_interviewerSupervisorID = New SqlInt32(CType(objDataRow("InterviewerSupervisorID"), Integer))
			End If
			
			_interviewerSupervisorIDOld = _interviewerSupervisorID
			
			If objDataRow("InterviewerTeamID") Is System.DBNull.Value Then
				_interviewerTeamID = SqlInt32.Null
			Else
				_interviewerTeamID = New SqlInt32(CType(objDataRow("InterviewerTeamID"), Integer))
			End If
			
			_interviewerTeamIDOld = _interviewerTeamID
			
			If objDataRow("InterviewerID") Is System.DBNull.Value Then
				_interviewerID = SqlInt32.Null
			Else
				_interviewerID = New SqlInt32(CType(objDataRow("InterviewerID"), Integer))
			End If
			
			_interviewerIDOld = _interviewerID
			
			If objDataRow("DateAssigned") Is System.DBNull.Value Then
				_dateAssigned = SqlDateTime.Null
			Else
				_dateAssigned = New SqlDateTime(CType(objDataRow("DateAssigned"), Date))
			End If
			
			_dateAssignedOld = _dateAssigned
			
			If objDataRow("LastReleasedTo") Is System.DBNull.Value Then
				_lastReleasedTo = SqlInt32.Null
			Else
				_lastReleasedTo = New SqlInt32(CType(objDataRow("LastReleasedTo"), Integer))
			End If
			
			_lastReleasedToOld = _lastReleasedTo
			
			If objDataRow("LastReleasedOn") Is System.DBNull.Value Then
				_lastReleasedOn = SqlDateTime.Null
			Else
				_lastReleasedOn = New SqlDateTime(CType(objDataRow("LastReleasedOn"), Date))
			End If
			
			_lastReleasedOnOld = _lastReleasedOn
			
			_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_caseAssignmentID = New SqlInt32(CType(objSqlDataReader("CaseAssignmentID"), Integer))
			
			_caseAssignmentIDOld = _caseAssignmentID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("InterviewerRegionID") Is System.DBNull.Value Then
				_interviewerRegionID = SqlInt32.Null
			Else
				_interviewerRegionID = New SqlInt32(CType(objSqlDataReader("InterviewerRegionID"), Integer))
			End If
			
			_interviewerRegionIDOld = _interviewerRegionID
			
			If objSqlDataReader("InterviewerSupervisorID") Is System.DBNull.Value Then
				_interviewerSupervisorID = SqlInt32.Null
			Else
				_interviewerSupervisorID = New SqlInt32(CType(objSqlDataReader("InterviewerSupervisorID"), Integer))
			End If
			
			_interviewerSupervisorIDOld = _interviewerSupervisorID
			
			If objSqlDataReader("InterviewerTeamID") Is System.DBNull.Value Then
				_interviewerTeamID = SqlInt32.Null
			Else
				_interviewerTeamID = New SqlInt32(CType(objSqlDataReader("InterviewerTeamID"), Integer))
			End If
			
			_interviewerTeamIDOld = _interviewerTeamID
			
			If objSqlDataReader("InterviewerID") Is System.DBNull.Value Then
				_interviewerID = SqlInt32.Null
			Else
				_interviewerID = New SqlInt32(CType(objSqlDataReader("InterviewerID"), Integer))
			End If
			
			_interviewerIDOld = _interviewerID
			
			If objSqlDataReader("DateAssigned") Is System.DBNull.Value Then
				_dateAssigned = SqlDateTime.Null
			Else
				_dateAssigned = New SqlDateTime(CType(objSqlDataReader("DateAssigned"), Date))
			End If
			
			_dateAssignedOld = _dateAssigned
			
			If objSqlDataReader("LastReleasedTo") Is System.DBNull.Value Then
				_lastReleasedTo = SqlInt32.Null
			Else
				_lastReleasedTo = New SqlInt32(CType(objSqlDataReader("LastReleasedTo"), Integer))
			End If
			
			_lastReleasedToOld = _lastReleasedTo
			
			If objSqlDataReader("LastReleasedOn") Is System.DBNull.Value Then
				_lastReleasedOn = SqlDateTime.Null
			Else
				_lastReleasedOn = New SqlDateTime(CType(objSqlDataReader("LastReleasedOn"), Date))
			End If
			
			_lastReleasedOnOld = _lastReleasedOn
			
			_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			
			
			
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_caseAssignmentID = _caseAssignmentIDOld
			
			_caseID = _caseIDOld
			
			_interviewerRegionID = _interviewerRegionIDOld
			
			_interviewerSupervisorID = _interviewerSupervisorIDOld
			
			_interviewerTeamID = _interviewerTeamIDOld
			
			_interviewerID = _interviewerIDOld
			
			_dateAssigned = _dateAssignedOld
			
			_lastReleasedTo = _lastReleasedToOld
			
			_lastReleasedOn = _lastReleasedOnOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>InterviewerRegionID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerTeamID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerID. May be SqlInt32.Null</LI>
		'''		 <LI>DateAssigned. May be SqlDateTime.Null</LI>
		'''		 <LI>LastReleasedTo. May be SqlInt32.Null</LI>
		'''		 <LI>LastReleasedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>CaseAssignmentID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerRegionID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerRegionID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerTeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerTeamID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateAssigned", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateAssigned))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastReleasedTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _lastReleasedTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastReleasedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastReleasedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseAssignmentID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _caseAssignmentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_caseAssignmentID = CType(cmdToExecute.Parameters.Item("@CaseAssignmentID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseAssignmentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>InterviewerRegionID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerTeamID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerID. May be SqlInt32.Null</LI>
		'''		 <LI>DateAssigned. May be SqlDateTime.Null</LI>
		'''		 <LI>LastReleasedTo. May be SqlInt32.Null</LI>
		'''		 <LI>LastReleasedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseAssignmentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseAssignmentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerRegionID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerRegionID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerTeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerTeamID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateAssigned", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateAssigned))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastReleasedTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _lastReleasedTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastReleasedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastReleasedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerRegionID.
		''' It will reset the field 'InterviewerRegionID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerRegionIDOld' to 
		''' the value as set in property 'InterviewerRegionID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerRegionID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerRegionIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerRegionIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_UpdateAllWInterviewerRegionIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerRegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerRegionID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerRegionIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerRegionIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_UpdateAllWInterviewerRegionIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::UpdateAllWInterviewerRegionIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerSupervisorID.
		''' It will reset the field 'InterviewerSupervisorID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerSupervisorIDOld' to 
		''' the value as set in property 'InterviewerSupervisorID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerSupervisorIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_UpdateAllWInterviewerSupervisorIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_UpdateAllWInterviewerSupervisorIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::UpdateAllWInterviewerSupervisorIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerTeamID.
		''' It will reset the field 'InterviewerTeamID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerTeamIDOld' to 
		''' the value as set in property 'InterviewerTeamID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerTeamID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerTeamIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerTeamIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_UpdateAllWInterviewerTeamIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerTeamID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerTeamID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerTeamIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerTeamIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_UpdateAllWInterviewerTeamIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::UpdateAllWInterviewerTeamIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerID.
		''' It will reset the field 'InterviewerID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerIDOld' to 
		''' the value as set in property 'InterviewerID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_UpdateAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_UpdateAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::UpdateAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseAssignmentID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseAssignmentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseAssignmentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseAssignmentID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>CaseAssignmentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>InterviewerRegionID</LI>
		'''		 <LI>InterviewerSupervisorID</LI>
		'''		 <LI>InterviewerTeamID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateAssigned</LI>
		'''		 <LI>LastReleasedTo</LI>
		'''		 <LI>LastReleasedOn</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseAssignmentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseAssignmentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerRegionID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerRegionID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerRegionIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAllWInterviewerRegionIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerRegionID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerRegionID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAllWInterviewerRegionIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAllWInterviewerRegionIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerSupervisorID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerSupervisorIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAllWInterviewerSupervisorIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAllWInterviewerSupervisorIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAllWInterviewerSupervisorIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerTeamID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerTeamID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerTeamIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAllWInterviewerTeamIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerTeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerTeamID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAllWInterviewerTeamIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAllWInterviewerTeamIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCaseAssignment_SelectAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCaseAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCaseAssignment_SelectAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCaseAssignment::SelectAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseAssignmentID]() As SqlInt32
			Get
				Return _caseAssignmentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseAssignmentID.Equals(Value) Then
					If _caseAssignmentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseAssignmentID.Equals(_caseAssignmentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseAssignmentIDTmp As SqlInt32 = Value
				If caseAssignmentIDTmp.IsNull Then
					Throw New NullValueException("CaseAssignmentID", "CaseAssignmentID can't be NULL")
				End If
				_caseAssignmentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerRegionID]() As SqlInt32
			Get
				Return _interviewerRegionID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerRegionID.Equals(Value) Then
					If _interviewerRegionIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerRegionID.Equals(_interviewerRegionIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_interviewerRegionID = Value
			End Set
		End Property
		Protected Property [InterviewerRegionIDOld]() As SqlInt32
			Get
				Return _interviewerRegionIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_interviewerRegionIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerSupervisorID]() As SqlInt32
			Get
				Return _interviewerSupervisorID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerSupervisorID.Equals(Value) Then
					If _interviewerSupervisorIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerSupervisorID.Equals(_interviewerSupervisorIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_interviewerSupervisorID = Value
			End Set
		End Property
		Protected Property [InterviewerSupervisorIDOld]() As SqlInt32
			Get
				Return _interviewerSupervisorIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_interviewerSupervisorIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerTeamID]() As SqlInt32
			Get
				Return _interviewerTeamID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerTeamID.Equals(Value) Then
					If _interviewerTeamIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerTeamID.Equals(_interviewerTeamIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_interviewerTeamID = Value
			End Set
		End Property
		Protected Property [InterviewerTeamIDOld]() As SqlInt32
			Get
				Return _interviewerTeamIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_interviewerTeamIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerID]() As SqlInt32
			Get
				Return _interviewerID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerID.Equals(Value) Then
					If _interviewerIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerID.Equals(_interviewerIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_interviewerID = Value
			End Set
		End Property
		Protected Property [InterviewerIDOld]() As SqlInt32
			Get
				Return _interviewerIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_interviewerIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateAssigned]() As SqlDateTime
			Get
				Return _dateAssigned
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateAssigned.Equals(Value) Then
					If _dateAssignedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateAssigned.Equals(_dateAssignedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateAssigned = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [LastReleasedTo]() As SqlInt32
			Get
				Return _lastReleasedTo
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _lastReleasedTo.Equals(Value) Then
					If _lastReleasedToOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastReleasedTo.Equals(_lastReleasedToOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastReleasedTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastReleasedOn]() As SqlDateTime
			Get
				Return _lastReleasedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastReleasedOn.Equals(Value) Then
					If _lastReleasedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastReleasedOn.Equals(_lastReleasedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastReleasedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
