' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:29 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblAddressHistory.
	''' </summary>

	Public Class TblAddressHistory
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isCleaned As SqlBoolean
		Private _isCleanedOld As SqlBoolean

		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _longitude As SqlDouble
		Private _longitudeOld As SqlDouble
		Private _latitude As SqlDouble
		Private _latitudeOld As SqlDouble

		Private _fieldLocatingStatusID As SqlInt32
		Private _fieldLocatingStatusIDOld As SqlInt32
		Private _addressTypeID As SqlInt32
		Private _addressTypeIDOld As SqlInt32
		Private _returnedMailReasonID As SqlInt32
		Private _returnedMailReasonIDOld As SqlInt32
		Private _sourceQualityID As SqlInt32
		Private _sourceQualityIDOld As SqlInt32
		Private _sourceTypeID As SqlInt32
		Private _sourceTypeIDOld As SqlInt32
		Private _addressID As SqlInt32
		Private _addressIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _addressHistoryID As SqlInt32
		Private _addressHistoryIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32

		Private _bIN As SqlByte
		Private _bINOld As SqlByte
		Private _bPN As SqlByte
		Private _bPNOld As SqlByte

		Private _country As SqlString
		Private _countryOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _facility1 As SqlString
		Private _facility1Old As SqlString
		Private _postalCode As SqlString
		Private _postalCodeOld As SqlString
		Private _county As SqlString
		Private _countyOld As SqlString
		Private _state As SqlString
		Private _stateOld As SqlString
		Private _address4 As SqlString
		Private _address4Old As SqlString
		Private _city As SqlString
		Private _cityOld As SqlString
		Private _address1 As SqlString
		Private _address1Old As SqlString
		Private _facility2 As SqlString
		Private _facility2Old As SqlString
		Private _address2 As SqlString
		Private _address2Old As SqlString
		Private _address3 As SqlString
		Private _address3Old As SqlString
		Private _countryCode As SqlString
		Private _countryCodeOld As SqlString

#End Region

		''' <overloads>
		''' The TblAddressHistory constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblAddressHistory class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblAddressHistory class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblAddressHistory class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_addressHistoryID = New SqlInt32(CType(objDataRow("AddressHistoryID"), Integer))
			
			_addressHistoryIDOld = _addressHistoryID
			
			_addressID = New SqlInt32(CType(objDataRow("AddressID"), Integer))
			
			_addressIDOld = _addressID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("Facility1") Is System.DBNull.Value Then
				_facility1 = New SqlString("")
			Else
				_facility1 = New SqlString(CType(objDataRow("Facility1"), String))
			End If
			
			_facility1Old = _facility1
			
			If objDataRow("Facility2") Is System.DBNull.Value Then
				_facility2 = New SqlString("")
			Else
				_facility2 = New SqlString(CType(objDataRow("Facility2"), String))
			End If
			
			_facility2Old = _facility2
			
			If objDataRow("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objDataRow("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objDataRow("Address2") Is System.DBNull.Value Then
				_address2 = New SqlString("")
			Else
				_address2 = New SqlString(CType(objDataRow("Address2"), String))
			End If
			
			_address2Old = _address2
			
			If objDataRow("Address3") Is System.DBNull.Value Then
				_address3 = New SqlString("")
			Else
				_address3 = New SqlString(CType(objDataRow("Address3"), String))
			End If
			
			_address3Old = _address3
			
			If objDataRow("Address4") Is System.DBNull.Value Then
				_address4 = New SqlString("")
			Else
				_address4 = New SqlString(CType(objDataRow("Address4"), String))
			End If
			
			_address4Old = _address4
			
			If objDataRow("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objDataRow("City"), String))
			End If
			
			_cityOld = _city
			
			If objDataRow("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objDataRow("State"), String))
			End If
			
			_stateOld = _state
			
			If objDataRow("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objDataRow("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objDataRow("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objDataRow("County"), String))
			End If
			
			_countyOld = _county
			
			If objDataRow("Country") Is System.DBNull.Value Then
				_country = New SqlString("")
			Else
				_country = New SqlString(CType(objDataRow("Country"), String))
			End If
			
			_countryOld = _country
			
			If objDataRow("CountryCode") Is System.DBNull.Value Then
				_countryCode = New SqlString("")
			Else
				_countryCode = New SqlString(CType(objDataRow("CountryCode"), String))
			End If
			
			_countryCodeOld = _countryCode
			
			If objDataRow("Longitude") Is System.DBNull.Value Then
				_longitude = SqlDouble.Null
			Else
				_longitude = New SqlDouble(CType(objDataRow("Longitude"), Double))
			End If
			
			_longitudeOld = _longitude
			
			If objDataRow("Latitude") Is System.DBNull.Value Then
				_latitude = SqlDouble.Null
			Else
				_latitude = New SqlDouble(CType(objDataRow("Latitude"), Double))
			End If
			
			_latitudeOld = _latitude
			
			If objDataRow("AddressTypeID") Is System.DBNull.Value Then
				_addressTypeID = SqlInt32.Null
			Else
				_addressTypeID = New SqlInt32(CType(objDataRow("AddressTypeID"), Integer))
			End If
			
			_addressTypeIDOld = _addressTypeID
			
			If objDataRow("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objDataRow("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objDataRow("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objDataRow("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objDataRow("ReturnedMailReasonID") Is System.DBNull.Value Then
				_returnedMailReasonID = SqlInt32.Null
			Else
				_returnedMailReasonID = New SqlInt32(CType(objDataRow("ReturnedMailReasonID"), Integer))
			End If
			
			_returnedMailReasonIDOld = _returnedMailReasonID
			
			If objDataRow("IsCleaned") Is System.DBNull.Value Then
				_isCleaned = New SqlBoolean(False)
			Else
				_isCleaned = New SqlBoolean(CType(objDataRow("IsCleaned"), Boolean))
			End If
			
			_isCleanedOld = _isCleaned
			
			If objDataRow("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objDataRow("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objDataRow("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objDataRow("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objDataRow("FieldLocatingStatusID") Is System.DBNull.Value Then
				_fieldLocatingStatusID = SqlInt32.Null
			Else
				_fieldLocatingStatusID = New SqlInt32(CType(objDataRow("FieldLocatingStatusID"), Integer))
			End If
			
			_fieldLocatingStatusIDOld = _fieldLocatingStatusID
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_addressHistoryID = New SqlInt32(CType(objSqlDataReader("AddressHistoryID"), Integer))
			
			_addressHistoryIDOld = _addressHistoryID
			
			_addressID = New SqlInt32(CType(objSqlDataReader("AddressID"), Integer))
			
			_addressIDOld = _addressID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("Facility1") Is System.DBNull.Value Then
				_facility1 = New SqlString("")
			Else
				_facility1 = New SqlString(CType(objSqlDataReader("Facility1"), String))
			End If
			
			_facility1Old = _facility1
			
			If objSqlDataReader("Facility2") Is System.DBNull.Value Then
				_facility2 = New SqlString("")
			Else
				_facility2 = New SqlString(CType(objSqlDataReader("Facility2"), String))
			End If
			
			_facility2Old = _facility2
			
			If objSqlDataReader("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objSqlDataReader("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objSqlDataReader("Address2") Is System.DBNull.Value Then
				_address2 = New SqlString("")
			Else
				_address2 = New SqlString(CType(objSqlDataReader("Address2"), String))
			End If
			
			_address2Old = _address2
			
			If objSqlDataReader("Address3") Is System.DBNull.Value Then
				_address3 = New SqlString("")
			Else
				_address3 = New SqlString(CType(objSqlDataReader("Address3"), String))
			End If
			
			_address3Old = _address3
			
			If objSqlDataReader("Address4") Is System.DBNull.Value Then
				_address4 = New SqlString("")
			Else
				_address4 = New SqlString(CType(objSqlDataReader("Address4"), String))
			End If
			
			_address4Old = _address4
			
			If objSqlDataReader("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objSqlDataReader("City"), String))
			End If
			
			_cityOld = _city
			
			If objSqlDataReader("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objSqlDataReader("State"), String))
			End If
			
			_stateOld = _state
			
			If objSqlDataReader("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objSqlDataReader("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objSqlDataReader("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objSqlDataReader("County"), String))
			End If
			
			_countyOld = _county
			
			If objSqlDataReader("Country") Is System.DBNull.Value Then
				_country = New SqlString("")
			Else
				_country = New SqlString(CType(objSqlDataReader("Country"), String))
			End If
			
			_countryOld = _country
			
			If objSqlDataReader("CountryCode") Is System.DBNull.Value Then
				_countryCode = New SqlString("")
			Else
				_countryCode = New SqlString(CType(objSqlDataReader("CountryCode"), String))
			End If
			
			_countryCodeOld = _countryCode
			
			If objSqlDataReader("Longitude") Is System.DBNull.Value Then
				_longitude = SqlDouble.Null
			Else
				_longitude = New SqlDouble(CType(objSqlDataReader("Longitude"), Double))
			End If
			
			_longitudeOld = _longitude
			
			If objSqlDataReader("Latitude") Is System.DBNull.Value Then
				_latitude = SqlDouble.Null
			Else
				_latitude = New SqlDouble(CType(objSqlDataReader("Latitude"), Double))
			End If
			
			_latitudeOld = _latitude
			
			If objSqlDataReader("AddressTypeID") Is System.DBNull.Value Then
				_addressTypeID = SqlInt32.Null
			Else
				_addressTypeID = New SqlInt32(CType(objSqlDataReader("AddressTypeID"), Integer))
			End If
			
			_addressTypeIDOld = _addressTypeID
			
			If objSqlDataReader("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objSqlDataReader("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objSqlDataReader("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objSqlDataReader("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objSqlDataReader("ReturnedMailReasonID") Is System.DBNull.Value Then
				_returnedMailReasonID = SqlInt32.Null
			Else
				_returnedMailReasonID = New SqlInt32(CType(objSqlDataReader("ReturnedMailReasonID"), Integer))
			End If
			
			_returnedMailReasonIDOld = _returnedMailReasonID
			
			If objSqlDataReader("IsCleaned") Is System.DBNull.Value Then
				_isCleaned = New SqlBoolean(False)
			Else
				_isCleaned = New SqlBoolean(CType(objSqlDataReader("IsCleaned"), Boolean))
			End If
			
			_isCleanedOld = _isCleaned
			
			If objSqlDataReader("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objSqlDataReader("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objSqlDataReader("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objSqlDataReader("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objSqlDataReader("FieldLocatingStatusID") Is System.DBNull.Value Then
				_fieldLocatingStatusID = SqlInt32.Null
			Else
				_fieldLocatingStatusID = New SqlInt32(CType(objSqlDataReader("FieldLocatingStatusID"), Integer))
			End If
			
			_fieldLocatingStatusIDOld = _fieldLocatingStatusID
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			_facility1 = New SqlString("")
			_facility1Old = _facility1
			
			_facility2 = New SqlString("")
			_facility2Old = _facility2
			
			_address1 = New SqlString("")
			_address1Old = _address1
			
			_address2 = New SqlString("")
			_address2Old = _address2
			
			_address3 = New SqlString("")
			_address3Old = _address3
			
			_address4 = New SqlString("")
			_address4Old = _address4
			
			_city = New SqlString("")
			_cityOld = _city
			
			_state = New SqlString("")
			_stateOld = _state
			
			_postalCode = New SqlString("")
			_postalCodeOld = _postalCode
			
			_county = New SqlString("")
			_countyOld = _county
			
			_country = New SqlString("")
			_countryOld = _country
			
			_countryCode = New SqlString("")
			_countryCodeOld = _countryCode
			
			
			
			
			
			
			
			_isCleaned = New SqlBoolean(False)
			_isCleanedOld = _isCleaned
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_addressHistoryID = _addressHistoryIDOld
			
			_addressID = _addressIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_round = _roundOld
			
			_facility1 = _facility1Old
			
			_facility2 = _facility2Old
			
			_address1 = _address1Old
			
			_address2 = _address2Old
			
			_address3 = _address3Old
			
			_address4 = _address4Old
			
			_city = _cityOld
			
			_state = _stateOld
			
			_postalCode = _postalCodeOld
			
			_county = _countyOld
			
			_country = _countryOld
			
			_countryCode = _countryCodeOld
			
			_longitude = _longitudeOld
			
			_latitude = _latitudeOld
			
			_addressTypeID = _addressTypeIDOld
			
			_sourceTypeID = _sourceTypeIDOld
			
			_sourceQualityID = _sourceQualityIDOld
			
			_returnedMailReasonID = _returnedMailReasonIDOld
			
			_isCleaned = _isCleanedOld
			
			_bPN = _bPNOld
			
			_bIN = _bINOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			_fieldLocatingStatusID = _fieldLocatingStatusIDOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>AddressID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Facility1. May be SqlString.Null</LI>
		'''		 <LI>Facility2. May be SqlString.Null</LI>
		'''		 <LI>Address1. May be SqlString.Null</LI>
		'''		 <LI>Address2. May be SqlString.Null</LI>
		'''		 <LI>Address3. May be SqlString.Null</LI>
		'''		 <LI>Address4. May be SqlString.Null</LI>
		'''		 <LI>City. May be SqlString.Null</LI>
		'''		 <LI>State. May be SqlString.Null</LI>
		'''		 <LI>PostalCode. May be SqlString.Null</LI>
		'''		 <LI>County. May be SqlString.Null</LI>
		'''		 <LI>Country. May be SqlString.Null</LI>
		'''		 <LI>CountryCode. May be SqlString.Null</LI>
		'''		 <LI>Longitude. May be SqlDouble.Null</LI>
		'''		 <LI>Latitude. May be SqlDouble.Null</LI>
		'''		 <LI>AddressTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>ReturnedMailReasonID. May be SqlInt32.Null</LI>
		'''		 <LI>IsCleaned. May be SqlBoolean.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>FieldLocatingStatusID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>AddressHistoryID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Facility1", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _facility1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Facility2", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _facility2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address1", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address2", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address3", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address3))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address4", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address4))
				cmdToExecute.Parameters.Add(New SqlParameter("@City", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _city))
				cmdToExecute.Parameters.Add(New SqlParameter("@State", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _state))
				cmdToExecute.Parameters.Add(New SqlParameter("@PostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _postalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@County", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _county))
				cmdToExecute.Parameters.Add(New SqlParameter("@Country", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _country))
				cmdToExecute.Parameters.Add(New SqlParameter("@CountryCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _countryCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@Longitude", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _longitude))
				cmdToExecute.Parameters.Add(New SqlParameter("@Latitude", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _latitude))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnedMailReasonID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _returnedMailReasonID))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCleaned", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCleaned))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldLocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _fieldLocatingStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_addressHistoryID = CType(cmdToExecute.Parameters.Item("@AddressHistoryID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>AddressHistoryID</LI>
		'''		 <LI>AddressID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Facility1. May be SqlString.Null</LI>
		'''		 <LI>Facility2. May be SqlString.Null</LI>
		'''		 <LI>Address1. May be SqlString.Null</LI>
		'''		 <LI>Address2. May be SqlString.Null</LI>
		'''		 <LI>Address3. May be SqlString.Null</LI>
		'''		 <LI>Address4. May be SqlString.Null</LI>
		'''		 <LI>City. May be SqlString.Null</LI>
		'''		 <LI>State. May be SqlString.Null</LI>
		'''		 <LI>PostalCode. May be SqlString.Null</LI>
		'''		 <LI>County. May be SqlString.Null</LI>
		'''		 <LI>Country. May be SqlString.Null</LI>
		'''		 <LI>CountryCode. May be SqlString.Null</LI>
		'''		 <LI>Longitude. May be SqlDouble.Null</LI>
		'''		 <LI>Latitude. May be SqlDouble.Null</LI>
		'''		 <LI>AddressTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>ReturnedMailReasonID. May be SqlInt32.Null</LI>
		'''		 <LI>IsCleaned. May be SqlBoolean.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>FieldLocatingStatusID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Facility1", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _facility1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Facility2", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _facility2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address1", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address2", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address3", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address3))
				cmdToExecute.Parameters.Add(New SqlParameter("@Address4", SqlDbType.VarChar, 60, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _address4))
				cmdToExecute.Parameters.Add(New SqlParameter("@City", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _city))
				cmdToExecute.Parameters.Add(New SqlParameter("@State", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _state))
				cmdToExecute.Parameters.Add(New SqlParameter("@PostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _postalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@County", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _county))
				cmdToExecute.Parameters.Add(New SqlParameter("@Country", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _country))
				cmdToExecute.Parameters.Add(New SqlParameter("@CountryCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _countryCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@Longitude", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _longitude))
				cmdToExecute.Parameters.Add(New SqlParameter("@Latitude", SqlDbType.Float, 8, ParameterDirection.Input, True, 38, 0, "", DataRowVersion.Proposed, _latitude))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnedMailReasonID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _returnedMailReasonID))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCleaned", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCleaned))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldLocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _fieldLocatingStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'AddressID.
		''' It will reset the field 'AddressID' in
		''' all rows which have as value for this field the value as set in property 'AddressIDOld' to 
		''' the value as set in property 'AddressID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>AddressID</LI>
		'''		 <LI>AddressIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWAddressIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_UpdateAllWAddressIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(new SqlParameter("@AddressIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_UpdateAllWAddressIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::UpdateAllWAddressIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>AddressHistoryID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>AddressHistoryID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>AddressHistoryID</LI>
		'''		 <LI>AddressID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>Facility1</LI>
		'''		 <LI>Facility2</LI>
		'''		 <LI>Address1</LI>
		'''		 <LI>Address2</LI>
		'''		 <LI>Address3</LI>
		'''		 <LI>Address4</LI>
		'''		 <LI>City</LI>
		'''		 <LI>State</LI>
		'''		 <LI>PostalCode</LI>
		'''		 <LI>County</LI>
		'''		 <LI>Country</LI>
		'''		 <LI>CountryCode</LI>
		'''		 <LI>Longitude</LI>
		'''		 <LI>Latitude</LI>
		'''		 <LI>AddressTypeID</LI>
		'''		 <LI>SourceTypeID</LI>
		'''		 <LI>SourceQualityID</LI>
		'''		 <LI>ReturnedMailReasonID</LI>
		'''		 <LI>IsCleaned</LI>
		'''		 <LI>BPN</LI>
		'''		 <LI>BIN</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>FieldLocatingStatusID</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblAddressHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@AddressHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblAddressHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'AddressID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>AddressID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWAddressIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_SelectAllWAddressIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblAddressHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_SelectAllWAddressIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::SelectAllWAddressIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblAddressHistory_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblAddressHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblAddressHistory_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblAddressHistory::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressHistoryID]() As SqlInt32
			Get
				Return _addressHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressHistoryID.Equals(Value) Then
					If _addressHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressHistoryID.Equals(_addressHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim addressHistoryIDTmp As SqlInt32 = Value
				If addressHistoryIDTmp.IsNull Then
					Throw New NullValueException("AddressHistoryID", "AddressHistoryID can't be NULL")
				End If
				_addressHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressID]() As SqlInt32
			Get
				Return _addressID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressID.Equals(Value) Then
					If _addressIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressID.Equals(_addressIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim addressIDTmp As SqlInt32 = Value
				If addressIDTmp.IsNull Then
					Throw New NullValueException("AddressID", "AddressID can't be NULL")
				End If
				_addressID = Value
			End Set
		End Property
		Protected Property [AddressIDOld]() As SqlInt32
			Get
				Return _addressIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim addressIDOldTmp As SqlInt32 = Value
				If addressIDOldTmp.IsNull Then
					Throw New NullValueException("AddressIDOld", "AddressIDOld can't be NULL")
				End If
				_addressIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Facility1]() As SqlString
			Get
				Return _facility1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _facility1.IsNull Then
					CurrentValue = _facility1.Value
				End If
				If Not _facility1Old.IsNull Then
					OldValue = _facility1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_facility1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Facility2]() As SqlString
			Get
				Return _facility2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _facility2.IsNull Then
					CurrentValue = _facility2.Value
				End If
				If Not _facility2Old.IsNull Then
					OldValue = _facility2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_facility2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address1]() As SqlString
			Get
				Return _address1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address1.IsNull Then
					CurrentValue = _address1.Value
				End If
				If Not _address1Old.IsNull Then
					OldValue = _address1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address2]() As SqlString
			Get
				Return _address2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address2.IsNull Then
					CurrentValue = _address2.Value
				End If
				If Not _address2Old.IsNull Then
					OldValue = _address2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address3]() As SqlString
			Get
				Return _address3
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address3.IsNull Then
					CurrentValue = _address3.Value
				End If
				If Not _address3Old.IsNull Then
					OldValue = _address3Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address3 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address4]() As SqlString
			Get
				Return _address4
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address4.IsNull Then
					CurrentValue = _address4.Value
				End If
				If Not _address4Old.IsNull Then
					OldValue = _address4Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address4 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [City]() As SqlString
			Get
				Return _city
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _city.IsNull Then
					CurrentValue = _city.Value
				End If
				If Not _cityOld.IsNull Then
					OldValue = _cityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_city = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [State]() As SqlString
			Get
				Return _state
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _state.IsNull Then
					CurrentValue = _state.Value
				End If
				If Not _stateOld.IsNull Then
					OldValue = _stateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_state = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PostalCode]() As SqlString
			Get
				Return _postalCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _postalCode.IsNull Then
					CurrentValue = _postalCode.Value
				End If
				If Not _postalCodeOld.IsNull Then
					OldValue = _postalCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_postalCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [County]() As SqlString
			Get
				Return _county
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _county.IsNull Then
					CurrentValue = _county.Value
				End If
				If Not _countyOld.IsNull Then
					OldValue = _countyOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_county = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Country]() As SqlString
			Get
				Return _country
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _country.IsNull Then
					CurrentValue = _country.Value
				End If
				If Not _countryOld.IsNull Then
					OldValue = _countryOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_country = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CountryCode]() As SqlString
			Get
				Return _countryCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _countryCode.IsNull Then
					CurrentValue = _countryCode.Value
				End If
				If Not _countryCodeOld.IsNull Then
					OldValue = _countryCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_countryCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Longitude]() As SqlDouble
			Get
				Return _longitude
			End Get
			Set(ByVal Value As SqlDouble)
				If Not _longitude.Equals(Value) Then
					If _longitudeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _longitude.Equals(_longitudeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_longitude = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Latitude]() As SqlDouble
			Get
				Return _latitude
			End Get
			Set(ByVal Value As SqlDouble)
				If Not _latitude.Equals(Value) Then
					If _latitudeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _latitude.Equals(_latitudeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_latitude = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressTypeID]() As SqlInt32
			Get
				Return _addressTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressTypeID.Equals(Value) Then
					If _addressTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressTypeID.Equals(_addressTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_addressTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SourceTypeID]() As SqlInt32
			Get
				Return _sourceTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceTypeID.Equals(Value) Then
					If _sourceTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceTypeID.Equals(_sourceTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SourceQualityID]() As SqlInt32
			Get
				Return _sourceQualityID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceQualityID.Equals(Value) Then
					If _sourceQualityIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceQualityID.Equals(_sourceQualityIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceQualityID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReturnedMailReasonID]() As SqlInt32
			Get
				Return _returnedMailReasonID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _returnedMailReasonID.Equals(Value) Then
					If _returnedMailReasonIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _returnedMailReasonID.Equals(_returnedMailReasonIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_returnedMailReasonID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCleaned]() As SqlBoolean
			Get
				Return _isCleaned
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCleaned.Equals(Value) Then
					If _isCleanedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCleaned.Equals(_isCleanedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCleaned = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BPN]() As SqlByte
			Get
				Return _bPN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bPN.Equals(Value) Then
					If _bPNOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bPN.Equals(_bPNOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bPN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BIN]() As SqlByte
			Get
				Return _bIN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bIN.Equals(Value) Then
					If _bINOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bIN.Equals(_bINOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bIN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FieldLocatingStatusID]() As SqlInt32
			Get
				Return _fieldLocatingStatusID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _fieldLocatingStatusID.Equals(Value) Then
					If _fieldLocatingStatusIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _fieldLocatingStatusID.Equals(_fieldLocatingStatusIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_fieldLocatingStatusID = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
