' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:33 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblLocatingStatus.
	''' </summary>

	Public Class TblLocatingStatus
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _locatingStatus As SqlString
		Private _locatingStatusOld As SqlString

		Private _statusDate As SqlDateTime
		Private _statusDateOld As SqlDateTime
		Private _dateSentToLocating As SqlDateTime
		Private _dateSentToLocatingOld As SqlDateTime
		Private _noteDate As SqlDateTime
		Private _noteDateOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _noOfTimesTouched As SqlInt32
		Private _noOfTimesTouchedOld As SqlInt32
		Private _noOfTimesLocating As SqlInt32
		Private _noOfTimesLocatingOld As SqlInt32
		Private _totalTimeSpentInSeconds As SqlInt32
		Private _totalTimeSpentInSecondsOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _locatingStatusID As SqlInt32
		Private _locatingStatusIDOld As SqlInt32
		Private _priorityStatus As SqlInt32
		Private _priorityStatusOld As SqlInt32

		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The TblLocatingStatus constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblLocatingStatus class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblLocatingStatus class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblLocatingStatus class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_locatingStatusID = New SqlInt32(CType(objDataRow("LocatingStatusID"), Integer))
			
			_locatingStatusIDOld = _locatingStatusID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objDataRow("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objDataRow("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objDataRow("StatusDate") Is System.DBNull.Value Then
				_statusDate = SqlDateTime.Null
			Else
				_statusDate = New SqlDateTime(CType(objDataRow("StatusDate"), Date))
			End If
			
			_statusDateOld = _statusDate
			
			If objDataRow("DateSentToLocating") Is System.DBNull.Value Then
				_dateSentToLocating = SqlDateTime.Null
			Else
				_dateSentToLocating = New SqlDateTime(CType(objDataRow("DateSentToLocating"), Date))
			End If
			
			_dateSentToLocatingOld = _dateSentToLocating
			
			If objDataRow("PriorityStatus") Is System.DBNull.Value Then
				_priorityStatus = SqlInt32.Null
			Else
				_priorityStatus = New SqlInt32(CType(objDataRow("PriorityStatus"), Integer))
			End If
			
			_priorityStatusOld = _priorityStatus
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objDataRow("NoteDate") Is System.DBNull.Value Then
				_noteDate = SqlDateTime.Null
			Else
				_noteDate = New SqlDateTime(CType(objDataRow("NoteDate"), Date))
			End If
			
			_noteDateOld = _noteDate
			
			If objDataRow("NoOfTimesLocating") Is System.DBNull.Value Then
				_noOfTimesLocating = SqlInt32.Null
			Else
				_noOfTimesLocating = New SqlInt32(CType(objDataRow("NoOfTimesLocating"), Integer))
			End If
			
			_noOfTimesLocatingOld = _noOfTimesLocating
			
			If objDataRow("NoOfTimesTouched") Is System.DBNull.Value Then
				_noOfTimesTouched = SqlInt32.Null
			Else
				_noOfTimesTouched = New SqlInt32(CType(objDataRow("NoOfTimesTouched"), Integer))
			End If
			
			_noOfTimesTouchedOld = _noOfTimesTouched
			
			If objDataRow("TotalTimeSpentInSeconds") Is System.DBNull.Value Then
				_totalTimeSpentInSeconds = SqlInt32.Null
			Else
				_totalTimeSpentInSeconds = New SqlInt32(CType(objDataRow("TotalTimeSpentInSeconds"), Integer))
			End If
			
			_totalTimeSpentInSecondsOld = _totalTimeSpentInSeconds
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_locatingStatusID = New SqlInt32(CType(objSqlDataReader("LocatingStatusID"), Integer))
			
			_locatingStatusIDOld = _locatingStatusID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objSqlDataReader("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objSqlDataReader("StatusDate") Is System.DBNull.Value Then
				_statusDate = SqlDateTime.Null
			Else
				_statusDate = New SqlDateTime(CType(objSqlDataReader("StatusDate"), Date))
			End If
			
			_statusDateOld = _statusDate
			
			If objSqlDataReader("DateSentToLocating") Is System.DBNull.Value Then
				_dateSentToLocating = SqlDateTime.Null
			Else
				_dateSentToLocating = New SqlDateTime(CType(objSqlDataReader("DateSentToLocating"), Date))
			End If
			
			_dateSentToLocatingOld = _dateSentToLocating
			
			If objSqlDataReader("PriorityStatus") Is System.DBNull.Value Then
				_priorityStatus = SqlInt32.Null
			Else
				_priorityStatus = New SqlInt32(CType(objSqlDataReader("PriorityStatus"), Integer))
			End If
			
			_priorityStatusOld = _priorityStatus
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objSqlDataReader("NoteDate") Is System.DBNull.Value Then
				_noteDate = SqlDateTime.Null
			Else
				_noteDate = New SqlDateTime(CType(objSqlDataReader("NoteDate"), Date))
			End If
			
			_noteDateOld = _noteDate
			
			If objSqlDataReader("NoOfTimesLocating") Is System.DBNull.Value Then
				_noOfTimesLocating = SqlInt32.Null
			Else
				_noOfTimesLocating = New SqlInt32(CType(objSqlDataReader("NoOfTimesLocating"), Integer))
			End If
			
			_noOfTimesLocatingOld = _noOfTimesLocating
			
			If objSqlDataReader("NoOfTimesTouched") Is System.DBNull.Value Then
				_noOfTimesTouched = SqlInt32.Null
			Else
				_noOfTimesTouched = New SqlInt32(CType(objSqlDataReader("NoOfTimesTouched"), Integer))
			End If
			
			_noOfTimesTouchedOld = _noOfTimesTouched
			
			If objSqlDataReader("TotalTimeSpentInSeconds") Is System.DBNull.Value Then
				_totalTimeSpentInSeconds = SqlInt32.Null
			Else
				_totalTimeSpentInSeconds = New SqlInt32(CType(objSqlDataReader("TotalTimeSpentInSeconds"), Integer))
			End If
			
			_totalTimeSpentInSecondsOld = _totalTimeSpentInSeconds
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			_locatingStatus = New SqlString("")
			_locatingStatusOld = _locatingStatus
			
			
			
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_locatingStatusID = _locatingStatusIDOld
			
			_round = _roundOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_locatingStatus = _locatingStatusOld
			
			_statusDate = _statusDateOld
			
			_dateSentToLocating = _dateSentToLocatingOld
			
			_priorityStatus = _priorityStatusOld
			
			_notes = _notesOld
			
			_noteDate = _noteDateOld
			
			_noOfTimesLocating = _noOfTimesLocatingOld
			
			_noOfTimesTouched = _noOfTimesTouchedOld
			
			_totalTimeSpentInSeconds = _totalTimeSpentInSecondsOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		'''		 <LI>StatusDate. May be SqlDateTime.Null</LI>
		'''		 <LI>DateSentToLocating. May be SqlDateTime.Null</LI>
		'''		 <LI>PriorityStatus. May be SqlInt32.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>NoteDate. May be SqlDateTime.Null</LI>
		'''		 <LI>NoOfTimesLocating. May be SqlInt32.Null</LI>
		'''		 <LI>NoOfTimesTouched. May be SqlInt32.Null</LI>
		'''		 <LI>TotalTimeSpentInSeconds. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>LocatingStatusID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateSentToLocating", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateSentToLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@PriorityStatus", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _priorityStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _noteDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoOfTimesLocating", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _noOfTimesLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoOfTimesTouched", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _noOfTimesTouched))
				cmdToExecute.Parameters.Add(New SqlParameter("@TotalTimeSpentInSeconds", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _totalTimeSpentInSeconds))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _locatingStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_locatingStatusID = CType(cmdToExecute.Parameters.Item("@LocatingStatusID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingStatusID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		'''		 <LI>StatusDate. May be SqlDateTime.Null</LI>
		'''		 <LI>DateSentToLocating. May be SqlDateTime.Null</LI>
		'''		 <LI>PriorityStatus. May be SqlInt32.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>NoteDate. May be SqlDateTime.Null</LI>
		'''		 <LI>NoOfTimesLocating. May be SqlInt32.Null</LI>
		'''		 <LI>NoOfTimesTouched. May be SqlInt32.Null</LI>
		'''		 <LI>TotalTimeSpentInSeconds. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingStatusID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateSentToLocating", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateSentToLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@PriorityStatus", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _priorityStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _noteDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoOfTimesLocating", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _noOfTimesLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@NoOfTimesTouched", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _noOfTimesTouched))
				cmdToExecute.Parameters.Add(New SqlParameter("@TotalTimeSpentInSeconds", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _totalTimeSpentInSeconds))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'MPRID.
		''' It will reset the field 'MPRID' in
		''' all rows which have as value for this field the value as set in property 'MPRIDOld' to 
		''' the value as set in property 'MPRID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		'''		 <LI>MPRIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWMPRIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_UpdateAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRIDOld", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 8, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_UpdateAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::UpdateAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'LocatingStatus.
		''' It will reset the field 'LocatingStatus' in
		''' all rows which have as value for this field the value as set in property 'LocatingStatusOld' to 
		''' the value as set in property 'LocatingStatus'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		'''		 <LI>LocatingStatusOld. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWLocatingStatusLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_UpdateAllWLocatingStatusLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingStatusOld", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatusOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_UpdateAllWLocatingStatusLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::UpdateAllWLocatingStatusLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingStatusID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingStatusID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>LocatingStatusID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingStatus</LI>
		'''		 <LI>StatusDate</LI>
		'''		 <LI>DateSentToLocating</LI>
		'''		 <LI>PriorityStatus</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>NoteDate</LI>
		'''		 <LI>NoOfTimesLocating</LI>
		'''		 <LI>NoOfTimesTouched</LI>
		'''		 <LI>TotalTimeSpentInSeconds</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select a row from the database based on the unique field 'MPRID'
		''' </summary>
		''' <returns>A DataTable object if successful, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>LocatingStatusID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>LocatingStatus</LI>
		'''		 <LI>StatusDate</LI>
		'''		 <LI>DateSentToLocating</LI>
		'''		 <LI>PriorityStatus</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>NoteDate</LI>
		'''		 <LI>NoOfTimesLocating</LI>
		'''		 <LI>NoOfTimesTouched</LI>
		'''		 <LI>TotalTimeSpentInSeconds</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>
		Public Function SelectOneWMPRIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_SelectOneWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_SelectOneWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::SelectOneWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'MPRID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWMPRIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_SelectAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_SelectAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::SelectAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'LocatingStatus'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>LocatingStatus. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWLocatingStatusLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblLocatingStatus_SelectAllWLocatingStatusLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblLocatingStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingStatus))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblLocatingStatus_SelectAllWLocatingStatusLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblLocatingStatus::SelectAllWLocatingStatusLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingStatusID]() As SqlInt32
			Get
				Return _locatingStatusID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingStatusID.Equals(Value) Then
					If _locatingStatusIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingStatusID.Equals(_locatingStatusIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim locatingStatusIDTmp As SqlInt32 = Value
				If locatingStatusIDTmp.IsNull Then
					Throw New NullValueException("LocatingStatusID", "LocatingStatusID can't be NULL")
				End If
				_locatingStatusID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=True, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property
		Protected Property [MPRIDOld]() As SqlString
			Get
				Return _mPRIDOld
			End Get
			Set(ByVal Value As SqlString)
				Dim mPRIDOldTmp As SqlString = Value
				If mPRIDOldTmp.IsNull Then
					Throw New NullValueException("MPRIDOld", "MPRIDOld can't be NULL")
				End If
				_mPRIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingStatus]() As SqlString
			Get
				Return _locatingStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingStatus.IsNull Then
					CurrentValue = _locatingStatus.Value
				End If
				If Not _locatingStatusOld.IsNull Then
					OldValue = _locatingStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingStatus = Value
			End Set
		End Property
		Protected Property [LocatingStatusOld]() As SqlString
			Get
				Return _locatingStatusOld
			End Get
			Set(ByVal Value As SqlString)
				_locatingStatusOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusDate]() As SqlDateTime
			Get
				Return _statusDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _statusDate.Equals(Value) Then
					If _statusDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _statusDate.Equals(_statusDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_statusDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateSentToLocating]() As SqlDateTime
			Get
				Return _dateSentToLocating
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateSentToLocating.Equals(Value) Then
					If _dateSentToLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateSentToLocating.Equals(_dateSentToLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateSentToLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [PriorityStatus]() As SqlInt32
			Get
				Return _priorityStatus
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _priorityStatus.Equals(Value) Then
					If _priorityStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _priorityStatus.Equals(_priorityStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_priorityStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NoteDate]() As SqlDateTime
			Get
				Return _noteDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _noteDate.Equals(Value) Then
					If _noteDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _noteDate.Equals(_noteDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_noteDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [NoOfTimesLocating]() As SqlInt32
			Get
				Return _noOfTimesLocating
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _noOfTimesLocating.Equals(Value) Then
					If _noOfTimesLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _noOfTimesLocating.Equals(_noOfTimesLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_noOfTimesLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [NoOfTimesTouched]() As SqlInt32
			Get
				Return _noOfTimesTouched
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _noOfTimesTouched.Equals(Value) Then
					If _noOfTimesTouchedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _noOfTimesTouched.Equals(_noOfTimesTouchedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_noOfTimesTouched = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [TotalTimeSpentInSeconds]() As SqlInt32
			Get
				Return _totalTimeSpentInSeconds
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _totalTimeSpentInSeconds.Equals(Value) Then
					If _totalTimeSpentInSecondsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _totalTimeSpentInSeconds.Equals(_totalTimeSpentInSecondsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_totalTimeSpentInSeconds = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
