' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:41 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the view named vwCaseAssignmentSearch.
	''' </summary>

	Public Class VwCaseAssignmentSearch
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isFinalStatus As SqlBoolean
		Private _isFinalStatusOld As SqlBoolean
		Private _isCAPIStatus As SqlBoolean
		Private _isCAPIStatusOld As SqlBoolean
		Private _isValidate As SqlBoolean
		Private _isValidateOld As SqlBoolean
		Private _isComplete As SqlBoolean
		Private _isCompleteOld As SqlBoolean

		Private _randomAssignment As SqlString
		Private _randomAssignmentOld As SqlString
		Private _currentStatus As SqlString
		Private _currentStatusOld As SqlString
		Private _statusCode As SqlString
		Private _statusCodeOld As SqlString
		Private _locatingstatus As SqlString
		Private _locatingstatusOld As SqlString

		Private _dateAssigned As SqlDateTime
		Private _dateAssignedOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _lastAttemptDate As SqlDateTime
		Private _lastAttemptDateOld As SqlDateTime
		Private _lastReleasedOn As SqlDateTime
		Private _lastReleasedOnOld As SqlDateTime

		Private _age As SqlInt32
		Private _ageOld As SqlInt32
		Private _priorityStatus As SqlInt32
		Private _priorityStatusOld As SqlInt32
		Private _moreFieldAttempts As SqlInt32
		Private _moreFieldAttemptsOld As SqlInt32
		Private _lastReleasedTo As SqlInt32
		Private _lastReleasedToOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _regionID As SqlInt32
		Private _regionIDOld As SqlInt32
		Private _supervisorID As SqlInt32
		Private _supervisorIDOld As SqlInt32
		Private _interviewerID As SqlInt32
		Private _interviewerIDOld As SqlInt32
		Private _teamID As SqlInt32
		Private _teamIDOld As SqlInt32
		Private _instrumentTypeID As SqlInt32
		Private _instrumentTypeIDOld As SqlInt32
		Private _caseAssignmentID As SqlInt32
		Private _caseAssignmentIDOld As SqlInt32

		Private _lACity As SqlString
		Private _lACityOld As SqlString
		Private _teamName As SqlString
		Private _teamNameOld As SqlString
		Private _lAPostalCode As SqlString
		Private _lAPostalCodeOld As SqlString
		Private _gender As SqlString
		Private _genderOld As SqlString
		Private _addressSourceType As SqlString
		Private _addressSourceTypeOld As SqlString
		Private _validationStatus As SqlString
		Private _validationStatusOld As SqlString
		Private _languagedesc As SqlString
		Private _languagedescOld As SqlString
		Private _sitename As SqlString
		Private _sitenameOld As SqlString
		Private _firstName As SqlString
		Private _firstNameOld As SqlString
		Private _interviewerName As SqlString
		Private _interviewerNameOld As SqlString
		Private _supervisorName As SqlString
		Private _supervisorNameOld As SqlString
		Private _instrumentType As SqlString
		Private _instrumentTypeOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _lastName As SqlString
		Private _lastNameOld As SqlString
		Private _address1 As SqlString
		Private _address1Old As SqlString
		Private _city As SqlString
		Private _cityOld As SqlString
		Private _postalcode As SqlString
		Private _postalcodeOld As SqlString
		Private _state As SqlString
		Private _stateOld As SqlString
		Private _schoolName As SqlString
		Private _schoolNameOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The VwCaseAssignmentSearch constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the VwCaseAssignmentSearch class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwCaseAssignmentSearch class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwCaseAssignmentSearch class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_caseAssignmentID = New SqlInt32(CType(objDataRow("CaseAssignmentID"), Integer))
			
			_caseAssignmentIDOld = _caseAssignmentID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_interviewerID = New SqlInt32(CType(objDataRow("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objDataRow("TeamID") Is System.DBNull.Value Then
				_teamID = SqlInt32.Null
			Else
				_teamID = New SqlInt32(CType(objDataRow("TeamID"), Integer))
			End If
			
			_teamIDOld = _teamID
			
			If objDataRow("SupervisorID") Is System.DBNull.Value Then
				_supervisorID = SqlInt32.Null
			Else
				_supervisorID = New SqlInt32(CType(objDataRow("SupervisorID"), Integer))
			End If
			
			_supervisorIDOld = _supervisorID
			
			If objDataRow("RegionID") Is System.DBNull.Value Then
				_regionID = SqlInt32.Null
			Else
				_regionID = New SqlInt32(CType(objDataRow("RegionID"), Integer))
			End If
			
			_regionIDOld = _regionID
			
			If objDataRow("DateAssigned") Is System.DBNull.Value Then
				_dateAssigned = SqlDateTime.Null
			Else
				_dateAssigned = New SqlDateTime(CType(objDataRow("DateAssigned"), Date))
			End If
			
			_dateAssignedOld = _dateAssigned
			
			If objDataRow("LastReleasedTo") Is System.DBNull.Value Then
				_lastReleasedTo = SqlInt32.Null
			Else
				_lastReleasedTo = New SqlInt32(CType(objDataRow("LastReleasedTo"), Integer))
			End If
			
			_lastReleasedToOld = _lastReleasedTo
			
			If objDataRow("LastReleasedOn") Is System.DBNull.Value Then
				_lastReleasedOn = SqlDateTime.Null
			Else
				_lastReleasedOn = New SqlDateTime(CType(objDataRow("LastReleasedOn"), Date))
			End If
			
			_lastReleasedOnOld = _lastReleasedOn
			
			If objDataRow("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objDataRow("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objDataRow("StatusCode") Is System.DBNull.Value Then
				_statusCode = New SqlString("")
			Else
				_statusCode = New SqlString(CType(objDataRow("StatusCode"), String))
			End If
			
			_statusCodeOld = _statusCode
			
			_instrumentTypeID = New SqlInt32(CType(objDataRow("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objDataRow("InstrumentType") Is System.DBNull.Value Then
				_instrumentType = New SqlString("")
			Else
				_instrumentType = New SqlString(CType(objDataRow("InstrumentType"), String))
			End If
			
			_instrumentTypeOld = _instrumentType
			
			_isCAPIStatus = New SqlBoolean(CType(objDataRow("IsCAPIStatus"), Boolean))
			
			_isCAPIStatusOld = _isCAPIStatus
			
			_isComplete = New SqlBoolean(CType(objDataRow("IsComplete"), Boolean))
			
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(CType(objDataRow("IsFinalStatus"), Boolean))
			
			_isFinalStatusOld = _isFinalStatus
			
			If objDataRow("IsValidate") Is System.DBNull.Value Then
				_isValidate = New SqlBoolean(False)
			Else
				_isValidate = New SqlBoolean(CType(objDataRow("IsValidate"), Boolean))
			End If
			
			_isValidateOld = _isValidate
			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objDataRow("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objDataRow("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objDataRow("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objDataRow("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objDataRow("InterviewerName") Is System.DBNull.Value Then
				_interviewerName = New SqlString("")
			Else
				_interviewerName = New SqlString(CType(objDataRow("InterviewerName"), String))
			End If
			
			_interviewerNameOld = _interviewerName
			
			If objDataRow("TeamName") Is System.DBNull.Value Then
				_teamName = New SqlString("")
			Else
				_teamName = New SqlString(CType(objDataRow("TeamName"), String))
			End If
			
			_teamNameOld = _teamName
			
			If objDataRow("SupervisorName") Is System.DBNull.Value Then
				_supervisorName = New SqlString("")
			Else
				_supervisorName = New SqlString(CType(objDataRow("SupervisorName"), String))
			End If
			
			_supervisorNameOld = _supervisorName
			
			_state = New SqlString(CType(objDataRow("State"), String))
			
			_stateOld = _state
			
			_schoolName = New SqlString(CType(objDataRow("SchoolName"), String))
			
			_schoolNameOld = _schoolName
			
			_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			If objDataRow("PriorityStatus") Is System.DBNull.Value Then
				_priorityStatus = SqlInt32.Null
			Else
				_priorityStatus = New SqlInt32(CType(objDataRow("PriorityStatus"), Integer))
			End If
			
			_priorityStatusOld = _priorityStatus
			
			If objDataRow("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objDataRow("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objDataRow("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objDataRow("City"), String))
			End If
			
			_cityOld = _city
			
			If objDataRow("postalcode") Is System.DBNull.Value Then
				_postalcode = New SqlString("")
			Else
				_postalcode = New SqlString(CType(objDataRow("postalcode"), String))
			End If
			
			_postalcodeOld = _postalcode
			
			If objDataRow("Locatingstatus") Is System.DBNull.Value Then
				_locatingstatus = New SqlString("")
			Else
				_locatingstatus = New SqlString(CType(objDataRow("Locatingstatus"), String))
			End If
			
			_locatingstatusOld = _locatingstatus
			
			If objDataRow("LastAttemptDate") Is System.DBNull.Value Then
				_lastAttemptDate = SqlDateTime.Null
			Else
				_lastAttemptDate = New SqlDateTime(CType(objDataRow("LastAttemptDate"), Date))
			End If
			
			_lastAttemptDateOld = _lastAttemptDate
			
			If objDataRow("LACity") Is System.DBNull.Value Then
				_lACity = New SqlString("")
			Else
				_lACity = New SqlString(CType(objDataRow("LACity"), String))
			End If
			
			_lACityOld = _lACity
			
			If objDataRow("LAPostalCode") Is System.DBNull.Value Then
				_lAPostalCode = New SqlString("")
			Else
				_lAPostalCode = New SqlString(CType(objDataRow("LAPostalCode"), String))
			End If
			
			_lAPostalCodeOld = _lAPostalCode
			
			_languagedesc = New SqlString(CType(objDataRow("languagedesc"), String))
			
			_languagedescOld = _languagedesc
			
			If objDataRow("sitename") Is System.DBNull.Value Then
				_sitename = New SqlString("")
			Else
				_sitename = New SqlString(CType(objDataRow("sitename"), String))
			End If
			
			_sitenameOld = _sitename
			
			If objDataRow("ValidationStatus") Is System.DBNull.Value Then
				_validationStatus = New SqlString("")
			Else
				_validationStatus = New SqlString(CType(objDataRow("ValidationStatus"), String))
			End If
			
			_validationStatusOld = _validationStatus
			
			If objDataRow("RandomAssignment") Is System.DBNull.Value Then
				_randomAssignment = New SqlString("")
			Else
				_randomAssignment = New SqlString(CType(objDataRow("RandomAssignment"), String))
			End If
			
			_randomAssignmentOld = _randomAssignment
			
			_gender = New SqlString(CType(objDataRow("gender"), String))
			
			_genderOld = _gender
			
			If objDataRow("age") Is System.DBNull.Value Then
				_age = SqlInt32.Null
			Else
				_age = New SqlInt32(CType(objDataRow("age"), Integer))
			End If
			
			_ageOld = _age
			
			If objDataRow("AddressSourceType") Is System.DBNull.Value Then
				_addressSourceType = New SqlString("")
			Else
				_addressSourceType = New SqlString(CType(objDataRow("AddressSourceType"), String))
			End If
			
			_addressSourceTypeOld = _addressSourceType
			
			_moreFieldAttempts = New SqlInt32(CType(objDataRow("MoreFieldAttempts"), Integer))
			
			_moreFieldAttemptsOld = _moreFieldAttempts
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_caseAssignmentID = New SqlInt32(CType(objSqlDataReader("CaseAssignmentID"), Integer))
			
			_caseAssignmentIDOld = _caseAssignmentID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_interviewerID = New SqlInt32(CType(objSqlDataReader("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objSqlDataReader("TeamID") Is System.DBNull.Value Then
				_teamID = SqlInt32.Null
			Else
				_teamID = New SqlInt32(CType(objSqlDataReader("TeamID"), Integer))
			End If
			
			_teamIDOld = _teamID
			
			If objSqlDataReader("SupervisorID") Is System.DBNull.Value Then
				_supervisorID = SqlInt32.Null
			Else
				_supervisorID = New SqlInt32(CType(objSqlDataReader("SupervisorID"), Integer))
			End If
			
			_supervisorIDOld = _supervisorID
			
			If objSqlDataReader("RegionID") Is System.DBNull.Value Then
				_regionID = SqlInt32.Null
			Else
				_regionID = New SqlInt32(CType(objSqlDataReader("RegionID"), Integer))
			End If
			
			_regionIDOld = _regionID
			
			If objSqlDataReader("DateAssigned") Is System.DBNull.Value Then
				_dateAssigned = SqlDateTime.Null
			Else
				_dateAssigned = New SqlDateTime(CType(objSqlDataReader("DateAssigned"), Date))
			End If
			
			_dateAssignedOld = _dateAssigned
			
			If objSqlDataReader("LastReleasedTo") Is System.DBNull.Value Then
				_lastReleasedTo = SqlInt32.Null
			Else
				_lastReleasedTo = New SqlInt32(CType(objSqlDataReader("LastReleasedTo"), Integer))
			End If
			
			_lastReleasedToOld = _lastReleasedTo
			
			If objSqlDataReader("LastReleasedOn") Is System.DBNull.Value Then
				_lastReleasedOn = SqlDateTime.Null
			Else
				_lastReleasedOn = New SqlDateTime(CType(objSqlDataReader("LastReleasedOn"), Date))
			End If
			
			_lastReleasedOnOld = _lastReleasedOn
			
			If objSqlDataReader("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objSqlDataReader("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objSqlDataReader("StatusCode") Is System.DBNull.Value Then
				_statusCode = New SqlString("")
			Else
				_statusCode = New SqlString(CType(objSqlDataReader("StatusCode"), String))
			End If
			
			_statusCodeOld = _statusCode
			
			_instrumentTypeID = New SqlInt32(CType(objSqlDataReader("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objSqlDataReader("InstrumentType") Is System.DBNull.Value Then
				_instrumentType = New SqlString("")
			Else
				_instrumentType = New SqlString(CType(objSqlDataReader("InstrumentType"), String))
			End If
			
			_instrumentTypeOld = _instrumentType
			
			_isCAPIStatus = New SqlBoolean(CType(objSqlDataReader("IsCAPIStatus"), Boolean))
			
			_isCAPIStatusOld = _isCAPIStatus
			
			_isComplete = New SqlBoolean(CType(objSqlDataReader("IsComplete"), Boolean))
			
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(CType(objSqlDataReader("IsFinalStatus"), Boolean))
			
			_isFinalStatusOld = _isFinalStatus
			
			If objSqlDataReader("IsValidate") Is System.DBNull.Value Then
				_isValidate = New SqlBoolean(False)
			Else
				_isValidate = New SqlBoolean(CType(objSqlDataReader("IsValidate"), Boolean))
			End If
			
			_isValidateOld = _isValidate
			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objSqlDataReader("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objSqlDataReader("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objSqlDataReader("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objSqlDataReader("InterviewerName") Is System.DBNull.Value Then
				_interviewerName = New SqlString("")
			Else
				_interviewerName = New SqlString(CType(objSqlDataReader("InterviewerName"), String))
			End If
			
			_interviewerNameOld = _interviewerName
			
			If objSqlDataReader("TeamName") Is System.DBNull.Value Then
				_teamName = New SqlString("")
			Else
				_teamName = New SqlString(CType(objSqlDataReader("TeamName"), String))
			End If
			
			_teamNameOld = _teamName
			
			If objSqlDataReader("SupervisorName") Is System.DBNull.Value Then
				_supervisorName = New SqlString("")
			Else
				_supervisorName = New SqlString(CType(objSqlDataReader("SupervisorName"), String))
			End If
			
			_supervisorNameOld = _supervisorName
			
			_state = New SqlString(CType(objSqlDataReader("State"), String))
			
			_stateOld = _state
			
			_schoolName = New SqlString(CType(objSqlDataReader("SchoolName"), String))
			
			_schoolNameOld = _schoolName
			
			_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("PriorityStatus") Is System.DBNull.Value Then
				_priorityStatus = SqlInt32.Null
			Else
				_priorityStatus = New SqlInt32(CType(objSqlDataReader("PriorityStatus"), Integer))
			End If
			
			_priorityStatusOld = _priorityStatus
			
			If objSqlDataReader("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objSqlDataReader("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objSqlDataReader("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objSqlDataReader("City"), String))
			End If
			
			_cityOld = _city
			
			If objSqlDataReader("postalcode") Is System.DBNull.Value Then
				_postalcode = New SqlString("")
			Else
				_postalcode = New SqlString(CType(objSqlDataReader("postalcode"), String))
			End If
			
			_postalcodeOld = _postalcode
			
			If objSqlDataReader("Locatingstatus") Is System.DBNull.Value Then
				_locatingstatus = New SqlString("")
			Else
				_locatingstatus = New SqlString(CType(objSqlDataReader("Locatingstatus"), String))
			End If
			
			_locatingstatusOld = _locatingstatus
			
			If objSqlDataReader("LastAttemptDate") Is System.DBNull.Value Then
				_lastAttemptDate = SqlDateTime.Null
			Else
				_lastAttemptDate = New SqlDateTime(CType(objSqlDataReader("LastAttemptDate"), Date))
			End If
			
			_lastAttemptDateOld = _lastAttemptDate
			
			If objSqlDataReader("LACity") Is System.DBNull.Value Then
				_lACity = New SqlString("")
			Else
				_lACity = New SqlString(CType(objSqlDataReader("LACity"), String))
			End If
			
			_lACityOld = _lACity
			
			If objSqlDataReader("LAPostalCode") Is System.DBNull.Value Then
				_lAPostalCode = New SqlString("")
			Else
				_lAPostalCode = New SqlString(CType(objSqlDataReader("LAPostalCode"), String))
			End If
			
			_lAPostalCodeOld = _lAPostalCode
			
			_languagedesc = New SqlString(CType(objSqlDataReader("languagedesc"), String))
			
			_languagedescOld = _languagedesc
			
			If objSqlDataReader("sitename") Is System.DBNull.Value Then
				_sitename = New SqlString("")
			Else
				_sitename = New SqlString(CType(objSqlDataReader("sitename"), String))
			End If
			
			_sitenameOld = _sitename
			
			If objSqlDataReader("ValidationStatus") Is System.DBNull.Value Then
				_validationStatus = New SqlString("")
			Else
				_validationStatus = New SqlString(CType(objSqlDataReader("ValidationStatus"), String))
			End If
			
			_validationStatusOld = _validationStatus
			
			If objSqlDataReader("RandomAssignment") Is System.DBNull.Value Then
				_randomAssignment = New SqlString("")
			Else
				_randomAssignment = New SqlString(CType(objSqlDataReader("RandomAssignment"), String))
			End If
			
			_randomAssignmentOld = _randomAssignment
			
			_gender = New SqlString(CType(objSqlDataReader("gender"), String))
			
			_genderOld = _gender
			
			If objSqlDataReader("age") Is System.DBNull.Value Then
				_age = SqlInt32.Null
			Else
				_age = New SqlInt32(CType(objSqlDataReader("age"), Integer))
			End If
			
			_ageOld = _age
			
			If objSqlDataReader("AddressSourceType") Is System.DBNull.Value Then
				_addressSourceType = New SqlString("")
			Else
				_addressSourceType = New SqlString(CType(objSqlDataReader("AddressSourceType"), String))
			End If
			
			_addressSourceTypeOld = _addressSourceType
			
			_moreFieldAttempts = New SqlInt32(CType(objSqlDataReader("MoreFieldAttempts"), Integer))
			
			_moreFieldAttemptsOld = _moreFieldAttempts
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			
			
			
			
			
			
			_currentStatus = New SqlString("")
			_currentStatusOld = _currentStatus
			
			_statusCode = New SqlString("")
			_statusCodeOld = _statusCode
			
			
			_instrumentType = New SqlString("")
			_instrumentTypeOld = _instrumentType
			
			_isCAPIStatus = New SqlBoolean(False)
			_isCAPIStatusOld = _isCAPIStatus
			
			_isComplete = New SqlBoolean(False)
			_isCompleteOld = _isComplete
			
			_isFinalStatus = New SqlBoolean(False)
			_isFinalStatusOld = _isFinalStatus
			
			_isValidate = New SqlBoolean(False)
			_isValidateOld = _isValidate
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			_lastName = New SqlString("")
			_lastNameOld = _lastName
			
			_firstName = New SqlString("")
			_firstNameOld = _firstName
			
			_interviewerName = New SqlString("")
			_interviewerNameOld = _interviewerName
			
			_teamName = New SqlString("")
			_teamNameOld = _teamName
			
			_supervisorName = New SqlString("")
			_supervisorNameOld = _supervisorName
			
			_state = New SqlString("")
			_stateOld = _state
			
			_schoolName = New SqlString("")
			_schoolNameOld = _schoolName
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			
			_address1 = New SqlString("")
			_address1Old = _address1
			
			_city = New SqlString("")
			_cityOld = _city
			
			_postalcode = New SqlString("")
			_postalcodeOld = _postalcode
			
			_locatingstatus = New SqlString("")
			_locatingstatusOld = _locatingstatus
			
			
			_lACity = New SqlString("")
			_lACityOld = _lACity
			
			_lAPostalCode = New SqlString("")
			_lAPostalCodeOld = _lAPostalCode
			
			_languagedesc = New SqlString("")
			_languagedescOld = _languagedesc
			
			_sitename = New SqlString("")
			_sitenameOld = _sitename
			
			_validationStatus = New SqlString("")
			_validationStatusOld = _validationStatus
			
			_randomAssignment = New SqlString("")
			_randomAssignmentOld = _randomAssignment
			
			_gender = New SqlString("")
			_genderOld = _gender
			
			
			_addressSourceType = New SqlString("")
			_addressSourceTypeOld = _addressSourceType
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_caseAssignmentID = _caseAssignmentIDOld
			
			_caseID = _caseIDOld
			
			_interviewerID = _interviewerIDOld
			
			_teamID = _teamIDOld
			
			_supervisorID = _supervisorIDOld
			
			_regionID = _regionIDOld
			
			_dateAssigned = _dateAssignedOld
			
			_lastReleasedTo = _lastReleasedToOld
			
			_lastReleasedOn = _lastReleasedOnOld
			
			_currentStatus = _currentStatusOld
			
			_statusCode = _statusCodeOld
			
			_instrumentTypeID = _instrumentTypeIDOld
			
			_instrumentType = _instrumentTypeOld
			
			_isCAPIStatus = _isCAPIStatusOld
			
			_isComplete = _isCompleteOld
			
			_isFinalStatus = _isFinalStatusOld
			
			_isValidate = _isValidateOld
			
			_mPRID = _mPRIDOld
			
			_lastName = _lastNameOld
			
			_firstName = _firstNameOld
			
			_interviewerName = _interviewerNameOld
			
			_teamName = _teamNameOld
			
			_supervisorName = _supervisorNameOld
			
			_state = _stateOld
			
			_schoolName = _schoolNameOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_priorityStatus = _priorityStatusOld
			
			_address1 = _address1Old
			
			_city = _cityOld
			
			_postalcode = _postalcodeOld
			
			_locatingstatus = _locatingstatusOld
			
			_lastAttemptDate = _lastAttemptDateOld
			
			_lACity = _lACityOld
			
			_lAPostalCode = _lAPostalCodeOld
			
			_languagedesc = _languagedescOld
			
			_sitename = _sitenameOld
			
			_validationStatus = _validationStatusOld
			
			_randomAssignment = _randomAssignmentOld
			
			_gender = _genderOld
			
			_age = _ageOld
			
			_addressSourceType = _addressSourceTypeOld
			
			_moreFieldAttempts = _moreFieldAttemptsOld
			
			ModifiedColumnCount = 0
			
		End Sub



		''' <summary>
		''' Selects all rows from the view.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_vwCaseAssignmentSearch_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("vwCaseAssignmentSearch")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_vwCaseAssignmentSearch_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("VwCaseAssignmentSearch::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseAssignmentID]() As SqlInt32
			Get
				Return _caseAssignmentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseAssignmentID.Equals(Value) Then
					If _caseAssignmentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseAssignmentID.Equals(_caseAssignmentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseAssignmentIDTmp As SqlInt32 = Value
				If caseAssignmentIDTmp.IsNull Then
					Throw New NullValueException("CaseAssignmentID", "CaseAssignmentID can't be NULL")
				End If
				_caseAssignmentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerID]() As SqlInt32
			Get
				Return _interviewerID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerID.Equals(Value) Then
					If _interviewerIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerID.Equals(_interviewerIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerIDTmp As SqlInt32 = Value
				If interviewerIDTmp.IsNull Then
					Throw New NullValueException("InterviewerID", "InterviewerID can't be NULL")
				End If
				_interviewerID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TeamID]() As SqlInt32
			Get
				Return _teamID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _teamID.Equals(Value) Then
					If _teamIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _teamID.Equals(_teamIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_teamID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SupervisorID]() As SqlInt32
			Get
				Return _supervisorID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _supervisorID.Equals(Value) Then
					If _supervisorIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _supervisorID.Equals(_supervisorIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_supervisorID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RegionID]() As SqlInt32
			Get
				Return _regionID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _regionID.Equals(Value) Then
					If _regionIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _regionID.Equals(_regionIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_regionID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateAssigned]() As SqlDateTime
			Get
				Return _dateAssigned
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateAssigned.Equals(Value) Then
					If _dateAssignedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateAssigned.Equals(_dateAssignedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateAssigned = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastReleasedTo]() As SqlInt32
			Get
				Return _lastReleasedTo
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _lastReleasedTo.Equals(Value) Then
					If _lastReleasedToOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastReleasedTo.Equals(_lastReleasedToOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastReleasedTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastReleasedOn]() As SqlDateTime
			Get
				Return _lastReleasedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastReleasedOn.Equals(Value) Then
					If _lastReleasedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastReleasedOn.Equals(_lastReleasedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastReleasedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentStatus]() As SqlString
			Get
				Return _currentStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _currentStatus.IsNull Then
					CurrentValue = _currentStatus.Value
				End If
				If Not _currentStatusOld.IsNull Then
					OldValue = _currentStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_currentStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusCode]() As SqlString
			Get
				Return _statusCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _statusCode.IsNull Then
					CurrentValue = _statusCode.Value
				End If
				If Not _statusCodeOld.IsNull Then
					OldValue = _statusCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_statusCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentTypeID]() As SqlInt32
			Get
				Return _instrumentTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentTypeID.Equals(Value) Then
					If _instrumentTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentTypeID.Equals(_instrumentTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim instrumentTypeIDTmp As SqlInt32 = Value
				If instrumentTypeIDTmp.IsNull Then
					Throw New NullValueException("InstrumentTypeID", "InstrumentTypeID can't be NULL")
				End If
				_instrumentTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentType]() As SqlString
			Get
				Return _instrumentType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _instrumentType.IsNull Then
					CurrentValue = _instrumentType.Value
				End If
				If Not _instrumentTypeOld.IsNull Then
					OldValue = _instrumentTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_instrumentType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsCAPIStatus]() As SqlBoolean
			Get
				Return _isCAPIStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCAPIStatus.Equals(Value) Then
					If _isCAPIStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCAPIStatus.Equals(_isCAPIStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim isCAPIStatusTmp As SqlBoolean = Value
				If isCAPIStatusTmp.IsNull Then
					Throw New NullValueException("IsCAPIStatus", "IsCAPIStatus can't be NULL")
				End If
				_isCAPIStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsComplete]() As SqlBoolean
			Get
				Return _isComplete
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isComplete.Equals(Value) Then
					If _isCompleteOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isComplete.Equals(_isCompleteOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim isCompleteTmp As SqlBoolean = Value
				If isCompleteTmp.IsNull Then
					Throw New NullValueException("IsComplete", "IsComplete can't be NULL")
				End If
				_isComplete = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsFinalStatus]() As SqlBoolean
			Get
				Return _isFinalStatus
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isFinalStatus.Equals(Value) Then
					If _isFinalStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isFinalStatus.Equals(_isFinalStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim isFinalStatusTmp As SqlBoolean = Value
				If isFinalStatusTmp.IsNull Then
					Throw New NullValueException("IsFinalStatus", "IsFinalStatus can't be NULL")
				End If
				_isFinalStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsValidate]() As SqlBoolean
			Get
				Return _isValidate
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isValidate.Equals(Value) Then
					If _isValidateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isValidate.Equals(_isValidateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isValidate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastName]() As SqlString
			Get
				Return _lastName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastName.IsNull Then
					CurrentValue = _lastName.Value
				End If
				If Not _lastNameOld.IsNull Then
					OldValue = _lastNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FirstName]() As SqlString
			Get
				Return _firstName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _firstName.IsNull Then
					CurrentValue = _firstName.Value
				End If
				If Not _firstNameOld.IsNull Then
					OldValue = _firstNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_firstName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerName]() As SqlString
			Get
				Return _interviewerName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _interviewerName.IsNull Then
					CurrentValue = _interviewerName.Value
				End If
				If Not _interviewerNameOld.IsNull Then
					OldValue = _interviewerNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_interviewerName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TeamName]() As SqlString
			Get
				Return _teamName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _teamName.IsNull Then
					CurrentValue = _teamName.Value
				End If
				If Not _teamNameOld.IsNull Then
					OldValue = _teamNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_teamName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SupervisorName]() As SqlString
			Get
				Return _supervisorName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _supervisorName.IsNull Then
					CurrentValue = _supervisorName.Value
				End If
				If Not _supervisorNameOld.IsNull Then
					OldValue = _supervisorNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_supervisorName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [State]() As SqlString
			Get
				Return _state
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _state.IsNull Then
					CurrentValue = _state.Value
				End If
				If Not _stateOld.IsNull Then
					OldValue = _stateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim stateTmp As SqlString = Value
				If stateTmp.IsNull Then
					Throw New NullValueException("State", "State can't be NULL")
				End If
				_state = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SchoolName]() As SqlString
			Get
				Return _schoolName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _schoolName.IsNull Then
					CurrentValue = _schoolName.Value
				End If
				If Not _schoolNameOld.IsNull Then
					OldValue = _schoolNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim schoolNameTmp As SqlString = Value
				If schoolNameTmp.IsNull Then
					Throw New NullValueException("SchoolName", "SchoolName can't be NULL")
				End If
				_schoolName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim createdByTmp As SqlString = Value
				If createdByTmp.IsNull Then
					Throw New NullValueException("CreatedBy", "CreatedBy can't be NULL")
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim createdOnTmp As SqlDateTime = Value
				If createdOnTmp.IsNull Then
					Throw New NullValueException("CreatedOn", "CreatedOn can't be NULL")
				End If
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PriorityStatus]() As SqlInt32
			Get
				Return _priorityStatus
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _priorityStatus.Equals(Value) Then
					If _priorityStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _priorityStatus.Equals(_priorityStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_priorityStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address1]() As SqlString
			Get
				Return _address1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address1.IsNull Then
					CurrentValue = _address1.Value
				End If
				If Not _address1Old.IsNull Then
					OldValue = _address1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [City]() As SqlString
			Get
				Return _city
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _city.IsNull Then
					CurrentValue = _city.Value
				End If
				If Not _cityOld.IsNull Then
					OldValue = _cityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_city = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Postalcode]() As SqlString
			Get
				Return _postalcode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _postalcode.IsNull Then
					CurrentValue = _postalcode.Value
				End If
				If Not _postalcodeOld.IsNull Then
					OldValue = _postalcodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_postalcode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Locatingstatus]() As SqlString
			Get
				Return _locatingstatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingstatus.IsNull Then
					CurrentValue = _locatingstatus.Value
				End If
				If Not _locatingstatusOld.IsNull Then
					OldValue = _locatingstatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingstatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastAttemptDate]() As SqlDateTime
			Get
				Return _lastAttemptDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastAttemptDate.Equals(Value) Then
					If _lastAttemptDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastAttemptDate.Equals(_lastAttemptDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastAttemptDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LACity]() As SqlString
			Get
				Return _lACity
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lACity.IsNull Then
					CurrentValue = _lACity.Value
				End If
				If Not _lACityOld.IsNull Then
					OldValue = _lACityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lACity = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LAPostalCode]() As SqlString
			Get
				Return _lAPostalCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lAPostalCode.IsNull Then
					CurrentValue = _lAPostalCode.Value
				End If
				If Not _lAPostalCodeOld.IsNull Then
					OldValue = _lAPostalCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lAPostalCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Languagedesc]() As SqlString
			Get
				Return _languagedesc
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _languagedesc.IsNull Then
					CurrentValue = _languagedesc.Value
				End If
				If Not _languagedescOld.IsNull Then
					OldValue = _languagedescOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim languagedescTmp As SqlString = Value
				If languagedescTmp.IsNull Then
					Throw New NullValueException("Languagedesc", "Languagedesc can't be NULL")
				End If
				_languagedesc = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Sitename]() As SqlString
			Get
				Return _sitename
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sitename.IsNull Then
					CurrentValue = _sitename.Value
				End If
				If Not _sitenameOld.IsNull Then
					OldValue = _sitenameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sitename = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ValidationStatus]() As SqlString
			Get
				Return _validationStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _validationStatus.IsNull Then
					CurrentValue = _validationStatus.Value
				End If
				If Not _validationStatusOld.IsNull Then
					OldValue = _validationStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_validationStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RandomAssignment]() As SqlString
			Get
				Return _randomAssignment
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _randomAssignment.IsNull Then
					CurrentValue = _randomAssignment.Value
				End If
				If Not _randomAssignmentOld.IsNull Then
					OldValue = _randomAssignmentOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_randomAssignment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Gender]() As SqlString
			Get
				Return _gender
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _gender.IsNull Then
					CurrentValue = _gender.Value
				End If
				If Not _genderOld.IsNull Then
					OldValue = _genderOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim genderTmp As SqlString = Value
				If genderTmp.IsNull Then
					Throw New NullValueException("Gender", "Gender can't be NULL")
				End If
				_gender = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Age]() As SqlInt32
			Get
				Return _age
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _age.Equals(Value) Then
					If _ageOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _age.Equals(_ageOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_age = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressSourceType]() As SqlString
			Get
				Return _addressSourceType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _addressSourceType.IsNull Then
					CurrentValue = _addressSourceType.Value
				End If
				If Not _addressSourceTypeOld.IsNull Then
					OldValue = _addressSourceTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_addressSourceType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MoreFieldAttempts]() As SqlInt32
			Get
				Return _moreFieldAttempts
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _moreFieldAttempts.Equals(Value) Then
					If _moreFieldAttemptsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _moreFieldAttempts.Equals(_moreFieldAttemptsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim moreFieldAttemptsTmp As SqlInt32 = Value
				If moreFieldAttemptsTmp.IsNull Then
					Throw New NullValueException("MoreFieldAttempts", "MoreFieldAttempts can't be NULL")
				End If
				_moreFieldAttempts = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
