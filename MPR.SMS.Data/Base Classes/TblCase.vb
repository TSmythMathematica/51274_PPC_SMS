' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:30 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblCase.
	''' </summary>

	Public Class TblCase
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _inSample As SqlBoolean
		Private _inSampleOld As SqlBoolean
		Private _isClustered As SqlBoolean
		Private _isClusteredOld As SqlBoolean
		Private _isIneligible As SqlBoolean
		Private _isIneligibleOld As SqlBoolean

		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _siteID As SqlInt32
		Private _siteIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _internalID As SqlInt32
		Private _internalIDOld As SqlInt32
		Private _currentRound As SqlInt32
		Private _currentRoundOld As SqlInt32
		Private _wave As SqlInt32
		Private _waveOld As SqlInt32
		Private _release As SqlInt32
		Private _releaseOld As SqlInt32
		Private _entityTypeID As SqlInt32
		Private _entityTypeIDOld As SqlInt32

		Private _entityName As SqlString
		Private _entityNameOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _caseNotes As SqlString
		Private _caseNotesOld As SqlString
		Private _cohort As SqlString
		Private _cohortOld As SqlString
		Private _replicate As SqlString
		Private _replicateOld As SqlString
		Private _frameID As SqlString
		Private _frameIDOld As SqlString
		Private _experiment As SqlString
		Private _experimentOld As SqlString
		Private _pSU As SqlString
		Private _pSUOld As SqlString

#End Region

		''' <overloads>
		''' The TblCase constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblCase class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCase class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblCase class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("EntityName") Is System.DBNull.Value Then
				_entityName = New SqlString("")
			Else
				_entityName = New SqlString(CType(objDataRow("EntityName"), String))
			End If
			
			_entityNameOld = _entityName
			
			If objDataRow("EntityTypeID") Is System.DBNull.Value Then
				_entityTypeID = SqlInt32.Null
			Else
				_entityTypeID = New SqlInt32(CType(objDataRow("EntityTypeID"), Integer))
			End If
			
			_entityTypeIDOld = _entityTypeID
			
			If objDataRow("CurrentRound") Is System.DBNull.Value Then
				_currentRound = SqlInt32.Null
			Else
				_currentRound = New SqlInt32(CType(objDataRow("CurrentRound"), Integer))
			End If
			
			_currentRoundOld = _currentRound
			
			If objDataRow("InSample") Is System.DBNull.Value Then
				_inSample = New SqlBoolean(False)
			Else
				_inSample = New SqlBoolean(CType(objDataRow("InSample"), Boolean))
			End If
			
			_inSampleOld = _inSample
			
			If objDataRow("IsIneligible") Is System.DBNull.Value Then
				_isIneligible = New SqlBoolean(False)
			Else
				_isIneligible = New SqlBoolean(CType(objDataRow("IsIneligible"), Boolean))
			End If
			
			_isIneligibleOld = _isIneligible
			
			If objDataRow("Wave") Is System.DBNull.Value Then
				_wave = SqlInt32.Null
			Else
				_wave = New SqlInt32(CType(objDataRow("Wave"), Integer))
			End If
			
			_waveOld = _wave
			
			If objDataRow("Release") Is System.DBNull.Value Then
				_release = SqlInt32.Null
			Else
				_release = New SqlInt32(CType(objDataRow("Release"), Integer))
			End If
			
			_releaseOld = _release
			
			If objDataRow("Replicate") Is System.DBNull.Value Then
				_replicate = New SqlString("")
			Else
				_replicate = New SqlString(CType(objDataRow("Replicate"), String))
			End If
			
			_replicateOld = _replicate
			
			If objDataRow("Cohort") Is System.DBNull.Value Then
				_cohort = New SqlString("")
			Else
				_cohort = New SqlString(CType(objDataRow("Cohort"), String))
			End If
			
			_cohortOld = _cohort
			
			If objDataRow("SiteID") Is System.DBNull.Value Then
				_siteID = SqlInt32.Null
			Else
				_siteID = New SqlInt32(CType(objDataRow("SiteID"), Integer))
			End If
			
			_siteIDOld = _siteID
			
			If objDataRow("FrameID") Is System.DBNull.Value Then
				_frameID = New SqlString("")
			Else
				_frameID = New SqlString(CType(objDataRow("FrameID"), String))
			End If
			
			_frameIDOld = _frameID
			
			If objDataRow("PSU") Is System.DBNull.Value Then
				_pSU = New SqlString("")
			Else
				_pSU = New SqlString(CType(objDataRow("PSU"), String))
			End If
			
			_pSUOld = _pSU
			
			If objDataRow("IsClustered") Is System.DBNull.Value Then
				_isClustered = New SqlBoolean(False)
			Else
				_isClustered = New SqlBoolean(CType(objDataRow("IsClustered"), Boolean))
			End If
			
			_isClusteredOld = _isClustered
			
			If objDataRow("Experiment") Is System.DBNull.Value Then
				_experiment = New SqlString("")
			Else
				_experiment = New SqlString(CType(objDataRow("Experiment"), String))
			End If
			
			_experimentOld = _experiment
			
			If objDataRow("CaseNotes") Is System.DBNull.Value Then
				_caseNotes = New SqlString("")
			Else
				_caseNotes = New SqlString(CType(objDataRow("CaseNotes"), String))
			End If
			
			_caseNotesOld = _caseNotes
			
			If objDataRow("InternalID") Is System.DBNull.Value Then
				_internalID = SqlInt32.Null
			Else
				_internalID = New SqlInt32(CType(objDataRow("InternalID"), Integer))
			End If
			
			_internalIDOld = _internalID
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("EntityName") Is System.DBNull.Value Then
				_entityName = New SqlString("")
			Else
				_entityName = New SqlString(CType(objSqlDataReader("EntityName"), String))
			End If
			
			_entityNameOld = _entityName
			
			If objSqlDataReader("EntityTypeID") Is System.DBNull.Value Then
				_entityTypeID = SqlInt32.Null
			Else
				_entityTypeID = New SqlInt32(CType(objSqlDataReader("EntityTypeID"), Integer))
			End If
			
			_entityTypeIDOld = _entityTypeID
			
			If objSqlDataReader("CurrentRound") Is System.DBNull.Value Then
				_currentRound = SqlInt32.Null
			Else
				_currentRound = New SqlInt32(CType(objSqlDataReader("CurrentRound"), Integer))
			End If
			
			_currentRoundOld = _currentRound
			
			If objSqlDataReader("InSample") Is System.DBNull.Value Then
				_inSample = New SqlBoolean(False)
			Else
				_inSample = New SqlBoolean(CType(objSqlDataReader("InSample"), Boolean))
			End If
			
			_inSampleOld = _inSample
			
			If objSqlDataReader("IsIneligible") Is System.DBNull.Value Then
				_isIneligible = New SqlBoolean(False)
			Else
				_isIneligible = New SqlBoolean(CType(objSqlDataReader("IsIneligible"), Boolean))
			End If
			
			_isIneligibleOld = _isIneligible
			
			If objSqlDataReader("Wave") Is System.DBNull.Value Then
				_wave = SqlInt32.Null
			Else
				_wave = New SqlInt32(CType(objSqlDataReader("Wave"), Integer))
			End If
			
			_waveOld = _wave
			
			If objSqlDataReader("Release") Is System.DBNull.Value Then
				_release = SqlInt32.Null
			Else
				_release = New SqlInt32(CType(objSqlDataReader("Release"), Integer))
			End If
			
			_releaseOld = _release
			
			If objSqlDataReader("Replicate") Is System.DBNull.Value Then
				_replicate = New SqlString("")
			Else
				_replicate = New SqlString(CType(objSqlDataReader("Replicate"), String))
			End If
			
			_replicateOld = _replicate
			
			If objSqlDataReader("Cohort") Is System.DBNull.Value Then
				_cohort = New SqlString("")
			Else
				_cohort = New SqlString(CType(objSqlDataReader("Cohort"), String))
			End If
			
			_cohortOld = _cohort
			
			If objSqlDataReader("SiteID") Is System.DBNull.Value Then
				_siteID = SqlInt32.Null
			Else
				_siteID = New SqlInt32(CType(objSqlDataReader("SiteID"), Integer))
			End If
			
			_siteIDOld = _siteID
			
			If objSqlDataReader("FrameID") Is System.DBNull.Value Then
				_frameID = New SqlString("")
			Else
				_frameID = New SqlString(CType(objSqlDataReader("FrameID"), String))
			End If
			
			_frameIDOld = _frameID
			
			If objSqlDataReader("PSU") Is System.DBNull.Value Then
				_pSU = New SqlString("")
			Else
				_pSU = New SqlString(CType(objSqlDataReader("PSU"), String))
			End If
			
			_pSUOld = _pSU
			
			If objSqlDataReader("IsClustered") Is System.DBNull.Value Then
				_isClustered = New SqlBoolean(False)
			Else
				_isClustered = New SqlBoolean(CType(objSqlDataReader("IsClustered"), Boolean))
			End If
			
			_isClusteredOld = _isClustered
			
			If objSqlDataReader("Experiment") Is System.DBNull.Value Then
				_experiment = New SqlString("")
			Else
				_experiment = New SqlString(CType(objSqlDataReader("Experiment"), String))
			End If
			
			_experimentOld = _experiment
			
			If objSqlDataReader("CaseNotes") Is System.DBNull.Value Then
				_caseNotes = New SqlString("")
			Else
				_caseNotes = New SqlString(CType(objSqlDataReader("CaseNotes"), String))
			End If
			
			_caseNotesOld = _caseNotes
			
			If objSqlDataReader("InternalID") Is System.DBNull.Value Then
				_internalID = SqlInt32.Null
			Else
				_internalID = New SqlInt32(CType(objSqlDataReader("InternalID"), Integer))
			End If
			
			_internalIDOld = _internalID
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_entityName = New SqlString("")
			_entityNameOld = _entityName
			
			
			
			_inSample = New SqlBoolean(False)
			_inSampleOld = _inSample
			
			_isIneligible = New SqlBoolean(False)
			_isIneligibleOld = _isIneligible
			
			
			
			_replicate = New SqlString("")
			_replicateOld = _replicate
			
			_cohort = New SqlString("")
			_cohortOld = _cohort
			
			
			_frameID = New SqlString("")
			_frameIDOld = _frameID
			
			_pSU = New SqlString("")
			_pSUOld = _pSU
			
			_isClustered = New SqlBoolean(False)
			_isClusteredOld = _isClustered
			
			_experiment = New SqlString("")
			_experimentOld = _experiment
			
			_caseNotes = New SqlString("")
			_caseNotesOld = _caseNotes
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_caseID = _caseIDOld
			
			_entityName = _entityNameOld
			
			_entityTypeID = _entityTypeIDOld
			
			_currentRound = _currentRoundOld
			
			_inSample = _inSampleOld
			
			_isIneligible = _isIneligibleOld
			
			_wave = _waveOld
			
			_release = _releaseOld
			
			_replicate = _replicateOld
			
			_cohort = _cohortOld
			
			_siteID = _siteIDOld
			
			_frameID = _frameIDOld
			
			_pSU = _pSUOld
			
			_isClustered = _isClusteredOld
			
			_experiment = _experimentOld
			
			_caseNotes = _caseNotesOld
			
			_internalID = _internalIDOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>EntityName. May be SqlString.Null</LI>
		'''		 <LI>EntityTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>CurrentRound. May be SqlInt32.Null</LI>
		'''		 <LI>InSample. May be SqlBoolean.Null</LI>
		'''		 <LI>IsIneligible. May be SqlBoolean.Null</LI>
		'''		 <LI>Wave. May be SqlInt32.Null</LI>
		'''		 <LI>Release. May be SqlInt32.Null</LI>
		'''		 <LI>Replicate. May be SqlString.Null</LI>
		'''		 <LI>Cohort. May be SqlString.Null</LI>
		'''		 <LI>SiteID. May be SqlInt32.Null</LI>
		'''		 <LI>FrameID. May be SqlString.Null</LI>
		'''		 <LI>PSU. May be SqlString.Null</LI>
		'''		 <LI>IsClustered. May be SqlBoolean.Null</LI>
		'''		 <LI>Experiment. May be SqlString.Null</LI>
		'''		 <LI>CaseNotes. May be SqlString.Null</LI>
		'''		 <LI>InternalID. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCase_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _entityName))
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _entityTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentRound", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _currentRound))
				cmdToExecute.Parameters.Add(New SqlParameter("@InSample", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inSample))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsIneligible", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isIneligible))
				cmdToExecute.Parameters.Add(New SqlParameter("@Wave", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _wave))
				cmdToExecute.Parameters.Add(New SqlParameter("@Release", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _release))
				cmdToExecute.Parameters.Add(New SqlParameter("@Replicate", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _replicate))
				cmdToExecute.Parameters.Add(New SqlParameter("@Cohort", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _cohort))
				cmdToExecute.Parameters.Add(New SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(New SqlParameter("@FrameID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _frameID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PSU", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _pSU))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsClustered", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isClustered))
				cmdToExecute.Parameters.Add(New SqlParameter("@Experiment", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _experiment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseNotes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _caseNotes))
				cmdToExecute.Parameters.Add(New SqlParameter("@InternalID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _internalID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_caseID = CType(cmdToExecute.Parameters.Item("@CaseID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCase_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCase::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>EntityName. May be SqlString.Null</LI>
		'''		 <LI>EntityTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>CurrentRound. May be SqlInt32.Null</LI>
		'''		 <LI>InSample. May be SqlBoolean.Null</LI>
		'''		 <LI>IsIneligible. May be SqlBoolean.Null</LI>
		'''		 <LI>Wave. May be SqlInt32.Null</LI>
		'''		 <LI>Release. May be SqlInt32.Null</LI>
		'''		 <LI>Replicate. May be SqlString.Null</LI>
		'''		 <LI>Cohort. May be SqlString.Null</LI>
		'''		 <LI>SiteID. May be SqlInt32.Null</LI>
		'''		 <LI>FrameID. May be SqlString.Null</LI>
		'''		 <LI>PSU. May be SqlString.Null</LI>
		'''		 <LI>IsClustered. May be SqlBoolean.Null</LI>
		'''		 <LI>Experiment. May be SqlString.Null</LI>
		'''		 <LI>CaseNotes. May be SqlString.Null</LI>
		'''		 <LI>InternalID. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCase_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _entityName))
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _entityTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentRound", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _currentRound))
				cmdToExecute.Parameters.Add(New SqlParameter("@InSample", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inSample))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsIneligible", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isIneligible))
				cmdToExecute.Parameters.Add(New SqlParameter("@Wave", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _wave))
				cmdToExecute.Parameters.Add(New SqlParameter("@Release", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _release))
				cmdToExecute.Parameters.Add(New SqlParameter("@Replicate", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _replicate))
				cmdToExecute.Parameters.Add(New SqlParameter("@Cohort", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _cohort))
				cmdToExecute.Parameters.Add(New SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(New SqlParameter("@FrameID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _frameID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PSU", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _pSU))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsClustered", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isClustered))
				cmdToExecute.Parameters.Add(New SqlParameter("@Experiment", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _experiment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseNotes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _caseNotes))
				cmdToExecute.Parameters.Add(New SqlParameter("@InternalID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _internalID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCase_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCase::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCase_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCase_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCase::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>EntityName</LI>
		'''		 <LI>EntityTypeID</LI>
		'''		 <LI>CurrentRound</LI>
		'''		 <LI>InSample</LI>
		'''		 <LI>IsIneligible</LI>
		'''		 <LI>Wave</LI>
		'''		 <LI>Release</LI>
		'''		 <LI>Replicate</LI>
		'''		 <LI>Cohort</LI>
		'''		 <LI>SiteID</LI>
		'''		 <LI>FrameID</LI>
		'''		 <LI>PSU</LI>
		'''		 <LI>IsClustered</LI>
		'''		 <LI>Experiment</LI>
		'''		 <LI>CaseNotes</LI>
		'''		 <LI>InternalID</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCase_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCase")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCase_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCase::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblCase_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblCase")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblCase_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblCase::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EntityName]() As SqlString
			Get
				Return _entityName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _entityName.IsNull Then
					CurrentValue = _entityName.Value
				End If
				If Not _entityNameOld.IsNull Then
					OldValue = _entityNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_entityName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [EntityTypeID]() As SqlInt32
			Get
				Return _entityTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _entityTypeID.Equals(Value) Then
					If _entityTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _entityTypeID.Equals(_entityTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_entityTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentRound]() As SqlInt32
			Get
				Return _currentRound
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _currentRound.Equals(Value) Then
					If _currentRoundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _currentRound.Equals(_currentRoundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_currentRound = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [InSample]() As SqlBoolean
			Get
				Return _inSample
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _inSample.Equals(Value) Then
					If _inSampleOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _inSample.Equals(_inSampleOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_inSample = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsIneligible]() As SqlBoolean
			Get
				Return _isIneligible
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isIneligible.Equals(Value) Then
					If _isIneligibleOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isIneligible.Equals(_isIneligibleOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isIneligible = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Wave]() As SqlInt32
			Get
				Return _wave
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _wave.Equals(Value) Then
					If _waveOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _wave.Equals(_waveOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_wave = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Release]() As SqlInt32
			Get
				Return _release
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _release.Equals(Value) Then
					If _releaseOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _release.Equals(_releaseOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_release = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Replicate]() As SqlString
			Get
				Return _replicate
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _replicate.IsNull Then
					CurrentValue = _replicate.Value
				End If
				If Not _replicateOld.IsNull Then
					OldValue = _replicateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_replicate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Cohort]() As SqlString
			Get
				Return _cohort
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _cohort.IsNull Then
					CurrentValue = _cohort.Value
				End If
				If Not _cohortOld.IsNull Then
					OldValue = _cohortOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_cohort = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SiteID]() As SqlInt32
			Get
				Return _siteID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _siteID.Equals(Value) Then
					If _siteIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _siteID.Equals(_siteIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_siteID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [FrameID]() As SqlString
			Get
				Return _frameID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _frameID.IsNull Then
					CurrentValue = _frameID.Value
				End If
				If Not _frameIDOld.IsNull Then
					OldValue = _frameIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_frameID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PSU]() As SqlString
			Get
				Return _pSU
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _pSU.IsNull Then
					CurrentValue = _pSU.Value
				End If
				If Not _pSUOld.IsNull Then
					OldValue = _pSUOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_pSU = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsClustered]() As SqlBoolean
			Get
				Return _isClustered
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isClustered.Equals(Value) Then
					If _isClusteredOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isClustered.Equals(_isClusteredOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isClustered = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Experiment]() As SqlString
			Get
				Return _experiment
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _experiment.IsNull Then
					CurrentValue = _experiment.Value
				End If
				If Not _experimentOld.IsNull Then
					OldValue = _experimentOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_experiment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseNotes]() As SqlString
			Get
				Return _caseNotes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _caseNotes.IsNull Then
					CurrentValue = _caseNotes.Value
				End If
				If Not _caseNotesOld.IsNull Then
					OldValue = _caseNotesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_caseNotes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InternalID]() As SqlInt32
			Get
				Return _internalID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _internalID.Equals(Value) Then
					If _internalIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _internalID.Equals(_internalIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_internalID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
