' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:36 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpDocumentStatus.
	''' </summary>

	Public Class TlkpDocumentStatus
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _setOrigAddrQualityTo As SqlInt32
		Private _setOrigAddrQualityToOld As SqlInt32
		Private _returnedMailSetTo As SqlInt32
		Private _returnedMailSetToOld As SqlInt32
		Private _statusTypeId As SqlInt32
		Private _statusTypeIdOld As SqlInt32
		Private _documentStatusID As SqlInt32
		Private _documentStatusIDOld As SqlInt32

		Private _origAddressNoteSet As SqlString
		Private _origAddressNoteSetOld As SqlString
		Private _setOrigAddrBestMailTo As SqlString
		Private _setOrigAddrBestMailToOld As SqlString
		Private _statusDesc As SqlString
		Private _statusDescOld As SqlString
		Private _setOrigAddrBestPhysicalTo As SqlString
		Private _setOrigAddrBestPhysicalToOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpDocumentStatus constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpDocumentStatus class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpDocumentStatus class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpDocumentStatus class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_documentStatusID = New SqlInt32(CType(objDataRow("DocumentStatusID"), Integer))
			
			_documentStatusIDOld = _documentStatusID
			
			If objDataRow("StatusDesc") Is System.DBNull.Value Then
				_statusDesc = New SqlString("")
			Else
				_statusDesc = New SqlString(CType(objDataRow("StatusDesc"), String))
			End If
			
			_statusDescOld = _statusDesc
			
			If objDataRow("StatusTypeId") Is System.DBNull.Value Then
				_statusTypeId = SqlInt32.Null
			Else
				_statusTypeId = New SqlInt32(CType(objDataRow("StatusTypeId"), Integer))
			End If
			
			_statusTypeIdOld = _statusTypeId
			
			If objDataRow("SetOrigAddrQualityTo") Is System.DBNull.Value Then
				_setOrigAddrQualityTo = SqlInt32.Null
			Else
				_setOrigAddrQualityTo = New SqlInt32(CType(objDataRow("SetOrigAddrQualityTo"), Integer))
			End If
			
			_setOrigAddrQualityToOld = _setOrigAddrQualityTo
			
			If objDataRow("SetOrigAddrBestPhysicalTo") Is System.DBNull.Value Then
				_setOrigAddrBestPhysicalTo = New SqlString("")
			Else
				_setOrigAddrBestPhysicalTo = New SqlString(CType(objDataRow("SetOrigAddrBestPhysicalTo"), String))
			End If
			
			_setOrigAddrBestPhysicalToOld = _setOrigAddrBestPhysicalTo
			
			If objDataRow("SetOrigAddrBestMailTo") Is System.DBNull.Value Then
				_setOrigAddrBestMailTo = New SqlString("")
			Else
				_setOrigAddrBestMailTo = New SqlString(CType(objDataRow("SetOrigAddrBestMailTo"), String))
			End If
			
			_setOrigAddrBestMailToOld = _setOrigAddrBestMailTo
			
			If objDataRow("ReturnedMailSetTo") Is System.DBNull.Value Then
				_returnedMailSetTo = SqlInt32.Null
			Else
				_returnedMailSetTo = New SqlInt32(CType(objDataRow("ReturnedMailSetTo"), Integer))
			End If
			
			_returnedMailSetToOld = _returnedMailSetTo
			
			If objDataRow("OrigAddressNoteSet") Is System.DBNull.Value Then
				_origAddressNoteSet = New SqlString("")
			Else
				_origAddressNoteSet = New SqlString(CType(objDataRow("OrigAddressNoteSet"), String))
			End If
			
			_origAddressNoteSetOld = _origAddressNoteSet
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_documentStatusID = New SqlInt32(CType(objSqlDataReader("DocumentStatusID"), Integer))
			
			_documentStatusIDOld = _documentStatusID
			
			If objSqlDataReader("StatusDesc") Is System.DBNull.Value Then
				_statusDesc = New SqlString("")
			Else
				_statusDesc = New SqlString(CType(objSqlDataReader("StatusDesc"), String))
			End If
			
			_statusDescOld = _statusDesc
			
			If objSqlDataReader("StatusTypeId") Is System.DBNull.Value Then
				_statusTypeId = SqlInt32.Null
			Else
				_statusTypeId = New SqlInt32(CType(objSqlDataReader("StatusTypeId"), Integer))
			End If
			
			_statusTypeIdOld = _statusTypeId
			
			If objSqlDataReader("SetOrigAddrQualityTo") Is System.DBNull.Value Then
				_setOrigAddrQualityTo = SqlInt32.Null
			Else
				_setOrigAddrQualityTo = New SqlInt32(CType(objSqlDataReader("SetOrigAddrQualityTo"), Integer))
			End If
			
			_setOrigAddrQualityToOld = _setOrigAddrQualityTo
			
			If objSqlDataReader("SetOrigAddrBestPhysicalTo") Is System.DBNull.Value Then
				_setOrigAddrBestPhysicalTo = New SqlString("")
			Else
				_setOrigAddrBestPhysicalTo = New SqlString(CType(objSqlDataReader("SetOrigAddrBestPhysicalTo"), String))
			End If
			
			_setOrigAddrBestPhysicalToOld = _setOrigAddrBestPhysicalTo
			
			If objSqlDataReader("SetOrigAddrBestMailTo") Is System.DBNull.Value Then
				_setOrigAddrBestMailTo = New SqlString("")
			Else
				_setOrigAddrBestMailTo = New SqlString(CType(objSqlDataReader("SetOrigAddrBestMailTo"), String))
			End If
			
			_setOrigAddrBestMailToOld = _setOrigAddrBestMailTo
			
			If objSqlDataReader("ReturnedMailSetTo") Is System.DBNull.Value Then
				_returnedMailSetTo = SqlInt32.Null
			Else
				_returnedMailSetTo = New SqlInt32(CType(objSqlDataReader("ReturnedMailSetTo"), Integer))
			End If
			
			_returnedMailSetToOld = _returnedMailSetTo
			
			If objSqlDataReader("OrigAddressNoteSet") Is System.DBNull.Value Then
				_origAddressNoteSet = New SqlString("")
			Else
				_origAddressNoteSet = New SqlString(CType(objSqlDataReader("OrigAddressNoteSet"), String))
			End If
			
			_origAddressNoteSetOld = _origAddressNoteSet
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_statusDesc = New SqlString("")
			_statusDescOld = _statusDesc
			
			
			
			_setOrigAddrBestPhysicalTo = New SqlString("")
			_setOrigAddrBestPhysicalToOld = _setOrigAddrBestPhysicalTo
			
			_setOrigAddrBestMailTo = New SqlString("")
			_setOrigAddrBestMailToOld = _setOrigAddrBestMailTo
			
			
			_origAddressNoteSet = New SqlString("")
			_origAddressNoteSetOld = _origAddressNoteSet
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_documentStatusID = _documentStatusIDOld
			
			_statusDesc = _statusDescOld
			
			_statusTypeId = _statusTypeIdOld
			
			_setOrigAddrQualityTo = _setOrigAddrQualityToOld
			
			_setOrigAddrBestPhysicalTo = _setOrigAddrBestPhysicalToOld
			
			_setOrigAddrBestMailTo = _setOrigAddrBestMailToOld
			
			_returnedMailSetTo = _returnedMailSetToOld
			
			_origAddressNoteSet = _origAddressNoteSetOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>StatusDesc. May be SqlString.Null</LI>
		'''		 <LI>StatusTypeId. May be SqlInt32.Null</LI>
		'''		 <LI>SetOrigAddrQualityTo. May be SqlInt32.Null</LI>
		'''		 <LI>SetOrigAddrBestPhysicalTo. May be SqlString.Null</LI>
		'''		 <LI>SetOrigAddrBestMailTo. May be SqlString.Null</LI>
		'''		 <LI>ReturnedMailSetTo. May be SqlInt32.Null</LI>
		'''		 <LI>OrigAddressNoteSet. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>DocumentStatusID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentStatus_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusDesc", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusDesc))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusTypeId", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _statusTypeId))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrQualityTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _setOrigAddrQualityTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrBestPhysicalTo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _setOrigAddrBestPhysicalTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrBestMailTo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _setOrigAddrBestMailTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnedMailSetTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _returnedMailSetTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@OrigAddressNoteSet", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _origAddressNoteSet))
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentStatusID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _documentStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_documentStatusID = CType(cmdToExecute.Parameters.Item("@DocumentStatusID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentStatus_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentStatus::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentStatusID</LI>
		'''		 <LI>StatusDesc. May be SqlString.Null</LI>
		'''		 <LI>StatusTypeId. May be SqlInt32.Null</LI>
		'''		 <LI>SetOrigAddrQualityTo. May be SqlInt32.Null</LI>
		'''		 <LI>SetOrigAddrBestPhysicalTo. May be SqlString.Null</LI>
		'''		 <LI>SetOrigAddrBestMailTo. May be SqlString.Null</LI>
		'''		 <LI>ReturnedMailSetTo. May be SqlInt32.Null</LI>
		'''		 <LI>OrigAddressNoteSet. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentStatus_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentStatusID))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusDesc", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusDesc))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusTypeId", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _statusTypeId))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrQualityTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _setOrigAddrQualityTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrBestPhysicalTo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _setOrigAddrBestPhysicalTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@SetOrigAddrBestMailTo", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _setOrigAddrBestMailTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnedMailSetTo", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _returnedMailSetTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@OrigAddressNoteSet", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _origAddressNoteSet))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentStatus_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentStatus::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentStatusID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentStatus_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentStatus_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentStatus::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>DocumentStatusID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>DocumentStatusID</LI>
		'''		 <LI>StatusDesc</LI>
		'''		 <LI>StatusTypeId</LI>
		'''		 <LI>SetOrigAddrQualityTo</LI>
		'''		 <LI>SetOrigAddrBestPhysicalTo</LI>
		'''		 <LI>SetOrigAddrBestMailTo</LI>
		'''		 <LI>ReturnedMailSetTo</LI>
		'''		 <LI>OrigAddressNoteSet</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentStatus_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpDocumentStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@DocumentStatusID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _documentStatusID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentStatus_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentStatus::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpDocumentStatus_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpDocumentStatus")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpDocumentStatus_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpDocumentStatus::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DocumentStatusID]() As SqlInt32
			Get
				Return _documentStatusID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentStatusID.Equals(Value) Then
					If _documentStatusIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentStatusID.Equals(_documentStatusIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim documentStatusIDTmp As SqlInt32 = Value
				If documentStatusIDTmp.IsNull Then
					Throw New NullValueException("DocumentStatusID", "DocumentStatusID can't be NULL")
				End If
				_documentStatusID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusDesc]() As SqlString
			Get
				Return _statusDesc
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _statusDesc.IsNull Then
					CurrentValue = _statusDesc.Value
				End If
				If Not _statusDescOld.IsNull Then
					OldValue = _statusDescOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_statusDesc = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusTypeId]() As SqlInt32
			Get
				Return _statusTypeId
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _statusTypeId.Equals(Value) Then
					If _statusTypeIdOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _statusTypeId.Equals(_statusTypeIdOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_statusTypeId = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SetOrigAddrQualityTo]() As SqlInt32
			Get
				Return _setOrigAddrQualityTo
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _setOrigAddrQualityTo.Equals(Value) Then
					If _setOrigAddrQualityToOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _setOrigAddrQualityTo.Equals(_setOrigAddrQualityToOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_setOrigAddrQualityTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SetOrigAddrBestPhysicalTo]() As SqlString
			Get
				Return _setOrigAddrBestPhysicalTo
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _setOrigAddrBestPhysicalTo.IsNull Then
					CurrentValue = _setOrigAddrBestPhysicalTo.Value
				End If
				If Not _setOrigAddrBestPhysicalToOld.IsNull Then
					OldValue = _setOrigAddrBestPhysicalToOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_setOrigAddrBestPhysicalTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SetOrigAddrBestMailTo]() As SqlString
			Get
				Return _setOrigAddrBestMailTo
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _setOrigAddrBestMailTo.IsNull Then
					CurrentValue = _setOrigAddrBestMailTo.Value
				End If
				If Not _setOrigAddrBestMailToOld.IsNull Then
					OldValue = _setOrigAddrBestMailToOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_setOrigAddrBestMailTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReturnedMailSetTo]() As SqlInt32
			Get
				Return _returnedMailSetTo
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _returnedMailSetTo.Equals(Value) Then
					If _returnedMailSetToOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _returnedMailSetTo.Equals(_returnedMailSetToOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_returnedMailSetTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OrigAddressNoteSet]() As SqlString
			Get
				Return _origAddressNoteSet
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _origAddressNoteSet.IsNull Then
					CurrentValue = _origAddressNoteSet.Value
				End If
				If Not _origAddressNoteSetOld.IsNull Then
					OldValue = _origAddressNoteSetOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_origAddressNoteSet = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
