' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:37 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpInstrumentType.
	''' </summary>

	Public Class TlkpInstrumentType
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isSRDEELock As SqlBoolean
		Private _isSRDEELockOld As SqlBoolean
		Private _isPrimaryFieldInstrument As SqlBoolean
		Private _isPrimaryFieldInstrumentOld As SqlBoolean
		Private _isConsentForm As SqlBoolean
		Private _isConsentFormOld As SqlBoolean
		Private _showInBatching As SqlBoolean
		Private _showInBatchingOld As SqlBoolean
		Private _isAudioVisual As SqlBoolean
		Private _isAudioVisualOld As SqlBoolean
		Private _isSRDEE As SqlBoolean
		Private _isSRDEEOld As SqlBoolean
		Private _isHardcopy As SqlBoolean
		Private _isHardcopyOld As SqlBoolean
		Private _isSRDEELongitudinal As SqlBoolean
		Private _isSRDEELongitudinalOld As SqlBoolean
		Private _sMSToConfirmitRT As SqlBoolean
		Private _sMSToConfirmitRTOld As SqlBoolean
		Private _isCATI As SqlBoolean
		Private _isCATIOld As SqlBoolean
		Private _isCAWI As SqlBoolean
		Private _isCAWIOld As SqlBoolean
		Private _isCAPI As SqlBoolean
		Private _isCAPIOld As SqlBoolean

		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _instrumentTypeID As SqlInt32
		Private _instrumentTypeIDOld As SqlInt32
		Private _entityTypeID As SqlInt32
		Private _entityTypeIDOld As SqlInt32
		Private _maxBatchSize As SqlInt32
		Private _maxBatchSizeOld As SqlInt32

		Private _description As SqlString
		Private _descriptionOld As SqlString
		Private _sRDEEViewLongitudinal As SqlString
		Private _sRDEEViewLongitudinalOld As SqlString
		Private _surveyID As SqlString
		Private _surveyIDOld As SqlString
		Private _dataEntryProgramName As SqlString
		Private _dataEntryProgramNameOld As SqlString
		Private _blaisePath As SqlString
		Private _blaisePathOld As SqlString
		Private _dataEntryProgramID As SqlString
		Private _dataEntryProgramIDOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpInstrumentType constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpInstrumentType class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpInstrumentType class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpInstrumentType class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_instrumentTypeID = New SqlInt32(CType(objDataRow("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objDataRow("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objDataRow("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objDataRow("EntityTypeID") Is System.DBNull.Value Then
				_entityTypeID = SqlInt32.Null
			Else
				_entityTypeID = New SqlInt32(CType(objDataRow("EntityTypeID"), Integer))
			End If
			
			_entityTypeIDOld = _entityTypeID
			
			If objDataRow("IsCATI") Is System.DBNull.Value Then
				_isCATI = New SqlBoolean(False)
			Else
				_isCATI = New SqlBoolean(CType(objDataRow("IsCATI"), Boolean))
			End If
			
			_isCATIOld = _isCATI
			
			If objDataRow("IsCAPI") Is System.DBNull.Value Then
				_isCAPI = New SqlBoolean(False)
			Else
				_isCAPI = New SqlBoolean(CType(objDataRow("IsCAPI"), Boolean))
			End If
			
			_isCAPIOld = _isCAPI
			
			If objDataRow("IsCAWI") Is System.DBNull.Value Then
				_isCAWI = New SqlBoolean(False)
			Else
				_isCAWI = New SqlBoolean(CType(objDataRow("IsCAWI"), Boolean))
			End If
			
			_isCAWIOld = _isCAWI
			
			If objDataRow("IsHardcopy") Is System.DBNull.Value Then
				_isHardcopy = New SqlBoolean(False)
			Else
				_isHardcopy = New SqlBoolean(CType(objDataRow("IsHardcopy"), Boolean))
			End If
			
			_isHardcopyOld = _isHardcopy
			
			If objDataRow("IsConsentForm") Is System.DBNull.Value Then
				_isConsentForm = New SqlBoolean(False)
			Else
				_isConsentForm = New SqlBoolean(CType(objDataRow("IsConsentForm"), Boolean))
			End If
			
			_isConsentFormOld = _isConsentForm
			
			If objDataRow("IsPrimaryFieldInstrument") Is System.DBNull.Value Then
				_isPrimaryFieldInstrument = New SqlBoolean(False)
			Else
				_isPrimaryFieldInstrument = New SqlBoolean(CType(objDataRow("IsPrimaryFieldInstrument"), Boolean))
			End If
			
			_isPrimaryFieldInstrumentOld = _isPrimaryFieldInstrument
			
			If objDataRow("DataEntryProgramID") Is System.DBNull.Value Then
				_dataEntryProgramID = New SqlString("")
			Else
				_dataEntryProgramID = New SqlString(CType(objDataRow("DataEntryProgramID"), String))
			End If
			
			_dataEntryProgramIDOld = _dataEntryProgramID
			
			If objDataRow("MaxBatchSize") Is System.DBNull.Value Then
				_maxBatchSize = SqlInt32.Null
			Else
				_maxBatchSize = New SqlInt32(CType(objDataRow("MaxBatchSize"), Integer))
			End If
			
			_maxBatchSizeOld = _maxBatchSize
			
			If objDataRow("DataEntryProgramName") Is System.DBNull.Value Then
				_dataEntryProgramName = New SqlString("")
			Else
				_dataEntryProgramName = New SqlString(CType(objDataRow("DataEntryProgramName"), String))
			End If
			
			_dataEntryProgramNameOld = _dataEntryProgramName
			
			If objDataRow("IsAudioVisual") Is System.DBNull.Value Then
				_isAudioVisual = New SqlBoolean(False)
			Else
				_isAudioVisual = New SqlBoolean(CType(objDataRow("IsAudioVisual"), Boolean))
			End If
			
			_isAudioVisualOld = _isAudioVisual
			
			If objDataRow("ShowInBatching") Is System.DBNull.Value Then
				_showInBatching = New SqlBoolean(False)
			Else
				_showInBatching = New SqlBoolean(CType(objDataRow("ShowInBatching"), Boolean))
			End If
			
			_showInBatchingOld = _showInBatching
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("BlaisePath") Is System.DBNull.Value Then
				_blaisePath = New SqlString("")
			Else
				_blaisePath = New SqlString(CType(objDataRow("BlaisePath"), String))
			End If
			
			_blaisePathOld = _blaisePath
			
			If objDataRow("IsSRDEE") Is System.DBNull.Value Then
				_isSRDEE = New SqlBoolean(False)
			Else
				_isSRDEE = New SqlBoolean(CType(objDataRow("IsSRDEE"), Boolean))
			End If
			
			_isSRDEEOld = _isSRDEE
			
			If objDataRow("IsSRDEELock") Is System.DBNull.Value Then
				_isSRDEELock = New SqlBoolean(False)
			Else
				_isSRDEELock = New SqlBoolean(CType(objDataRow("IsSRDEELock"), Boolean))
			End If
			
			_isSRDEELockOld = _isSRDEELock
			
			If objDataRow("IsSRDEELongitudinal") Is System.DBNull.Value Then
				_isSRDEELongitudinal = New SqlBoolean(False)
			Else
				_isSRDEELongitudinal = New SqlBoolean(CType(objDataRow("IsSRDEELongitudinal"), Boolean))
			End If
			
			_isSRDEELongitudinalOld = _isSRDEELongitudinal
			
			If objDataRow("SRDEEViewLongitudinal") Is System.DBNull.Value Then
				_sRDEEViewLongitudinal = New SqlString("")
			Else
				_sRDEEViewLongitudinal = New SqlString(CType(objDataRow("SRDEEViewLongitudinal"), String))
			End If
			
			_sRDEEViewLongitudinalOld = _sRDEEViewLongitudinal
			
			If objDataRow("SurveyID") Is System.DBNull.Value Then
				_surveyID = New SqlString("")
			Else
				_surveyID = New SqlString(CType(objDataRow("SurveyID"), String))
			End If
			
			_surveyIDOld = _surveyID
			
			If objDataRow("SMSToConfirmitRT") Is System.DBNull.Value Then
				_sMSToConfirmitRT = New SqlBoolean(False)
			Else
				_sMSToConfirmitRT = New SqlBoolean(CType(objDataRow("SMSToConfirmitRT"), Boolean))
			End If
			
			_sMSToConfirmitRTOld = _sMSToConfirmitRT
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_instrumentTypeID = New SqlInt32(CType(objSqlDataReader("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objSqlDataReader("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objSqlDataReader("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objSqlDataReader("EntityTypeID") Is System.DBNull.Value Then
				_entityTypeID = SqlInt32.Null
			Else
				_entityTypeID = New SqlInt32(CType(objSqlDataReader("EntityTypeID"), Integer))
			End If
			
			_entityTypeIDOld = _entityTypeID
			
			If objSqlDataReader("IsCATI") Is System.DBNull.Value Then
				_isCATI = New SqlBoolean(False)
			Else
				_isCATI = New SqlBoolean(CType(objSqlDataReader("IsCATI"), Boolean))
			End If
			
			_isCATIOld = _isCATI
			
			If objSqlDataReader("IsCAPI") Is System.DBNull.Value Then
				_isCAPI = New SqlBoolean(False)
			Else
				_isCAPI = New SqlBoolean(CType(objSqlDataReader("IsCAPI"), Boolean))
			End If
			
			_isCAPIOld = _isCAPI
			
			If objSqlDataReader("IsCAWI") Is System.DBNull.Value Then
				_isCAWI = New SqlBoolean(False)
			Else
				_isCAWI = New SqlBoolean(CType(objSqlDataReader("IsCAWI"), Boolean))
			End If
			
			_isCAWIOld = _isCAWI
			
			If objSqlDataReader("IsHardcopy") Is System.DBNull.Value Then
				_isHardcopy = New SqlBoolean(False)
			Else
				_isHardcopy = New SqlBoolean(CType(objSqlDataReader("IsHardcopy"), Boolean))
			End If
			
			_isHardcopyOld = _isHardcopy
			
			If objSqlDataReader("IsConsentForm") Is System.DBNull.Value Then
				_isConsentForm = New SqlBoolean(False)
			Else
				_isConsentForm = New SqlBoolean(CType(objSqlDataReader("IsConsentForm"), Boolean))
			End If
			
			_isConsentFormOld = _isConsentForm
			
			If objSqlDataReader("IsPrimaryFieldInstrument") Is System.DBNull.Value Then
				_isPrimaryFieldInstrument = New SqlBoolean(False)
			Else
				_isPrimaryFieldInstrument = New SqlBoolean(CType(objSqlDataReader("IsPrimaryFieldInstrument"), Boolean))
			End If
			
			_isPrimaryFieldInstrumentOld = _isPrimaryFieldInstrument
			
			If objSqlDataReader("DataEntryProgramID") Is System.DBNull.Value Then
				_dataEntryProgramID = New SqlString("")
			Else
				_dataEntryProgramID = New SqlString(CType(objSqlDataReader("DataEntryProgramID"), String))
			End If
			
			_dataEntryProgramIDOld = _dataEntryProgramID
			
			If objSqlDataReader("MaxBatchSize") Is System.DBNull.Value Then
				_maxBatchSize = SqlInt32.Null
			Else
				_maxBatchSize = New SqlInt32(CType(objSqlDataReader("MaxBatchSize"), Integer))
			End If
			
			_maxBatchSizeOld = _maxBatchSize
			
			If objSqlDataReader("DataEntryProgramName") Is System.DBNull.Value Then
				_dataEntryProgramName = New SqlString("")
			Else
				_dataEntryProgramName = New SqlString(CType(objSqlDataReader("DataEntryProgramName"), String))
			End If
			
			_dataEntryProgramNameOld = _dataEntryProgramName
			
			If objSqlDataReader("IsAudioVisual") Is System.DBNull.Value Then
				_isAudioVisual = New SqlBoolean(False)
			Else
				_isAudioVisual = New SqlBoolean(CType(objSqlDataReader("IsAudioVisual"), Boolean))
			End If
			
			_isAudioVisualOld = _isAudioVisual
			
			If objSqlDataReader("ShowInBatching") Is System.DBNull.Value Then
				_showInBatching = New SqlBoolean(False)
			Else
				_showInBatching = New SqlBoolean(CType(objSqlDataReader("ShowInBatching"), Boolean))
			End If
			
			_showInBatchingOld = _showInBatching
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("BlaisePath") Is System.DBNull.Value Then
				_blaisePath = New SqlString("")
			Else
				_blaisePath = New SqlString(CType(objSqlDataReader("BlaisePath"), String))
			End If
			
			_blaisePathOld = _blaisePath
			
			If objSqlDataReader("IsSRDEE") Is System.DBNull.Value Then
				_isSRDEE = New SqlBoolean(False)
			Else
				_isSRDEE = New SqlBoolean(CType(objSqlDataReader("IsSRDEE"), Boolean))
			End If
			
			_isSRDEEOld = _isSRDEE
			
			If objSqlDataReader("IsSRDEELock") Is System.DBNull.Value Then
				_isSRDEELock = New SqlBoolean(False)
			Else
				_isSRDEELock = New SqlBoolean(CType(objSqlDataReader("IsSRDEELock"), Boolean))
			End If
			
			_isSRDEELockOld = _isSRDEELock
			
			If objSqlDataReader("IsSRDEELongitudinal") Is System.DBNull.Value Then
				_isSRDEELongitudinal = New SqlBoolean(False)
			Else
				_isSRDEELongitudinal = New SqlBoolean(CType(objSqlDataReader("IsSRDEELongitudinal"), Boolean))
			End If
			
			_isSRDEELongitudinalOld = _isSRDEELongitudinal
			
			If objSqlDataReader("SRDEEViewLongitudinal") Is System.DBNull.Value Then
				_sRDEEViewLongitudinal = New SqlString("")
			Else
				_sRDEEViewLongitudinal = New SqlString(CType(objSqlDataReader("SRDEEViewLongitudinal"), String))
			End If
			
			_sRDEEViewLongitudinalOld = _sRDEEViewLongitudinal
			
			If objSqlDataReader("SurveyID") Is System.DBNull.Value Then
				_surveyID = New SqlString("")
			Else
				_surveyID = New SqlString(CType(objSqlDataReader("SurveyID"), String))
			End If
			
			_surveyIDOld = _surveyID
			
			If objSqlDataReader("SMSToConfirmitRT") Is System.DBNull.Value Then
				_sMSToConfirmitRT = New SqlBoolean(False)
			Else
				_sMSToConfirmitRT = New SqlBoolean(CType(objSqlDataReader("SMSToConfirmitRT"), Boolean))
			End If
			
			_sMSToConfirmitRTOld = _sMSToConfirmitRT
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_description = New SqlString("")
			_descriptionOld = _description
			
			
			_isCATI = New SqlBoolean(False)
			_isCATIOld = _isCATI
			
			_isCAPI = New SqlBoolean(False)
			_isCAPIOld = _isCAPI
			
			_isCAWI = New SqlBoolean(False)
			_isCAWIOld = _isCAWI
			
			_isHardcopy = New SqlBoolean(False)
			_isHardcopyOld = _isHardcopy
			
			_isConsentForm = New SqlBoolean(False)
			_isConsentFormOld = _isConsentForm
			
			_isPrimaryFieldInstrument = New SqlBoolean(False)
			_isPrimaryFieldInstrumentOld = _isPrimaryFieldInstrument
			
			_dataEntryProgramID = New SqlString("")
			_dataEntryProgramIDOld = _dataEntryProgramID
			
			
			_dataEntryProgramName = New SqlString("")
			_dataEntryProgramNameOld = _dataEntryProgramName
			
			_isAudioVisual = New SqlBoolean(False)
			_isAudioVisualOld = _isAudioVisual
			
			_showInBatching = New SqlBoolean(False)
			_showInBatchingOld = _showInBatching
			
			
			_blaisePath = New SqlString("")
			_blaisePathOld = _blaisePath
			
			_isSRDEE = New SqlBoolean(False)
			_isSRDEEOld = _isSRDEE
			
			_isSRDEELock = New SqlBoolean(False)
			_isSRDEELockOld = _isSRDEELock
			
			_isSRDEELongitudinal = New SqlBoolean(False)
			_isSRDEELongitudinalOld = _isSRDEELongitudinal
			
			_sRDEEViewLongitudinal = New SqlString("")
			_sRDEEViewLongitudinalOld = _sRDEEViewLongitudinal
			
			_surveyID = New SqlString("")
			_surveyIDOld = _surveyID
			
			_sMSToConfirmitRT = New SqlBoolean(False)
			_sMSToConfirmitRTOld = _sMSToConfirmitRT
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_instrumentTypeID = _instrumentTypeIDOld
			
			_description = _descriptionOld
			
			_entityTypeID = _entityTypeIDOld
			
			_isCATI = _isCATIOld
			
			_isCAPI = _isCAPIOld
			
			_isCAWI = _isCAWIOld
			
			_isHardcopy = _isHardcopyOld
			
			_isConsentForm = _isConsentFormOld
			
			_isPrimaryFieldInstrument = _isPrimaryFieldInstrumentOld
			
			_dataEntryProgramID = _dataEntryProgramIDOld
			
			_maxBatchSize = _maxBatchSizeOld
			
			_dataEntryProgramName = _dataEntryProgramNameOld
			
			_isAudioVisual = _isAudioVisualOld
			
			_showInBatching = _showInBatchingOld
			
			_round = _roundOld
			
			_blaisePath = _blaisePathOld
			
			_isSRDEE = _isSRDEEOld
			
			_isSRDEELock = _isSRDEELockOld
			
			_isSRDEELongitudinal = _isSRDEELongitudinalOld
			
			_sRDEEViewLongitudinal = _sRDEEViewLongitudinalOld
			
			_surveyID = _surveyIDOld
			
			_sMSToConfirmitRT = _sMSToConfirmitRTOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>EntityTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>IsCATI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsCAPI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsCAWI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsHardcopy. May be SqlBoolean.Null</LI>
		'''		 <LI>IsConsentForm. May be SqlBoolean.Null</LI>
		'''		 <LI>IsPrimaryFieldInstrument. May be SqlBoolean.Null</LI>
		'''		 <LI>DataEntryProgramID. May be SqlString.Null</LI>
		'''		 <LI>MaxBatchSize. May be SqlInt32.Null</LI>
		'''		 <LI>DataEntryProgramName. May be SqlString.Null</LI>
		'''		 <LI>IsAudioVisual. May be SqlBoolean.Null</LI>
		'''		 <LI>ShowInBatching. May be SqlBoolean.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>BlaisePath. May be SqlString.Null</LI>
		'''		 <LI>IsSRDEE. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSRDEELock. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSRDEELongitudinal. May be SqlBoolean.Null</LI>
		'''		 <LI>SRDEEViewLongitudinal. May be SqlString.Null</LI>
		'''		 <LI>SurveyID. May be SqlString.Null</LI>
		'''		 <LI>SMSToConfirmitRT. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInstrumentType_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _entityTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCATI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAPI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCAPI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAWI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCAWI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHardcopy", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isHardcopy))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsConsentForm", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isConsentForm))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsPrimaryFieldInstrument", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isPrimaryFieldInstrument))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataEntryProgramID", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataEntryProgramID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaxBatchSize", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _maxBatchSize))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataEntryProgramName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataEntryProgramName))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsAudioVisual", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isAudioVisual))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowInBatching", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showInBatching))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaisePath", SqlDbType.NVarChar, 250, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _blaisePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEE", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEE))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEELock", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEELock))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEELongitudinal", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEELongitudinal))
				cmdToExecute.Parameters.Add(New SqlParameter("@SRDEEViewLongitudinal", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sRDEEViewLongitudinal))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyID", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SMSToConfirmitRT", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sMSToConfirmitRT))
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_instrumentTypeID = CType(cmdToExecute.Parameters.Item("@InstrumentTypeID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInstrumentType_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInstrumentType::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>EntityTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>IsCATI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsCAPI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsCAWI. May be SqlBoolean.Null</LI>
		'''		 <LI>IsHardcopy. May be SqlBoolean.Null</LI>
		'''		 <LI>IsConsentForm. May be SqlBoolean.Null</LI>
		'''		 <LI>IsPrimaryFieldInstrument. May be SqlBoolean.Null</LI>
		'''		 <LI>DataEntryProgramID. May be SqlString.Null</LI>
		'''		 <LI>MaxBatchSize. May be SqlInt32.Null</LI>
		'''		 <LI>DataEntryProgramName. May be SqlString.Null</LI>
		'''		 <LI>IsAudioVisual. May be SqlBoolean.Null</LI>
		'''		 <LI>ShowInBatching. May be SqlBoolean.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>BlaisePath. May be SqlString.Null</LI>
		'''		 <LI>IsSRDEE. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSRDEELock. May be SqlBoolean.Null</LI>
		'''		 <LI>IsSRDEELongitudinal. May be SqlBoolean.Null</LI>
		'''		 <LI>SRDEEViewLongitudinal. May be SqlString.Null</LI>
		'''		 <LI>SurveyID. May be SqlString.Null</LI>
		'''		 <LI>SMSToConfirmitRT. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInstrumentType_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@EntityTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _entityTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCATI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAPI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCAPI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCAWI", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCAWI))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHardcopy", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isHardcopy))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsConsentForm", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isConsentForm))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsPrimaryFieldInstrument", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isPrimaryFieldInstrument))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataEntryProgramID", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataEntryProgramID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaxBatchSize", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _maxBatchSize))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataEntryProgramName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dataEntryProgramName))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsAudioVisual", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isAudioVisual))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowInBatching", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showInBatching))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaisePath", SqlDbType.NVarChar, 250, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _blaisePath))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEE", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEE))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEELock", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEELock))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsSRDEELongitudinal", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isSRDEELongitudinal))
				cmdToExecute.Parameters.Add(New SqlParameter("@SRDEEViewLongitudinal", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sRDEEViewLongitudinal))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyID", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SMSToConfirmitRT", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sMSToConfirmitRT))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInstrumentType_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInstrumentType::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInstrumentType_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInstrumentType_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInstrumentType::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>Description</LI>
		'''		 <LI>EntityTypeID</LI>
		'''		 <LI>IsCATI</LI>
		'''		 <LI>IsCAPI</LI>
		'''		 <LI>IsCAWI</LI>
		'''		 <LI>IsHardcopy</LI>
		'''		 <LI>IsConsentForm</LI>
		'''		 <LI>IsPrimaryFieldInstrument</LI>
		'''		 <LI>DataEntryProgramID</LI>
		'''		 <LI>MaxBatchSize</LI>
		'''		 <LI>DataEntryProgramName</LI>
		'''		 <LI>IsAudioVisual</LI>
		'''		 <LI>ShowInBatching</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>BlaisePath</LI>
		'''		 <LI>IsSRDEE</LI>
		'''		 <LI>IsSRDEELock</LI>
		'''		 <LI>IsSRDEELongitudinal</LI>
		'''		 <LI>SRDEEViewLongitudinal</LI>
		'''		 <LI>SurveyID</LI>
		'''		 <LI>SMSToConfirmitRT</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInstrumentType_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInstrumentType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInstrumentType_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInstrumentType::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInstrumentType_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInstrumentType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInstrumentType_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInstrumentType::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentTypeID]() As SqlInt32
			Get
				Return _instrumentTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentTypeID.Equals(Value) Then
					If _instrumentTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentTypeID.Equals(_instrumentTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim instrumentTypeIDTmp As SqlInt32 = Value
				If instrumentTypeIDTmp.IsNull Then
					Throw New NullValueException("InstrumentTypeID", "InstrumentTypeID can't be NULL")
				End If
				_instrumentTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Description]() As SqlString
			Get
				Return _description
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _description.IsNull Then
					CurrentValue = _description.Value
				End If
				If Not _descriptionOld.IsNull Then
					OldValue = _descriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_description = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EntityTypeID]() As SqlInt32
			Get
				Return _entityTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _entityTypeID.Equals(Value) Then
					If _entityTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _entityTypeID.Equals(_entityTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_entityTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCATI]() As SqlBoolean
			Get
				Return _isCATI
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCATI.Equals(Value) Then
					If _isCATIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCATI.Equals(_isCATIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCATI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCAPI]() As SqlBoolean
			Get
				Return _isCAPI
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCAPI.Equals(Value) Then
					If _isCAPIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCAPI.Equals(_isCAPIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCAPI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCAWI]() As SqlBoolean
			Get
				Return _isCAWI
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCAWI.Equals(Value) Then
					If _isCAWIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCAWI.Equals(_isCAWIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCAWI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsHardcopy]() As SqlBoolean
			Get
				Return _isHardcopy
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isHardcopy.Equals(Value) Then
					If _isHardcopyOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isHardcopy.Equals(_isHardcopyOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isHardcopy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsConsentForm]() As SqlBoolean
			Get
				Return _isConsentForm
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isConsentForm.Equals(Value) Then
					If _isConsentFormOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isConsentForm.Equals(_isConsentFormOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isConsentForm = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsPrimaryFieldInstrument]() As SqlBoolean
			Get
				Return _isPrimaryFieldInstrument
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isPrimaryFieldInstrument.Equals(Value) Then
					If _isPrimaryFieldInstrumentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isPrimaryFieldInstrument.Equals(_isPrimaryFieldInstrumentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isPrimaryFieldInstrument = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DataEntryProgramID]() As SqlString
			Get
				Return _dataEntryProgramID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _dataEntryProgramID.IsNull Then
					CurrentValue = _dataEntryProgramID.Value
				End If
				If Not _dataEntryProgramIDOld.IsNull Then
					OldValue = _dataEntryProgramIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_dataEntryProgramID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MaxBatchSize]() As SqlInt32
			Get
				Return _maxBatchSize
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _maxBatchSize.Equals(Value) Then
					If _maxBatchSizeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _maxBatchSize.Equals(_maxBatchSizeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_maxBatchSize = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DataEntryProgramName]() As SqlString
			Get
				Return _dataEntryProgramName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _dataEntryProgramName.IsNull Then
					CurrentValue = _dataEntryProgramName.Value
				End If
				If Not _dataEntryProgramNameOld.IsNull Then
					OldValue = _dataEntryProgramNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_dataEntryProgramName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsAudioVisual]() As SqlBoolean
			Get
				Return _isAudioVisual
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isAudioVisual.Equals(Value) Then
					If _isAudioVisualOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isAudioVisual.Equals(_isAudioVisualOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isAudioVisual = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowInBatching]() As SqlBoolean
			Get
				Return _showInBatching
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showInBatching.Equals(Value) Then
					If _showInBatchingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showInBatching.Equals(_showInBatchingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showInBatching = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BlaisePath]() As SqlString
			Get
				Return _blaisePath
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _blaisePath.IsNull Then
					CurrentValue = _blaisePath.Value
				End If
				If Not _blaisePathOld.IsNull Then
					OldValue = _blaisePathOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_blaisePath = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsSRDEE]() As SqlBoolean
			Get
				Return _isSRDEE
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSRDEE.Equals(Value) Then
					If _isSRDEEOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSRDEE.Equals(_isSRDEEOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSRDEE = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsSRDEELock]() As SqlBoolean
			Get
				Return _isSRDEELock
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSRDEELock.Equals(Value) Then
					If _isSRDEELockOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSRDEELock.Equals(_isSRDEELockOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSRDEELock = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsSRDEELongitudinal]() As SqlBoolean
			Get
				Return _isSRDEELongitudinal
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isSRDEELongitudinal.Equals(Value) Then
					If _isSRDEELongitudinalOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isSRDEELongitudinal.Equals(_isSRDEELongitudinalOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isSRDEELongitudinal = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SRDEEViewLongitudinal]() As SqlString
			Get
				Return _sRDEEViewLongitudinal
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sRDEEViewLongitudinal.IsNull Then
					CurrentValue = _sRDEEViewLongitudinal.Value
				End If
				If Not _sRDEEViewLongitudinalOld.IsNull Then
					OldValue = _sRDEEViewLongitudinalOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sRDEEViewLongitudinal = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SurveyID]() As SqlString
			Get
				Return _surveyID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _surveyID.IsNull Then
					CurrentValue = _surveyID.Value
				End If
				If Not _surveyIDOld.IsNull Then
					OldValue = _surveyIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_surveyID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SMSToConfirmitRT]() As SqlBoolean
			Get
				Return _sMSToConfirmitRT
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _sMSToConfirmitRT.Equals(Value) Then
					If _sMSToConfirmitRTOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sMSToConfirmitRT.Equals(_sMSToConfirmitRTOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sMSToConfirmitRT = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
