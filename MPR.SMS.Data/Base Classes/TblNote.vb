' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:33 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblNote.
	''' </summary>

	Public Class TblNote
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isFieldNote As SqlBoolean
		Private _isFieldNoteOld As SqlBoolean

		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _sourceTypeID As SqlInt32
		Private _sourceTypeIDOld As SqlInt32
		Private _noteID As SqlInt32
		Private _noteIDOld As SqlInt32
		Private _documentID As SqlInt32
		Private _documentIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _tableID As SqlInt32
		Private _tableIDOld As SqlInt32

		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

		Private _tableTypeID As SqlInt16
		Private _tableTypeIDOld As SqlInt16

#End Region

		''' <overloads>
		''' The TblNote constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblNote class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblNote class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblNote class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_noteID = New SqlInt32(CType(objDataRow("NoteID"), Integer))
			
			_noteIDOld = _noteID
			
			_tableID = New SqlInt32(CType(objDataRow("TableID"), Integer))
			
			_tableIDOld = _tableID
			
			_tableTypeID = New SqlInt16(CType(objDataRow("TableTypeID"), Short))
			
			_tableTypeIDOld = _tableTypeID
			
			If objDataRow("DocumentID") Is System.DBNull.Value Then
				_documentID = SqlInt32.Null
			Else
				_documentID = New SqlInt32(CType(objDataRow("DocumentID"), Integer))
			End If
			
			_documentIDOld = _documentID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objDataRow("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objDataRow("IsFieldNote") Is System.DBNull.Value Then
				_isFieldNote = New SqlBoolean(False)
			Else
				_isFieldNote = New SqlBoolean(CType(objDataRow("IsFieldNote"), Boolean))
			End If
			
			_isFieldNoteOld = _isFieldNote
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_noteID = New SqlInt32(CType(objSqlDataReader("NoteID"), Integer))
			
			_noteIDOld = _noteID
			
			_tableID = New SqlInt32(CType(objSqlDataReader("TableID"), Integer))
			
			_tableIDOld = _tableID
			
			_tableTypeID = New SqlInt16(CType(objSqlDataReader("TableTypeID"), Short))
			
			_tableTypeIDOld = _tableTypeID
			
			If objSqlDataReader("DocumentID") Is System.DBNull.Value Then
				_documentID = SqlInt32.Null
			Else
				_documentID = New SqlInt32(CType(objSqlDataReader("DocumentID"), Integer))
			End If
			
			_documentIDOld = _documentID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objSqlDataReader("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objSqlDataReader("IsFieldNote") Is System.DBNull.Value Then
				_isFieldNote = New SqlBoolean(False)
			Else
				_isFieldNote = New SqlBoolean(CType(objSqlDataReader("IsFieldNote"), Boolean))
			End If
			
			_isFieldNoteOld = _isFieldNote
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			_isFieldNote = New SqlBoolean(False)
			_isFieldNoteOld = _isFieldNote
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_noteID = _noteIDOld
			
			_tableID = _tableIDOld
			
			_tableTypeID = _tableTypeIDOld
			
			_documentID = _documentIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_round = _roundOld
			
			_sourceTypeID = _sourceTypeIDOld
			
			_notes = _notesOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			_isFieldNote = _isFieldNoteOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>TableID</LI>
		'''		 <LI>TableTypeID</LI>
		'''		 <LI>DocumentID. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>IsFieldNote. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@TableID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _tableID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TableTypeID", SqlDbType.SmallInt, 2, ParameterDirection.Input, False, 5, 0, "", DataRowVersion.Proposed, _tableTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.NVarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.NVarChar, 4000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.NVarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.NVarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldNote", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isFieldNote))
				cmdToExecute.Parameters.Add(new SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_noteID = CType(cmdToExecute.Parameters.Item("@NoteID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		'''		 <LI>TableID</LI>
		'''		 <LI>TableTypeID</LI>
		'''		 <LI>DocumentID. May be SqlInt32.Null</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>IsFieldNote. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TableID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _tableID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TableTypeID", SqlDbType.SmallInt, 2, ParameterDirection.Input, False, 5, 0, "", DataRowVersion.Proposed, _tableTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DocumentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _documentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.NVarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.NVarChar, 4000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.NVarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.NVarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldNote", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isFieldNote))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'TableTypeID.
		''' It will reset the field 'TableTypeID' in
		''' all rows which have as value for this field the value as set in property 'TableTypeIDOld' to 
		''' the value as set in property 'TableTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>TableTypeID</LI>
		'''		 <LI>TableTypeIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWTableTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_UpdateAllWTableTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@TableTypeID", SqlDbType.SmallInt, 2, ParameterDirection.Input, false, 5, 0, "", DataRowVersion.Proposed, _tableTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@TableTypeIDOld", SqlDbType.SmallInt, 2, ParameterDirection.Input, False, 5, 0, "", DataRowVersion.Proposed, _tableTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 2, ParameterDirection.Output, True, 5, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_UpdateAllWTableTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::UpdateAllWTableTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SourceTypeID.
		''' It will reset the field 'SourceTypeID' in
		''' all rows which have as value for this field the value as set in property 'SourceTypeIDOld' to 
		''' the value as set in property 'SourceTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSourceTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_UpdateAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_UpdateAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::UpdateAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>NoteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>NoteID</LI>
		'''		 <LI>TableID</LI>
		'''		 <LI>TableTypeID</LI>
		'''		 <LI>DocumentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>SourceTypeID</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>IsFieldNote</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblNote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@NoteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _noteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblNote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'TableTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>TableTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWTableTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_SelectAllWTableTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblNote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@TableTypeID", SqlDbType.SmallInt, 2, ParameterDirection.Input, False, 5, 0, "", DataRowVersion.Proposed, _tableTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 5, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_SelectAllWTableTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::SelectAllWTableTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblNote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SourceTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSourceTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblNote_SelectAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblNote")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblNote_SelectAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblNote::SelectAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NoteID]() As SqlInt32
			Get
				Return _noteID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _noteID.Equals(Value) Then
					If _noteIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _noteID.Equals(_noteIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim noteIDTmp As SqlInt32 = Value
				If noteIDTmp.IsNull Then
					Throw New NullValueException("NoteID", "NoteID can't be NULL")
				End If
				_noteID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TableID]() As SqlInt32
			Get
				Return _tableID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _tableID.Equals(Value) Then
					If _tableIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _tableID.Equals(_tableIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim tableIDTmp As SqlInt32 = Value
				If tableIDTmp.IsNull Then
					Throw New NullValueException("TableID", "TableID can't be NULL")
				End If
				_tableID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TableTypeID]() As SqlInt16
			Get
				Return _tableTypeID
			End Get
			Set(ByVal Value As SqlInt16)
				If Not _tableTypeID.Equals(Value) Then
					If _tableTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _tableTypeID.Equals(_tableTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim tableTypeIDTmp As SqlInt16 = Value
				If tableTypeIDTmp.IsNull Then
					Throw New NullValueException("TableTypeID", "TableTypeID can't be NULL")
				End If
				_tableTypeID = Value
			End Set
		End Property
		Protected Property [TableTypeIDOld]() As SqlInt16
			Get
				Return _tableTypeIDOld
			End Get
			Set(ByVal Value As SqlInt16)
				Dim tableTypeIDOldTmp As SqlInt16 = Value
				If tableTypeIDOldTmp.IsNull Then
					Throw New NullValueException("TableTypeIDOld", "TableTypeIDOld can't be NULL")
				End If
				_tableTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [DocumentID]() As SqlInt32
			Get
				Return _documentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _documentID.Equals(Value) Then
					If _documentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _documentID.Equals(_documentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_documentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SourceTypeID]() As SqlInt32
			Get
				Return _sourceTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceTypeID.Equals(Value) Then
					If _sourceTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceTypeID.Equals(_sourceTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceTypeID = Value
			End Set
		End Property
		Protected Property [SourceTypeIDOld]() As SqlInt32
			Get
				Return _sourceTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_sourceTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsFieldNote]() As SqlBoolean
			Get
				Return _isFieldNote
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isFieldNote.Equals(Value) Then
					If _isFieldNoteOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isFieldNote.Equals(_isFieldNoteOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isFieldNote = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
