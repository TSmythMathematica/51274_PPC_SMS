' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:34 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblPhone.
	''' </summary>

	Public Class TblPhone
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isInternational As SqlBoolean
		Private _isInternationalOld As SqlBoolean
		Private _isCleaned As SqlBoolean
		Private _isCleanedOld As SqlBoolean
		Private _oKToText As SqlBoolean
		Private _oKToTextOld As SqlBoolean

		Private _lastAttemptedOn As SqlDateTime
		Private _lastAttemptedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _tCPALastModifiedOn As SqlDateTime
		Private _tCPALastModifiedOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _phoneID As SqlInt32
		Private _phoneIDOld As SqlInt32
		Private _sourceQualityID As SqlInt32
		Private _sourceQualityIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _fieldLocatingStatusID As SqlInt32
		Private _fieldLocatingStatusIDOld As SqlInt32
		Private _phoneTypeID As SqlInt32
		Private _phoneTypeIDOld As SqlInt32
		Private _phoneTimeID As SqlInt32
		Private _phoneTimeIDOld As SqlInt32
		Private _sourceTypeID As SqlInt32
		Private _sourceTypeIDOld As SqlInt32
		Private _blaisePhoneStatus As SqlInt32
		Private _blaisePhoneStatusOld As SqlInt32

		Private _bIN As SqlByte
		Private _bINOld As SqlByte
		Private _bPN As SqlByte
		Private _bPNOld As SqlByte

		Private _dSTI As SqlString
		Private _dSTIOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _tCPAPhoneType As SqlString
		Private _tCPAPhoneTypeOld As SqlString
		Private _timeZoneCode As SqlString
		Private _timeZoneCodeOld As SqlString
		Private _extension As SqlString
		Private _extensionOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _phoneNum As SqlString
		Private _phoneNumOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _listedTo As SqlString
		Private _listedToOld As SqlString

#End Region

		''' <overloads>
		''' The TblPhone constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblPhone class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblPhone class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblPhone class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_phoneID = New SqlInt32(CType(objDataRow("PhoneID"), Integer))
			
			_phoneIDOld = _phoneID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("PhoneNum") Is System.DBNull.Value Then
				_phoneNum = New SqlString("")
			Else
				_phoneNum = New SqlString(CType(objDataRow("PhoneNum"), String))
			End If
			
			_phoneNumOld = _phoneNum
			
			If objDataRow("Extension") Is System.DBNull.Value Then
				_extension = New SqlString("")
			Else
				_extension = New SqlString(CType(objDataRow("Extension"), String))
			End If
			
			_extensionOld = _extension
			
			If objDataRow("IsInternational") Is System.DBNull.Value Then
				_isInternational = New SqlBoolean(False)
			Else
				_isInternational = New SqlBoolean(CType(objDataRow("IsInternational"), Boolean))
			End If
			
			_isInternationalOld = _isInternational
			
			If objDataRow("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objDataRow("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objDataRow("DSTI") Is System.DBNull.Value Then
				_dSTI = New SqlString("")
			Else
				_dSTI = New SqlString(CType(objDataRow("DSTI"), String))
			End If
			
			_dSTIOld = _dSTI
			
			If objDataRow("PhoneTypeID") Is System.DBNull.Value Then
				_phoneTypeID = SqlInt32.Null
			Else
				_phoneTypeID = New SqlInt32(CType(objDataRow("PhoneTypeID"), Integer))
			End If
			
			_phoneTypeIDOld = _phoneTypeID
			
			If objDataRow("PhoneTimeID") Is System.DBNull.Value Then
				_phoneTimeID = SqlInt32.Null
			Else
				_phoneTimeID = New SqlInt32(CType(objDataRow("PhoneTimeID"), Integer))
			End If
			
			_phoneTimeIDOld = _phoneTimeID
			
			If objDataRow("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objDataRow("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objDataRow("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objDataRow("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objDataRow("LastAttemptedOn") Is System.DBNull.Value Then
				_lastAttemptedOn = SqlDateTime.Null
			Else
				_lastAttemptedOn = New SqlDateTime(CType(objDataRow("LastAttemptedOn"), Date))
			End If
			
			_lastAttemptedOnOld = _lastAttemptedOn
			
			If objDataRow("ListedTo") Is System.DBNull.Value Then
				_listedTo = New SqlString("")
			Else
				_listedTo = New SqlString(CType(objDataRow("ListedTo"), String))
			End If
			
			_listedToOld = _listedTo
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objDataRow("IsCleaned") Is System.DBNull.Value Then
				_isCleaned = New SqlBoolean(False)
			Else
				_isCleaned = New SqlBoolean(CType(objDataRow("IsCleaned"), Boolean))
			End If
			
			_isCleanedOld = _isCleaned
			
			If objDataRow("BlaisePhoneStatus") Is System.DBNull.Value Then
				_blaisePhoneStatus = SqlInt32.Null
			Else
				_blaisePhoneStatus = New SqlInt32(CType(objDataRow("BlaisePhoneStatus"), Integer))
			End If
			
			_blaisePhoneStatusOld = _blaisePhoneStatus
			
			If objDataRow("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objDataRow("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objDataRow("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objDataRow("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objDataRow("FieldLocatingStatusID") Is System.DBNull.Value Then
				_fieldLocatingStatusID = SqlInt32.Null
			Else
				_fieldLocatingStatusID = New SqlInt32(CType(objDataRow("FieldLocatingStatusID"), Integer))
			End If
			
			_fieldLocatingStatusIDOld = _fieldLocatingStatusID
			
			If objDataRow("TCPAPhoneType") Is System.DBNull.Value Then
				_tCPAPhoneType = New SqlString("")
			Else
				_tCPAPhoneType = New SqlString(CType(objDataRow("TCPAPhoneType"), String))
			End If
			
			_tCPAPhoneTypeOld = _tCPAPhoneType
			
			If objDataRow("TCPALastModifiedOn") Is System.DBNull.Value Then
				_tCPALastModifiedOn = SqlDateTime.Null
			Else
				_tCPALastModifiedOn = New SqlDateTime(CType(objDataRow("TCPALastModifiedOn"), Date))
			End If
			
			_tCPALastModifiedOnOld = _tCPALastModifiedOn
			
			If objDataRow("OKToText") Is System.DBNull.Value Then
				_oKToText = New SqlBoolean(False)
			Else
				_oKToText = New SqlBoolean(CType(objDataRow("OKToText"), Boolean))
			End If
			
			_oKToTextOld = _oKToText
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_phoneID = New SqlInt32(CType(objSqlDataReader("PhoneID"), Integer))
			
			_phoneIDOld = _phoneID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("PhoneNum") Is System.DBNull.Value Then
				_phoneNum = New SqlString("")
			Else
				_phoneNum = New SqlString(CType(objSqlDataReader("PhoneNum"), String))
			End If
			
			_phoneNumOld = _phoneNum
			
			If objSqlDataReader("Extension") Is System.DBNull.Value Then
				_extension = New SqlString("")
			Else
				_extension = New SqlString(CType(objSqlDataReader("Extension"), String))
			End If
			
			_extensionOld = _extension
			
			If objSqlDataReader("IsInternational") Is System.DBNull.Value Then
				_isInternational = New SqlBoolean(False)
			Else
				_isInternational = New SqlBoolean(CType(objSqlDataReader("IsInternational"), Boolean))
			End If
			
			_isInternationalOld = _isInternational
			
			If objSqlDataReader("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objSqlDataReader("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objSqlDataReader("DSTI") Is System.DBNull.Value Then
				_dSTI = New SqlString("")
			Else
				_dSTI = New SqlString(CType(objSqlDataReader("DSTI"), String))
			End If
			
			_dSTIOld = _dSTI
			
			If objSqlDataReader("PhoneTypeID") Is System.DBNull.Value Then
				_phoneTypeID = SqlInt32.Null
			Else
				_phoneTypeID = New SqlInt32(CType(objSqlDataReader("PhoneTypeID"), Integer))
			End If
			
			_phoneTypeIDOld = _phoneTypeID
			
			If objSqlDataReader("PhoneTimeID") Is System.DBNull.Value Then
				_phoneTimeID = SqlInt32.Null
			Else
				_phoneTimeID = New SqlInt32(CType(objSqlDataReader("PhoneTimeID"), Integer))
			End If
			
			_phoneTimeIDOld = _phoneTimeID
			
			If objSqlDataReader("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objSqlDataReader("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objSqlDataReader("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objSqlDataReader("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objSqlDataReader("LastAttemptedOn") Is System.DBNull.Value Then
				_lastAttemptedOn = SqlDateTime.Null
			Else
				_lastAttemptedOn = New SqlDateTime(CType(objSqlDataReader("LastAttemptedOn"), Date))
			End If
			
			_lastAttemptedOnOld = _lastAttemptedOn
			
			If objSqlDataReader("ListedTo") Is System.DBNull.Value Then
				_listedTo = New SqlString("")
			Else
				_listedTo = New SqlString(CType(objSqlDataReader("ListedTo"), String))
			End If
			
			_listedToOld = _listedTo
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objSqlDataReader("IsCleaned") Is System.DBNull.Value Then
				_isCleaned = New SqlBoolean(False)
			Else
				_isCleaned = New SqlBoolean(CType(objSqlDataReader("IsCleaned"), Boolean))
			End If
			
			_isCleanedOld = _isCleaned
			
			If objSqlDataReader("BlaisePhoneStatus") Is System.DBNull.Value Then
				_blaisePhoneStatus = SqlInt32.Null
			Else
				_blaisePhoneStatus = New SqlInt32(CType(objSqlDataReader("BlaisePhoneStatus"), Integer))
			End If
			
			_blaisePhoneStatusOld = _blaisePhoneStatus
			
			If objSqlDataReader("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objSqlDataReader("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objSqlDataReader("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objSqlDataReader("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objSqlDataReader("FieldLocatingStatusID") Is System.DBNull.Value Then
				_fieldLocatingStatusID = SqlInt32.Null
			Else
				_fieldLocatingStatusID = New SqlInt32(CType(objSqlDataReader("FieldLocatingStatusID"), Integer))
			End If
			
			_fieldLocatingStatusIDOld = _fieldLocatingStatusID
			
			If objSqlDataReader("TCPAPhoneType") Is System.DBNull.Value Then
				_tCPAPhoneType = New SqlString("")
			Else
				_tCPAPhoneType = New SqlString(CType(objSqlDataReader("TCPAPhoneType"), String))
			End If
			
			_tCPAPhoneTypeOld = _tCPAPhoneType
			
			If objSqlDataReader("TCPALastModifiedOn") Is System.DBNull.Value Then
				_tCPALastModifiedOn = SqlDateTime.Null
			Else
				_tCPALastModifiedOn = New SqlDateTime(CType(objSqlDataReader("TCPALastModifiedOn"), Date))
			End If
			
			_tCPALastModifiedOnOld = _tCPALastModifiedOn
			
			If objSqlDataReader("OKToText") Is System.DBNull.Value Then
				_oKToText = New SqlBoolean(False)
			Else
				_oKToText = New SqlBoolean(CType(objSqlDataReader("OKToText"), Boolean))
			End If
			
			_oKToTextOld = _oKToText
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			_phoneNum = New SqlString("")
			_phoneNumOld = _phoneNum
			
			_extension = New SqlString("")
			_extensionOld = _extension
			
			_isInternational = New SqlBoolean(False)
			_isInternationalOld = _isInternational
			
			_timeZoneCode = New SqlString("")
			_timeZoneCodeOld = _timeZoneCode
			
			_dSTI = New SqlString("")
			_dSTIOld = _dSTI
			
			
			
			
			
			
			_listedTo = New SqlString("")
			_listedToOld = _listedTo
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			_isCleaned = New SqlBoolean(False)
			_isCleanedOld = _isCleaned
			
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			
			_tCPAPhoneType = New SqlString("")
			_tCPAPhoneTypeOld = _tCPAPhoneType
			
			
			_oKToText = New SqlBoolean(False)
			_oKToTextOld = _oKToText
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_phoneID = _phoneIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_round = _roundOld
			
			_phoneNum = _phoneNumOld
			
			_extension = _extensionOld
			
			_isInternational = _isInternationalOld
			
			_timeZoneCode = _timeZoneCodeOld
			
			_dSTI = _dSTIOld
			
			_phoneTypeID = _phoneTypeIDOld
			
			_phoneTimeID = _phoneTimeIDOld
			
			_sourceTypeID = _sourceTypeIDOld
			
			_sourceQualityID = _sourceQualityIDOld
			
			_lastAttemptedOn = _lastAttemptedOnOld
			
			_listedTo = _listedToOld
			
			_notes = _notesOld
			
			_isCleaned = _isCleanedOld
			
			_blaisePhoneStatus = _blaisePhoneStatusOld
			
			_bPN = _bPNOld
			
			_bIN = _bINOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			_fieldLocatingStatusID = _fieldLocatingStatusIDOld
			
			_tCPAPhoneType = _tCPAPhoneTypeOld
			
			_tCPALastModifiedOn = _tCPALastModifiedOnOld
			
			_oKToText = _oKToTextOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneNum. May be SqlString.Null</LI>
		'''		 <LI>Extension. May be SqlString.Null</LI>
		'''		 <LI>IsInternational. May be SqlBoolean.Null</LI>
		'''		 <LI>TimeZoneCode. May be SqlString.Null</LI>
		'''		 <LI>DSTI. May be SqlString.Null</LI>
		'''		 <LI>PhoneTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneTimeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>LastAttemptedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>ListedTo. May be SqlString.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>IsCleaned. May be SqlBoolean.Null</LI>
		'''		 <LI>BlaisePhoneStatus. May be SqlInt32.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>FieldLocatingStatusID. May be SqlInt32.Null</LI>
		'''		 <LI>TCPAPhoneType. May be SqlString.Null</LI>
		'''		 <LI>TCPALastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>OKToText. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>PhoneID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneNum", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phoneNum))
				cmdToExecute.Parameters.Add(New SqlParameter("@Extension", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _extension))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsInternational", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isInternational))
				cmdToExecute.Parameters.Add(New SqlParameter("@TimeZoneCode", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _timeZoneCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@DSTI", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dSTI))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneTimeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTimeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastAttemptedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastAttemptedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@ListedTo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _listedTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCleaned", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCleaned))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaisePhoneStatus", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _blaisePhoneStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldLocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _fieldLocatingStatusID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TCPAPhoneType", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _tCPAPhoneType))
				cmdToExecute.Parameters.Add(New SqlParameter("@TCPALastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _tCPALastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@OKToText", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _oKToText))
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_phoneID = CType(cmdToExecute.Parameters.Item("@PhoneID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>PhoneID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneNum. May be SqlString.Null</LI>
		'''		 <LI>Extension. May be SqlString.Null</LI>
		'''		 <LI>IsInternational. May be SqlBoolean.Null</LI>
		'''		 <LI>TimeZoneCode. May be SqlString.Null</LI>
		'''		 <LI>DSTI. May be SqlString.Null</LI>
		'''		 <LI>PhoneTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneTimeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>LastAttemptedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>ListedTo. May be SqlString.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>IsCleaned. May be SqlBoolean.Null</LI>
		'''		 <LI>BlaisePhoneStatus. May be SqlInt32.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>FieldLocatingStatusID. May be SqlInt32.Null</LI>
		'''		 <LI>TCPAPhoneType. May be SqlString.Null</LI>
		'''		 <LI>TCPALastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>OKToText. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneNum", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phoneNum))
				cmdToExecute.Parameters.Add(New SqlParameter("@Extension", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _extension))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsInternational", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isInternational))
				cmdToExecute.Parameters.Add(New SqlParameter("@TimeZoneCode", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _timeZoneCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@DSTI", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dSTI))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneTimeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTimeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastAttemptedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastAttemptedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@ListedTo", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _listedTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsCleaned", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isCleaned))
				cmdToExecute.Parameters.Add(New SqlParameter("@BlaisePhoneStatus", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _blaisePhoneStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldLocatingStatusID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _fieldLocatingStatusID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TCPAPhoneType", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _tCPAPhoneType))
				cmdToExecute.Parameters.Add(New SqlParameter("@TCPALastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _tCPALastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@OKToText", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _oKToText))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'PhoneTypeID.
		''' It will reset the field 'PhoneTypeID' in
		''' all rows which have as value for this field the value as set in property 'PhoneTypeIDOld' to 
		''' the value as set in property 'PhoneTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>PhoneTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWPhoneTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_UpdateAllWPhoneTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _phoneTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_UpdateAllWPhoneTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::UpdateAllWPhoneTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'PhoneTimeID.
		''' It will reset the field 'PhoneTimeID' in
		''' all rows which have as value for this field the value as set in property 'PhoneTimeIDOld' to 
		''' the value as set in property 'PhoneTimeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>PhoneTimeID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneTimeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWPhoneTimeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_UpdateAllWPhoneTimeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTimeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _phoneTimeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTimeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTimeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_UpdateAllWPhoneTimeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::UpdateAllWPhoneTimeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SourceTypeID.
		''' It will reset the field 'SourceTypeID' in
		''' all rows which have as value for this field the value as set in property 'SourceTypeIDOld' to 
		''' the value as set in property 'SourceTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSourceTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_UpdateAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_UpdateAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::UpdateAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SourceQualityID.
		''' It will reset the field 'SourceQualityID' in
		''' all rows which have as value for this field the value as set in property 'SourceQualityIDOld' to 
		''' the value as set in property 'SourceQualityID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSourceQualityIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_UpdateAllWSourceQualityIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_UpdateAllWSourceQualityIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::UpdateAllWSourceQualityIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>PhoneID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>PhoneID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>PhoneID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>PhoneNum</LI>
		'''		 <LI>Extension</LI>
		'''		 <LI>IsInternational</LI>
		'''		 <LI>TimeZoneCode</LI>
		'''		 <LI>DSTI</LI>
		'''		 <LI>PhoneTypeID</LI>
		'''		 <LI>PhoneTimeID</LI>
		'''		 <LI>SourceTypeID</LI>
		'''		 <LI>SourceQualityID</LI>
		'''		 <LI>LastAttemptedOn</LI>
		'''		 <LI>ListedTo</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>IsCleaned</LI>
		'''		 <LI>BlaisePhoneStatus</LI>
		'''		 <LI>BPN</LI>
		'''		 <LI>BIN</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>FieldLocatingStatusID</LI>
		'''		 <LI>TCPAPhoneType</LI>
		'''		 <LI>TCPALastModifiedOn</LI>
		'''		 <LI>OKToText</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'PhoneTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>PhoneTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWPhoneTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAllWPhoneTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAllWPhoneTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAllWPhoneTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'PhoneTimeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>PhoneTimeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWPhoneTimeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAllWPhoneTimeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@PhoneTimeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneTimeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAllWPhoneTimeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAllWPhoneTimeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SourceTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSourceTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SourceQualityID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSourceQualityIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPhone_SelectAllWSourceQualityIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPhone")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPhone_SelectAllWSourceQualityIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPhone::SelectAllWSourceQualityIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneID]() As SqlInt32
			Get
				Return _phoneID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneID.Equals(Value) Then
					If _phoneIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneID.Equals(_phoneIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim phoneIDTmp As SqlInt32 = Value
				If phoneIDTmp.IsNull Then
					Throw New NullValueException("PhoneID", "PhoneID can't be NULL")
				End If
				_phoneID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneNum]() As SqlString
			Get
				Return _phoneNum
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _phoneNum.IsNull Then
					CurrentValue = _phoneNum.Value
				End If
				If Not _phoneNumOld.IsNull Then
					OldValue = _phoneNumOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_phoneNum = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Extension]() As SqlString
			Get
				Return _extension
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _extension.IsNull Then
					CurrentValue = _extension.Value
				End If
				If Not _extensionOld.IsNull Then
					OldValue = _extensionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_extension = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [IsInternational]() As SqlBoolean
			Get
				Return _isInternational
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isInternational.Equals(Value) Then
					If _isInternationalOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isInternational.Equals(_isInternationalOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isInternational = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimeZoneCode]() As SqlString
			Get
				Return _timeZoneCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _timeZoneCode.IsNull Then
					CurrentValue = _timeZoneCode.Value
				End If
				If Not _timeZoneCodeOld.IsNull Then
					OldValue = _timeZoneCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_timeZoneCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DSTI]() As SqlString
			Get
				Return _dSTI
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _dSTI.IsNull Then
					CurrentValue = _dSTI.Value
				End If
				If Not _dSTIOld.IsNull Then
					OldValue = _dSTIOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_dSTI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [PhoneTypeID]() As SqlInt32
			Get
				Return _phoneTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneTypeID.Equals(Value) Then
					If _phoneTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneTypeID.Equals(_phoneTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneTypeID = Value
			End Set
		End Property
		Protected Property [PhoneTypeIDOld]() As SqlInt32
			Get
				Return _phoneTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_phoneTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [PhoneTimeID]() As SqlInt32
			Get
				Return _phoneTimeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneTimeID.Equals(Value) Then
					If _phoneTimeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneTimeID.Equals(_phoneTimeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneTimeID = Value
			End Set
		End Property
		Protected Property [PhoneTimeIDOld]() As SqlInt32
			Get
				Return _phoneTimeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_phoneTimeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SourceTypeID]() As SqlInt32
			Get
				Return _sourceTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceTypeID.Equals(Value) Then
					If _sourceTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceTypeID.Equals(_sourceTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceTypeID = Value
			End Set
		End Property
		Protected Property [SourceTypeIDOld]() As SqlInt32
			Get
				Return _sourceTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_sourceTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SourceQualityID]() As SqlInt32
			Get
				Return _sourceQualityID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceQualityID.Equals(Value) Then
					If _sourceQualityIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceQualityID.Equals(_sourceQualityIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceQualityID = Value
			End Set
		End Property
		Protected Property [SourceQualityIDOld]() As SqlInt32
			Get
				Return _sourceQualityIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_sourceQualityIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastAttemptedOn]() As SqlDateTime
			Get
				Return _lastAttemptedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastAttemptedOn.Equals(Value) Then
					If _lastAttemptedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastAttemptedOn.Equals(_lastAttemptedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastAttemptedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ListedTo]() As SqlString
			Get
				Return _listedTo
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _listedTo.IsNull Then
					CurrentValue = _listedTo.Value
				End If
				If Not _listedToOld.IsNull Then
					OldValue = _listedToOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_listedTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsCleaned]() As SqlBoolean
			Get
				Return _isCleaned
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isCleaned.Equals(Value) Then
					If _isCleanedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isCleaned.Equals(_isCleanedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isCleaned = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BlaisePhoneStatus]() As SqlInt32
			Get
				Return _blaisePhoneStatus
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _blaisePhoneStatus.Equals(Value) Then
					If _blaisePhoneStatusOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _blaisePhoneStatus.Equals(_blaisePhoneStatusOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_blaisePhoneStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BPN]() As SqlByte
			Get
				Return _bPN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bPN.Equals(Value) Then
					If _bPNOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bPN.Equals(_bPNOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bPN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BIN]() As SqlByte
			Get
				Return _bIN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bIN.Equals(Value) Then
					If _bINOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bIN.Equals(_bINOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bIN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [FieldLocatingStatusID]() As SqlInt32
			Get
				Return _fieldLocatingStatusID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _fieldLocatingStatusID.Equals(Value) Then
					If _fieldLocatingStatusIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _fieldLocatingStatusID.Equals(_fieldLocatingStatusIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_fieldLocatingStatusID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TCPAPhoneType]() As SqlString
			Get
				Return _tCPAPhoneType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _tCPAPhoneType.IsNull Then
					CurrentValue = _tCPAPhoneType.Value
				End If
				If Not _tCPAPhoneTypeOld.IsNull Then
					OldValue = _tCPAPhoneTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_tCPAPhoneType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TCPALastModifiedOn]() As SqlDateTime
			Get
				Return _tCPALastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _tCPALastModifiedOn.Equals(Value) Then
					If _tCPALastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _tCPALastModifiedOn.Equals(_tCPALastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_tCPALastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OKToText]() As SqlBoolean
			Get
				Return _oKToText
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _oKToText.Equals(Value) Then
					If _oKToTextOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _oKToText.Equals(_oKToTextOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_oKToText = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
