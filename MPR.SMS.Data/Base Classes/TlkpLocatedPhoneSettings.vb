' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:37 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpLocatedPhoneSettings.
	''' </summary>

	Public Class TlkpLocatedPhoneSettings
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _inResponse As SqlBoolean
		Private _inResponseOld As SqlBoolean
		Private _inRespondent As SqlBoolean
		Private _inRespondentOld As SqlBoolean
		Private _confirmitVarHasSuffix As SqlBoolean
		Private _confirmitVarHasSuffixOld As SqlBoolean

		Private _iD As SqlInt32
		Private _iDOld As SqlInt32

		Private _sMSVariable As SqlString
		Private _sMSVariableOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _confirmitVariable As SqlString
		Private _confirmitVariableOld As SqlString
		Private _staticValue As SqlString
		Private _staticValueOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpLocatedPhoneSettings constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpLocatedPhoneSettings class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatedPhoneSettings class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatedPhoneSettings class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_iD = New SqlInt32(CType(objDataRow("ID"), Integer))
			
			_iDOld = _iD
			
			If objDataRow("ConfirmitVariable") Is System.DBNull.Value Then
				_confirmitVariable = New SqlString("")
			Else
				_confirmitVariable = New SqlString(CType(objDataRow("ConfirmitVariable"), String))
			End If
			
			_confirmitVariableOld = _confirmitVariable
			
			If objDataRow("SMSVariable") Is System.DBNull.Value Then
				_sMSVariable = New SqlString("")
			Else
				_sMSVariable = New SqlString(CType(objDataRow("SMSVariable"), String))
			End If
			
			_sMSVariableOld = _sMSVariable
			
			If objDataRow("ConfirmitVarHasSuffix") Is System.DBNull.Value Then
				_confirmitVarHasSuffix = New SqlBoolean(False)
			Else
				_confirmitVarHasSuffix = New SqlBoolean(CType(objDataRow("ConfirmitVarHasSuffix"), Boolean))
			End If
			
			_confirmitVarHasSuffixOld = _confirmitVarHasSuffix
			
			If objDataRow("StaticValue") Is System.DBNull.Value Then
				_staticValue = New SqlString("")
			Else
				_staticValue = New SqlString(CType(objDataRow("StaticValue"), String))
			End If
			
			_staticValueOld = _staticValue
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objDataRow("InRespondent") Is System.DBNull.Value Then
				_inRespondent = New SqlBoolean(False)
			Else
				_inRespondent = New SqlBoolean(CType(objDataRow("InRespondent"), Boolean))
			End If
			
			_inRespondentOld = _inRespondent
			
			If objDataRow("InResponse") Is System.DBNull.Value Then
				_inResponse = New SqlBoolean(False)
			Else
				_inResponse = New SqlBoolean(CType(objDataRow("InResponse"), Boolean))
			End If
			
			_inResponseOld = _inResponse
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_iD = New SqlInt32(CType(objSqlDataReader("ID"), Integer))
			
			_iDOld = _iD
			
			If objSqlDataReader("ConfirmitVariable") Is System.DBNull.Value Then
				_confirmitVariable = New SqlString("")
			Else
				_confirmitVariable = New SqlString(CType(objSqlDataReader("ConfirmitVariable"), String))
			End If
			
			_confirmitVariableOld = _confirmitVariable
			
			If objSqlDataReader("SMSVariable") Is System.DBNull.Value Then
				_sMSVariable = New SqlString("")
			Else
				_sMSVariable = New SqlString(CType(objSqlDataReader("SMSVariable"), String))
			End If
			
			_sMSVariableOld = _sMSVariable
			
			If objSqlDataReader("ConfirmitVarHasSuffix") Is System.DBNull.Value Then
				_confirmitVarHasSuffix = New SqlBoolean(False)
			Else
				_confirmitVarHasSuffix = New SqlBoolean(CType(objSqlDataReader("ConfirmitVarHasSuffix"), Boolean))
			End If
			
			_confirmitVarHasSuffixOld = _confirmitVarHasSuffix
			
			If objSqlDataReader("StaticValue") Is System.DBNull.Value Then
				_staticValue = New SqlString("")
			Else
				_staticValue = New SqlString(CType(objSqlDataReader("StaticValue"), String))
			End If
			
			_staticValueOld = _staticValue
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objSqlDataReader("InRespondent") Is System.DBNull.Value Then
				_inRespondent = New SqlBoolean(False)
			Else
				_inRespondent = New SqlBoolean(CType(objSqlDataReader("InRespondent"), Boolean))
			End If
			
			_inRespondentOld = _inRespondent
			
			If objSqlDataReader("InResponse") Is System.DBNull.Value Then
				_inResponse = New SqlBoolean(False)
			Else
				_inResponse = New SqlBoolean(CType(objSqlDataReader("InResponse"), Boolean))
			End If
			
			_inResponseOld = _inResponse
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_confirmitVariable = New SqlString("")
			_confirmitVariableOld = _confirmitVariable
			
			_sMSVariable = New SqlString("")
			_sMSVariableOld = _sMSVariable
			
			_confirmitVarHasSuffix = New SqlBoolean(False)
			_confirmitVarHasSuffixOld = _confirmitVarHasSuffix
			
			_staticValue = New SqlString("")
			_staticValueOld = _staticValue
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			_inRespondent = New SqlBoolean(False)
			_inRespondentOld = _inRespondent
			
			_inResponse = New SqlBoolean(False)
			_inResponseOld = _inResponse
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_iD = _iDOld
			
			_confirmitVariable = _confirmitVariableOld
			
			_sMSVariable = _sMSVariableOld
			
			_confirmitVarHasSuffix = _confirmitVarHasSuffixOld
			
			_staticValue = _staticValueOld
			
			_notes = _notesOld
			
			_inRespondent = _inRespondentOld
			
			_inResponse = _inResponseOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>ID</LI>
		'''		 <LI>ConfirmitVariable. May be SqlString.Null</LI>
		'''		 <LI>SMSVariable. May be SqlString.Null</LI>
		'''		 <LI>ConfirmitVarHasSuffix. May be SqlBoolean.Null</LI>
		'''		 <LI>StaticValue. May be SqlString.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>InRespondent. May be SqlBoolean.Null</LI>
		'''		 <LI>InResponse. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatedPhoneSettings_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@ID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _iD))
				cmdToExecute.Parameters.Add(New SqlParameter("@ConfirmitVariable", SqlDbType.VarChar, 128, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _confirmitVariable))
				cmdToExecute.Parameters.Add(New SqlParameter("@SMSVariable", SqlDbType.VarChar, 128, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sMSVariable))
				cmdToExecute.Parameters.Add(New SqlParameter("@ConfirmitVarHasSuffix", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _confirmitVarHasSuffix))
				cmdToExecute.Parameters.Add(New SqlParameter("@StaticValue", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _staticValue))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@InRespondent", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inRespondent))
				cmdToExecute.Parameters.Add(New SqlParameter("@InResponse", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inResponse))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatedPhoneSettings_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatedPhoneSettings::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatedPhoneSettings_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpLocatedPhoneSettings")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatedPhoneSettings_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatedPhoneSettings::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ID]() As SqlInt32
			Get
				Return _iD
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _iD.Equals(Value) Then
					If _iDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _iD.Equals(_iDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim iDTmp As SqlInt32 = Value
				If iDTmp.IsNull Then
					Throw New NullValueException("ID", "ID can't be NULL")
				End If
				_iD = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ConfirmitVariable]() As SqlString
			Get
				Return _confirmitVariable
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _confirmitVariable.IsNull Then
					CurrentValue = _confirmitVariable.Value
				End If
				If Not _confirmitVariableOld.IsNull Then
					OldValue = _confirmitVariableOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_confirmitVariable = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SMSVariable]() As SqlString
			Get
				Return _sMSVariable
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sMSVariable.IsNull Then
					CurrentValue = _sMSVariable.Value
				End If
				If Not _sMSVariableOld.IsNull Then
					OldValue = _sMSVariableOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sMSVariable = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ConfirmitVarHasSuffix]() As SqlBoolean
			Get
				Return _confirmitVarHasSuffix
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _confirmitVarHasSuffix.Equals(Value) Then
					If _confirmitVarHasSuffixOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _confirmitVarHasSuffix.Equals(_confirmitVarHasSuffixOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_confirmitVarHasSuffix = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StaticValue]() As SqlString
			Get
				Return _staticValue
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _staticValue.IsNull Then
					CurrentValue = _staticValue.Value
				End If
				If Not _staticValueOld.IsNull Then
					OldValue = _staticValueOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_staticValue = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InRespondent]() As SqlBoolean
			Get
				Return _inRespondent
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _inRespondent.Equals(Value) Then
					If _inRespondentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _inRespondent.Equals(_inRespondentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_inRespondent = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InResponse]() As SqlBoolean
			Get
				Return _inResponse
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _inResponse.Equals(Value) Then
					If _inResponseOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _inResponse.Equals(_inResponseOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_inResponse = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
