' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:38 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpLocatingAttemptResult.
	''' </summary>

	Public Class TlkpLocatingAttemptResult
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isForAddressService As SqlBoolean
		Private _isForAddressServiceOld As SqlBoolean
		Private _isForSchool As SqlBoolean
		Private _isForSchoolOld As SqlBoolean
		Private _isBarrier As SqlBoolean
		Private _isBarrierOld As SqlBoolean
		Private _isForMemNeighbor As SqlBoolean
		Private _isForMemNeighborOld As SqlBoolean
		Private _isForInstitution As SqlBoolean
		Private _isForInstitutionOld As SqlBoolean
		Private _isAppointment As SqlBoolean
		Private _isAppointmentOld As SqlBoolean
		Private _isForCenter As SqlBoolean
		Private _isForCenterOld As SqlBoolean
		Private _isForChildCareCenter As SqlBoolean
		Private _isForChildCareCenterOld As SqlBoolean
		Private _isForMemberPhone As SqlBoolean
		Private _isForMemberPhoneOld As SqlBoolean
		Private _isForAutoAddedAttempt As SqlBoolean
		Private _isForAutoAddedAttemptOld As SqlBoolean
		Private _isForMemberAddress As SqlBoolean
		Private _isForMemberAddressOld As SqlBoolean

		Private _locatingAttemptResultID As SqlInt32
		Private _locatingAttemptResultIDOld As SqlInt32
		Private _sortOrder As SqlInt32
		Private _sortOrderOld As SqlInt32

		Private _fieldAppliesTo As SqlString
		Private _fieldAppliesToOld As SqlString
		Private _associatedStatus As SqlString
		Private _associatedStatusOld As SqlString
		Private _appliesTo As SqlString
		Private _appliesToOld As SqlString
		Private _locatingAttemptResult As SqlString
		Private _locatingAttemptResultOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpLocatingAttemptResult constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptResult class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptResult class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptResult class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_locatingAttemptResultID = New SqlInt32(CType(objDataRow("LocatingAttemptResultID"), Integer))
			
			_locatingAttemptResultIDOld = _locatingAttemptResultID
			
			If objDataRow("LocatingAttemptResult") Is System.DBNull.Value Then
				_locatingAttemptResult = New SqlString("")
			Else
				_locatingAttemptResult = New SqlString(CType(objDataRow("LocatingAttemptResult"), String))
			End If
			
			_locatingAttemptResultOld = _locatingAttemptResult
			
			If objDataRow("AppliesTo") Is System.DBNull.Value Then
				_appliesTo = New SqlString("")
			Else
				_appliesTo = New SqlString(CType(objDataRow("AppliesTo"), String))
			End If
			
			_appliesToOld = _appliesTo
			
			If objDataRow("AssociatedStatus") Is System.DBNull.Value Then
				_associatedStatus = New SqlString("")
			Else
				_associatedStatus = New SqlString(CType(objDataRow("AssociatedStatus"), String))
			End If
			
			_associatedStatusOld = _associatedStatus
			
			If objDataRow("SortOrder") Is System.DBNull.Value Then
				_sortOrder = SqlInt32.Null
			Else
				_sortOrder = New SqlInt32(CType(objDataRow("SortOrder"), Integer))
			End If
			
			_sortOrderOld = _sortOrder
			
			If objDataRow("FieldAppliesTo") Is System.DBNull.Value Then
				_fieldAppliesTo = New SqlString("")
			Else
				_fieldAppliesTo = New SqlString(CType(objDataRow("FieldAppliesTo"), String))
			End If
			
			_fieldAppliesToOld = _fieldAppliesTo
			
			_isForAutoAddedAttempt = New SqlBoolean(CType(objDataRow("IsForAutoAddedAttempt"), Boolean))
			
			_isForAutoAddedAttemptOld = _isForAutoAddedAttempt
			
			_isForMemberAddress = New SqlBoolean(CType(objDataRow("IsForMemberAddress"), Boolean))
			
			_isForMemberAddressOld = _isForMemberAddress
			
			_isForMemberPhone = New SqlBoolean(CType(objDataRow("IsForMemberPhone"), Boolean))
			
			_isForMemberPhoneOld = _isForMemberPhone
			
			_isForMemNeighbor = New SqlBoolean(CType(objDataRow("IsForMemNeighbor"), Boolean))
			
			_isForMemNeighborOld = _isForMemNeighbor
			
			_isForAddressService = New SqlBoolean(CType(objDataRow("IsForAddressService"), Boolean))
			
			_isForAddressServiceOld = _isForAddressService
			
			_isForSchool = New SqlBoolean(CType(objDataRow("IsForSchool"), Boolean))
			
			_isForSchoolOld = _isForSchool
			
			_isForCenter = New SqlBoolean(CType(objDataRow("IsForCenter"), Boolean))
			
			_isForCenterOld = _isForCenter
			
			_isForChildCareCenter = New SqlBoolean(CType(objDataRow("IsForChildCareCenter"), Boolean))
			
			_isForChildCareCenterOld = _isForChildCareCenter
			
			_isForInstitution = New SqlBoolean(CType(objDataRow("IsForInstitution"), Boolean))
			
			_isForInstitutionOld = _isForInstitution
			
			_isAppointment = New SqlBoolean(CType(objDataRow("IsAppointment"), Boolean))
			
			_isAppointmentOld = _isAppointment
			
			_isBarrier = New SqlBoolean(CType(objDataRow("IsBarrier"), Boolean))
			
			_isBarrierOld = _isBarrier
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_locatingAttemptResultID = New SqlInt32(CType(objSqlDataReader("LocatingAttemptResultID"), Integer))
			
			_locatingAttemptResultIDOld = _locatingAttemptResultID
			
			If objSqlDataReader("LocatingAttemptResult") Is System.DBNull.Value Then
				_locatingAttemptResult = New SqlString("")
			Else
				_locatingAttemptResult = New SqlString(CType(objSqlDataReader("LocatingAttemptResult"), String))
			End If
			
			_locatingAttemptResultOld = _locatingAttemptResult
			
			If objSqlDataReader("AppliesTo") Is System.DBNull.Value Then
				_appliesTo = New SqlString("")
			Else
				_appliesTo = New SqlString(CType(objSqlDataReader("AppliesTo"), String))
			End If
			
			_appliesToOld = _appliesTo
			
			If objSqlDataReader("AssociatedStatus") Is System.DBNull.Value Then
				_associatedStatus = New SqlString("")
			Else
				_associatedStatus = New SqlString(CType(objSqlDataReader("AssociatedStatus"), String))
			End If
			
			_associatedStatusOld = _associatedStatus
			
			If objSqlDataReader("SortOrder") Is System.DBNull.Value Then
				_sortOrder = SqlInt32.Null
			Else
				_sortOrder = New SqlInt32(CType(objSqlDataReader("SortOrder"), Integer))
			End If
			
			_sortOrderOld = _sortOrder
			
			If objSqlDataReader("FieldAppliesTo") Is System.DBNull.Value Then
				_fieldAppliesTo = New SqlString("")
			Else
				_fieldAppliesTo = New SqlString(CType(objSqlDataReader("FieldAppliesTo"), String))
			End If
			
			_fieldAppliesToOld = _fieldAppliesTo
			
			_isForAutoAddedAttempt = New SqlBoolean(CType(objSqlDataReader("IsForAutoAddedAttempt"), Boolean))
			
			_isForAutoAddedAttemptOld = _isForAutoAddedAttempt
			
			_isForMemberAddress = New SqlBoolean(CType(objSqlDataReader("IsForMemberAddress"), Boolean))
			
			_isForMemberAddressOld = _isForMemberAddress
			
			_isForMemberPhone = New SqlBoolean(CType(objSqlDataReader("IsForMemberPhone"), Boolean))
			
			_isForMemberPhoneOld = _isForMemberPhone
			
			_isForMemNeighbor = New SqlBoolean(CType(objSqlDataReader("IsForMemNeighbor"), Boolean))
			
			_isForMemNeighborOld = _isForMemNeighbor
			
			_isForAddressService = New SqlBoolean(CType(objSqlDataReader("IsForAddressService"), Boolean))
			
			_isForAddressServiceOld = _isForAddressService
			
			_isForSchool = New SqlBoolean(CType(objSqlDataReader("IsForSchool"), Boolean))
			
			_isForSchoolOld = _isForSchool
			
			_isForCenter = New SqlBoolean(CType(objSqlDataReader("IsForCenter"), Boolean))
			
			_isForCenterOld = _isForCenter
			
			_isForChildCareCenter = New SqlBoolean(CType(objSqlDataReader("IsForChildCareCenter"), Boolean))
			
			_isForChildCareCenterOld = _isForChildCareCenter
			
			_isForInstitution = New SqlBoolean(CType(objSqlDataReader("IsForInstitution"), Boolean))
			
			_isForInstitutionOld = _isForInstitution
			
			_isAppointment = New SqlBoolean(CType(objSqlDataReader("IsAppointment"), Boolean))
			
			_isAppointmentOld = _isAppointment
			
			_isBarrier = New SqlBoolean(CType(objSqlDataReader("IsBarrier"), Boolean))
			
			_isBarrierOld = _isBarrier
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_locatingAttemptResult = New SqlString("")
			_locatingAttemptResultOld = _locatingAttemptResult
			
			_appliesTo = New SqlString("")
			_appliesToOld = _appliesTo
			
			_associatedStatus = New SqlString("")
			_associatedStatusOld = _associatedStatus
			
			
			_fieldAppliesTo = New SqlString("")
			_fieldAppliesToOld = _fieldAppliesTo
			
			_isForAutoAddedAttempt = New SqlBoolean(False)
			_isForAutoAddedAttemptOld = _isForAutoAddedAttempt
			
			_isForMemberAddress = New SqlBoolean(False)
			_isForMemberAddressOld = _isForMemberAddress
			
			_isForMemberPhone = New SqlBoolean(False)
			_isForMemberPhoneOld = _isForMemberPhone
			
			_isForMemNeighbor = New SqlBoolean(False)
			_isForMemNeighborOld = _isForMemNeighbor
			
			_isForAddressService = New SqlBoolean(False)
			_isForAddressServiceOld = _isForAddressService
			
			_isForSchool = New SqlBoolean(False)
			_isForSchoolOld = _isForSchool
			
			_isForCenter = New SqlBoolean(False)
			_isForCenterOld = _isForCenter
			
			_isForChildCareCenter = New SqlBoolean(False)
			_isForChildCareCenterOld = _isForChildCareCenter
			
			_isForInstitution = New SqlBoolean(False)
			_isForInstitutionOld = _isForInstitution
			
			_isAppointment = New SqlBoolean(False)
			_isAppointmentOld = _isAppointment
			
			_isBarrier = New SqlBoolean(False)
			_isBarrierOld = _isBarrier
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_locatingAttemptResultID = _locatingAttemptResultIDOld
			
			_locatingAttemptResult = _locatingAttemptResultOld
			
			_appliesTo = _appliesToOld
			
			_associatedStatus = _associatedStatusOld
			
			_sortOrder = _sortOrderOld
			
			_fieldAppliesTo = _fieldAppliesToOld
			
			_isForAutoAddedAttempt = _isForAutoAddedAttemptOld
			
			_isForMemberAddress = _isForMemberAddressOld
			
			_isForMemberPhone = _isForMemberPhoneOld
			
			_isForMemNeighbor = _isForMemNeighborOld
			
			_isForAddressService = _isForAddressServiceOld
			
			_isForSchool = _isForSchoolOld
			
			_isForCenter = _isForCenterOld
			
			_isForChildCareCenter = _isForChildCareCenterOld
			
			_isForInstitution = _isForInstitutionOld
			
			_isAppointment = _isAppointmentOld
			
			_isBarrier = _isBarrierOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptResult. May be SqlString.Null</LI>
		'''		 <LI>AppliesTo. May be SqlString.Null</LI>
		'''		 <LI>AssociatedStatus. May be SqlString.Null</LI>
		'''		 <LI>SortOrder. May be SqlInt32.Null</LI>
		'''		 <LI>FieldAppliesTo. May be SqlString.Null</LI>
		'''		 <LI>IsForAutoAddedAttempt</LI>
		'''		 <LI>IsForMemberAddress</LI>
		'''		 <LI>IsForMemberPhone</LI>
		'''		 <LI>IsForMemNeighbor</LI>
		'''		 <LI>IsForAddressService</LI>
		'''		 <LI>IsForSchool</LI>
		'''		 <LI>IsForCenter</LI>
		'''		 <LI>IsForChildCareCenter</LI>
		'''		 <LI>IsForInstitution</LI>
		'''		 <LI>IsAppointment</LI>
		'''		 <LI>IsBarrier</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>LocatingAttemptResultID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptResult_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResult", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptResult))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppliesTo", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appliesTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@AssociatedStatus", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _associatedStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@SortOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sortOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldAppliesTo", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _fieldAppliesTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForAutoAddedAttempt", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForAutoAddedAttempt))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemberAddress", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemberAddress))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemberPhone", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemberPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemNeighbor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemNeighbor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForAddressService", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForAddressService))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForSchool", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForSchool))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForCenter", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForCenter))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForChildCareCenter", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForChildCareCenter))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForInstitution", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForInstitution))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsAppointment", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isAppointment))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsBarrier", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isBarrier))
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_locatingAttemptResultID = CType(cmdToExecute.Parameters.Item("@LocatingAttemptResultID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptResult_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptResult::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptResultID</LI>
		'''		 <LI>LocatingAttemptResult. May be SqlString.Null</LI>
		'''		 <LI>AppliesTo. May be SqlString.Null</LI>
		'''		 <LI>AssociatedStatus. May be SqlString.Null</LI>
		'''		 <LI>SortOrder. May be SqlInt32.Null</LI>
		'''		 <LI>FieldAppliesTo. May be SqlString.Null</LI>
		'''		 <LI>IsForAutoAddedAttempt</LI>
		'''		 <LI>IsForMemberAddress</LI>
		'''		 <LI>IsForMemberPhone</LI>
		'''		 <LI>IsForMemNeighbor</LI>
		'''		 <LI>IsForAddressService</LI>
		'''		 <LI>IsForSchool</LI>
		'''		 <LI>IsForCenter</LI>
		'''		 <LI>IsForChildCareCenter</LI>
		'''		 <LI>IsForInstitution</LI>
		'''		 <LI>IsAppointment</LI>
		'''		 <LI>IsBarrier</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptResult_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResult", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptResult))
				cmdToExecute.Parameters.Add(New SqlParameter("@AppliesTo", SqlDbType.VarChar, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _appliesTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@AssociatedStatus", SqlDbType.VarChar, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _associatedStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@SortOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sortOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@FieldAppliesTo", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _fieldAppliesTo))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForAutoAddedAttempt", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForAutoAddedAttempt))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemberAddress", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemberAddress))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemberPhone", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemberPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForMemNeighbor", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForMemNeighbor))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForAddressService", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForAddressService))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForSchool", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForSchool))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForCenter", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForCenter))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForChildCareCenter", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForChildCareCenter))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsForInstitution", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isForInstitution))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsAppointment", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isAppointment))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsBarrier", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isBarrier))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptResult_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptResult::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptResultID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptResult_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptResult_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptResult::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptResultID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>LocatingAttemptResultID</LI>
		'''		 <LI>LocatingAttemptResult</LI>
		'''		 <LI>AppliesTo</LI>
		'''		 <LI>AssociatedStatus</LI>
		'''		 <LI>SortOrder</LI>
		'''		 <LI>FieldAppliesTo</LI>
		'''		 <LI>IsForAutoAddedAttempt</LI>
		'''		 <LI>IsForMemberAddress</LI>
		'''		 <LI>IsForMemberPhone</LI>
		'''		 <LI>IsForMemNeighbor</LI>
		'''		 <LI>IsForAddressService</LI>
		'''		 <LI>IsForSchool</LI>
		'''		 <LI>IsForCenter</LI>
		'''		 <LI>IsForChildCareCenter</LI>
		'''		 <LI>IsForInstitution</LI>
		'''		 <LI>IsAppointment</LI>
		'''		 <LI>IsBarrier</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptResult_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpLocatingAttemptResult")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingAttemptResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptResultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptResult_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptResult::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptResult_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpLocatingAttemptResult")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptResult_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptResult::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptResultID]() As SqlInt32
			Get
				Return _locatingAttemptResultID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingAttemptResultID.Equals(Value) Then
					If _locatingAttemptResultIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptResultID.Equals(_locatingAttemptResultIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim locatingAttemptResultIDTmp As SqlInt32 = Value
				If locatingAttemptResultIDTmp.IsNull Then
					Throw New NullValueException("LocatingAttemptResultID", "LocatingAttemptResultID can't be NULL")
				End If
				_locatingAttemptResultID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptResult]() As SqlString
			Get
				Return _locatingAttemptResult
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingAttemptResult.IsNull Then
					CurrentValue = _locatingAttemptResult.Value
				End If
				If Not _locatingAttemptResultOld.IsNull Then
					OldValue = _locatingAttemptResultOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingAttemptResult = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AppliesTo]() As SqlString
			Get
				Return _appliesTo
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _appliesTo.IsNull Then
					CurrentValue = _appliesTo.Value
				End If
				If Not _appliesToOld.IsNull Then
					OldValue = _appliesToOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_appliesTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AssociatedStatus]() As SqlString
			Get
				Return _associatedStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _associatedStatus.IsNull Then
					CurrentValue = _associatedStatus.Value
				End If
				If Not _associatedStatusOld.IsNull Then
					OldValue = _associatedStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_associatedStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SortOrder]() As SqlInt32
			Get
				Return _sortOrder
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sortOrder.Equals(Value) Then
					If _sortOrderOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sortOrder.Equals(_sortOrderOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sortOrder = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FieldAppliesTo]() As SqlString
			Get
				Return _fieldAppliesTo
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _fieldAppliesTo.IsNull Then
					CurrentValue = _fieldAppliesTo.Value
				End If
				If Not _fieldAppliesToOld.IsNull Then
					OldValue = _fieldAppliesToOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_fieldAppliesTo = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForAutoAddedAttempt]() As SqlBoolean
			Get
				Return _isForAutoAddedAttempt
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForAutoAddedAttempt.Equals(Value) Then
					If _isForAutoAddedAttemptOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForAutoAddedAttempt.Equals(_isForAutoAddedAttemptOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForAutoAddedAttempt = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [IsForMemberAddress]() As SqlBoolean
			Get
				Return _isForMemberAddress
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForMemberAddress.Equals(Value) Then
					If _isForMemberAddressOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForMemberAddress.Equals(_isForMemberAddressOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForMemberAddress = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForMemberPhone]() As SqlBoolean
			Get
				Return _isForMemberPhone
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForMemberPhone.Equals(Value) Then
					If _isForMemberPhoneOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForMemberPhone.Equals(_isForMemberPhoneOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForMemberPhone = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [IsForMemNeighbor]() As SqlBoolean
			Get
				Return _isForMemNeighbor
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForMemNeighbor.Equals(Value) Then
					If _isForMemNeighborOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForMemNeighbor.Equals(_isForMemNeighborOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForMemNeighbor = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForAddressService]() As SqlBoolean
			Get
				Return _isForAddressService
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForAddressService.Equals(Value) Then
					If _isForAddressServiceOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForAddressService.Equals(_isForAddressServiceOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForAddressService = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForSchool]() As SqlBoolean
			Get
				Return _isForSchool
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForSchool.Equals(Value) Then
					If _isForSchoolOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForSchool.Equals(_isForSchoolOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForSchool = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForCenter]() As SqlBoolean
			Get
				Return _isForCenter
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForCenter.Equals(Value) Then
					If _isForCenterOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForCenter.Equals(_isForCenterOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForCenter = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsForChildCareCenter]() As SqlBoolean
			Get
				Return _isForChildCareCenter
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForChildCareCenter.Equals(Value) Then
					If _isForChildCareCenterOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForChildCareCenter.Equals(_isForChildCareCenterOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForChildCareCenter = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [IsForInstitution]() As SqlBoolean
			Get
				Return _isForInstitution
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isForInstitution.Equals(Value) Then
					If _isForInstitutionOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isForInstitution.Equals(_isForInstitutionOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isForInstitution = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsAppointment]() As SqlBoolean
			Get
				Return _isAppointment
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isAppointment.Equals(Value) Then
					If _isAppointmentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isAppointment.Equals(_isAppointmentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isAppointment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsBarrier]() As SqlBoolean
			Get
				Return _isBarrier
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isBarrier.Equals(Value) Then
					If _isBarrierOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isBarrier.Equals(_isBarrierOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isBarrier = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
