' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:41 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the view named vwExtTestSample.
	''' </summary>

	Public Class VwExtTestSample
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _oKToText As SqlBoolean
		Private _oKToTextOld As SqlBoolean

		Private _dateOfBirth As SqlDateTime
		Private _dateOfBirthOld As SqlDateTime
		Private _importedOn As SqlDateTime
		Private _importedOnOld As SqlDateTime

		Private _phoneTypeID As SqlInt32
		Private _phoneTypeIDOld As SqlInt32
		Private _phoneTimeID As SqlInt32
		Private _phoneTimeIDOld As SqlInt32
		Private _addressTypeID As SqlInt32
		Private _addressTypeIDOld As SqlInt32
		Private _genderID As SqlInt32
		Private _genderIDOld As SqlInt32
		Private _iD As SqlInt32
		Private _iDOld As SqlInt32
		Private _emailTypeID As SqlInt32
		Private _emailTypeIDOld As SqlInt32
		Private _languageTypeID As SqlInt32
		Private _languageTypeIDOld As SqlInt32

		Private _address3 As SqlString
		Private _address3Old As SqlString
		Private _address4 As SqlString
		Private _address4Old As SqlString
		Private _firstName As SqlString
		Private _firstNameOld As SqlString
		Private _address1 As SqlString
		Private _address1Old As SqlString
		Private _address2 As SqlString
		Private _address2Old As SqlString
		Private _city As SqlString
		Private _cityOld As SqlString
		Private _county As SqlString
		Private _countyOld As SqlString
		Private _country As SqlString
		Private _countryOld As SqlString
		Private _postalCode As SqlString
		Private _postalCodeOld As SqlString
		Private _prefix As SqlString
		Private _prefixOld As SqlString
		Private _state As SqlString
		Private _stateOld As SqlString
		Private _facility2 As SqlString
		Private _facility2Old As SqlString
		Private _dSTI As SqlString
		Private _dSTIOld As SqlString
		Private _emailAddress As SqlString
		Private _emailAddressOld As SqlString
		Private _timeZoneCode As SqlString
		Private _timeZoneCodeOld As SqlString
		Private _phoneNum As SqlString
		Private _phoneNumOld As SqlString
		Private _extension As SqlString
		Private _extensionOld As SqlString
		Private _title As SqlString
		Private _titleOld As SqlString
		Private _sSN As SqlString
		Private _sSNOld As SqlString
		Private _facility1 As SqlString
		Private _facility1Old As SqlString
		Private _middleName As SqlString
		Private _middleNameOld As SqlString
		Private _lastName As SqlString
		Private _lastNameOld As SqlString
		Private _suffix As SqlString
		Private _suffixOld As SqlString

#End Region

		''' <overloads>
		''' The VwExtTestSample constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the VwExtTestSample class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwExtTestSample class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwExtTestSample class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_iD = New SqlInt32(CType(objDataRow("ID"), Integer))
			
			_iDOld = _iD
			
			If objDataRow("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objDataRow("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objDataRow("MiddleName") Is System.DBNull.Value Then
				_middleName = New SqlString("")
			Else
				_middleName = New SqlString(CType(objDataRow("MiddleName"), String))
			End If
			
			_middleNameOld = _middleName
			
			If objDataRow("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objDataRow("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objDataRow("DateOfBirth") Is System.DBNull.Value Then
				_dateOfBirth = SqlDateTime.Null
			Else
				_dateOfBirth = New SqlDateTime(CType(objDataRow("DateOfBirth"), Date))
			End If
			
			_dateOfBirthOld = _dateOfBirth
			
			If objDataRow("LanguageTypeID") Is System.DBNull.Value Then
				_languageTypeID = SqlInt32.Null
			Else
				_languageTypeID = New SqlInt32(CType(objDataRow("LanguageTypeID"), Integer))
			End If
			
			_languageTypeIDOld = _languageTypeID
			
			If objDataRow("EmailTypeID") Is System.DBNull.Value Then
				_emailTypeID = SqlInt32.Null
			Else
				_emailTypeID = New SqlInt32(CType(objDataRow("EmailTypeID"), Integer))
			End If
			
			_emailTypeIDOld = _emailTypeID
			
			If objDataRow("EmailAddress") Is System.DBNull.Value Then
				_emailAddress = New SqlString("")
			Else
				_emailAddress = New SqlString(CType(objDataRow("EmailAddress"), String))
			End If
			
			_emailAddressOld = _emailAddress
			
			If objDataRow("PhoneNum") Is System.DBNull.Value Then
				_phoneNum = New SqlString("")
			Else
				_phoneNum = New SqlString(CType(objDataRow("PhoneNum"), String))
			End If
			
			_phoneNumOld = _phoneNum
			
			If objDataRow("Extension") Is System.DBNull.Value Then
				_extension = New SqlString("")
			Else
				_extension = New SqlString(CType(objDataRow("Extension"), String))
			End If
			
			_extensionOld = _extension
			
			If objDataRow("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objDataRow("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objDataRow("DSTI") Is System.DBNull.Value Then
				_dSTI = New SqlString("")
			Else
				_dSTI = New SqlString(CType(objDataRow("DSTI"), String))
			End If
			
			_dSTIOld = _dSTI
			
			If objDataRow("PhoneTimeID") Is System.DBNull.Value Then
				_phoneTimeID = SqlInt32.Null
			Else
				_phoneTimeID = New SqlInt32(CType(objDataRow("PhoneTimeID"), Integer))
			End If
			
			_phoneTimeIDOld = _phoneTimeID
			
			If objDataRow("PhoneTypeID") Is System.DBNull.Value Then
				_phoneTypeID = SqlInt32.Null
			Else
				_phoneTypeID = New SqlInt32(CType(objDataRow("PhoneTypeID"), Integer))
			End If
			
			_phoneTypeIDOld = _phoneTypeID
			
			If objDataRow("OKToText") Is System.DBNull.Value Then
				_oKToText = New SqlBoolean(False)
			Else
				_oKToText = New SqlBoolean(CType(objDataRow("OKToText"), Boolean))
			End If
			
			_oKToTextOld = _oKToText
			
			If objDataRow("Title") Is System.DBNull.Value Then
				_title = New SqlString("")
			Else
				_title = New SqlString(CType(objDataRow("Title"), String))
			End If
			
			_titleOld = _title
			
			If objDataRow("Prefix") Is System.DBNull.Value Then
				_prefix = New SqlString("")
			Else
				_prefix = New SqlString(CType(objDataRow("Prefix"), String))
			End If
			
			_prefixOld = _prefix
			
			If objDataRow("Suffix") Is System.DBNull.Value Then
				_suffix = New SqlString("")
			Else
				_suffix = New SqlString(CType(objDataRow("Suffix"), String))
			End If
			
			_suffixOld = _suffix
			
			If objDataRow("GenderID") Is System.DBNull.Value Then
				_genderID = SqlInt32.Null
			Else
				_genderID = New SqlInt32(CType(objDataRow("GenderID"), Integer))
			End If
			
			_genderIDOld = _genderID
			
			If objDataRow("SSN") Is System.DBNull.Value Then
				_sSN = New SqlString("")
			Else
				_sSN = New SqlString(CType(objDataRow("SSN"), String))
			End If
			
			_sSNOld = _sSN
			
			If objDataRow("Facility1") Is System.DBNull.Value Then
				_facility1 = New SqlString("")
			Else
				_facility1 = New SqlString(CType(objDataRow("Facility1"), String))
			End If
			
			_facility1Old = _facility1
			
			If objDataRow("Facility2") Is System.DBNull.Value Then
				_facility2 = New SqlString("")
			Else
				_facility2 = New SqlString(CType(objDataRow("Facility2"), String))
			End If
			
			_facility2Old = _facility2
			
			If objDataRow("AddressTypeID") Is System.DBNull.Value Then
				_addressTypeID = SqlInt32.Null
			Else
				_addressTypeID = New SqlInt32(CType(objDataRow("AddressTypeID"), Integer))
			End If
			
			_addressTypeIDOld = _addressTypeID
			
			If objDataRow("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objDataRow("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objDataRow("Address2") Is System.DBNull.Value Then
				_address2 = New SqlString("")
			Else
				_address2 = New SqlString(CType(objDataRow("Address2"), String))
			End If
			
			_address2Old = _address2
			
			If objDataRow("Address3") Is System.DBNull.Value Then
				_address3 = New SqlString("")
			Else
				_address3 = New SqlString(CType(objDataRow("Address3"), String))
			End If
			
			_address3Old = _address3
			
			If objDataRow("Address4") Is System.DBNull.Value Then
				_address4 = New SqlString("")
			Else
				_address4 = New SqlString(CType(objDataRow("Address4"), String))
			End If
			
			_address4Old = _address4
			
			If objDataRow("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objDataRow("City"), String))
			End If
			
			_cityOld = _city
			
			If objDataRow("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objDataRow("State"), String))
			End If
			
			_stateOld = _state
			
			If objDataRow("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objDataRow("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objDataRow("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objDataRow("County"), String))
			End If
			
			_countyOld = _county
			
			If objDataRow("Country") Is System.DBNull.Value Then
				_country = New SqlString("")
			Else
				_country = New SqlString(CType(objDataRow("Country"), String))
			End If
			
			_countryOld = _country
			
			If objDataRow("ImportedOn") Is System.DBNull.Value Then
				_importedOn = SqlDateTime.Null
			Else
				_importedOn = New SqlDateTime(CType(objDataRow("ImportedOn"), Date))
			End If
			
			_importedOnOld = _importedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_iD = New SqlInt32(CType(objSqlDataReader("ID"), Integer))
			
			_iDOld = _iD
			
			If objSqlDataReader("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objSqlDataReader("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objSqlDataReader("MiddleName") Is System.DBNull.Value Then
				_middleName = New SqlString("")
			Else
				_middleName = New SqlString(CType(objSqlDataReader("MiddleName"), String))
			End If
			
			_middleNameOld = _middleName
			
			If objSqlDataReader("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objSqlDataReader("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objSqlDataReader("DateOfBirth") Is System.DBNull.Value Then
				_dateOfBirth = SqlDateTime.Null
			Else
				_dateOfBirth = New SqlDateTime(CType(objSqlDataReader("DateOfBirth"), Date))
			End If
			
			_dateOfBirthOld = _dateOfBirth
			
			If objSqlDataReader("LanguageTypeID") Is System.DBNull.Value Then
				_languageTypeID = SqlInt32.Null
			Else
				_languageTypeID = New SqlInt32(CType(objSqlDataReader("LanguageTypeID"), Integer))
			End If
			
			_languageTypeIDOld = _languageTypeID
			
			If objSqlDataReader("EmailTypeID") Is System.DBNull.Value Then
				_emailTypeID = SqlInt32.Null
			Else
				_emailTypeID = New SqlInt32(CType(objSqlDataReader("EmailTypeID"), Integer))
			End If
			
			_emailTypeIDOld = _emailTypeID
			
			If objSqlDataReader("EmailAddress") Is System.DBNull.Value Then
				_emailAddress = New SqlString("")
			Else
				_emailAddress = New SqlString(CType(objSqlDataReader("EmailAddress"), String))
			End If
			
			_emailAddressOld = _emailAddress
			
			If objSqlDataReader("PhoneNum") Is System.DBNull.Value Then
				_phoneNum = New SqlString("")
			Else
				_phoneNum = New SqlString(CType(objSqlDataReader("PhoneNum"), String))
			End If
			
			_phoneNumOld = _phoneNum
			
			If objSqlDataReader("Extension") Is System.DBNull.Value Then
				_extension = New SqlString("")
			Else
				_extension = New SqlString(CType(objSqlDataReader("Extension"), String))
			End If
			
			_extensionOld = _extension
			
			If objSqlDataReader("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objSqlDataReader("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objSqlDataReader("DSTI") Is System.DBNull.Value Then
				_dSTI = New SqlString("")
			Else
				_dSTI = New SqlString(CType(objSqlDataReader("DSTI"), String))
			End If
			
			_dSTIOld = _dSTI
			
			If objSqlDataReader("PhoneTimeID") Is System.DBNull.Value Then
				_phoneTimeID = SqlInt32.Null
			Else
				_phoneTimeID = New SqlInt32(CType(objSqlDataReader("PhoneTimeID"), Integer))
			End If
			
			_phoneTimeIDOld = _phoneTimeID
			
			If objSqlDataReader("PhoneTypeID") Is System.DBNull.Value Then
				_phoneTypeID = SqlInt32.Null
			Else
				_phoneTypeID = New SqlInt32(CType(objSqlDataReader("PhoneTypeID"), Integer))
			End If
			
			_phoneTypeIDOld = _phoneTypeID
			
			If objSqlDataReader("OKToText") Is System.DBNull.Value Then
				_oKToText = New SqlBoolean(False)
			Else
				_oKToText = New SqlBoolean(CType(objSqlDataReader("OKToText"), Boolean))
			End If
			
			_oKToTextOld = _oKToText
			
			If objSqlDataReader("Title") Is System.DBNull.Value Then
				_title = New SqlString("")
			Else
				_title = New SqlString(CType(objSqlDataReader("Title"), String))
			End If
			
			_titleOld = _title
			
			If objSqlDataReader("Prefix") Is System.DBNull.Value Then
				_prefix = New SqlString("")
			Else
				_prefix = New SqlString(CType(objSqlDataReader("Prefix"), String))
			End If
			
			_prefixOld = _prefix
			
			If objSqlDataReader("Suffix") Is System.DBNull.Value Then
				_suffix = New SqlString("")
			Else
				_suffix = New SqlString(CType(objSqlDataReader("Suffix"), String))
			End If
			
			_suffixOld = _suffix
			
			If objSqlDataReader("GenderID") Is System.DBNull.Value Then
				_genderID = SqlInt32.Null
			Else
				_genderID = New SqlInt32(CType(objSqlDataReader("GenderID"), Integer))
			End If
			
			_genderIDOld = _genderID
			
			If objSqlDataReader("SSN") Is System.DBNull.Value Then
				_sSN = New SqlString("")
			Else
				_sSN = New SqlString(CType(objSqlDataReader("SSN"), String))
			End If
			
			_sSNOld = _sSN
			
			If objSqlDataReader("Facility1") Is System.DBNull.Value Then
				_facility1 = New SqlString("")
			Else
				_facility1 = New SqlString(CType(objSqlDataReader("Facility1"), String))
			End If
			
			_facility1Old = _facility1
			
			If objSqlDataReader("Facility2") Is System.DBNull.Value Then
				_facility2 = New SqlString("")
			Else
				_facility2 = New SqlString(CType(objSqlDataReader("Facility2"), String))
			End If
			
			_facility2Old = _facility2
			
			If objSqlDataReader("AddressTypeID") Is System.DBNull.Value Then
				_addressTypeID = SqlInt32.Null
			Else
				_addressTypeID = New SqlInt32(CType(objSqlDataReader("AddressTypeID"), Integer))
			End If
			
			_addressTypeIDOld = _addressTypeID
			
			If objSqlDataReader("Address1") Is System.DBNull.Value Then
				_address1 = New SqlString("")
			Else
				_address1 = New SqlString(CType(objSqlDataReader("Address1"), String))
			End If
			
			_address1Old = _address1
			
			If objSqlDataReader("Address2") Is System.DBNull.Value Then
				_address2 = New SqlString("")
			Else
				_address2 = New SqlString(CType(objSqlDataReader("Address2"), String))
			End If
			
			_address2Old = _address2
			
			If objSqlDataReader("Address3") Is System.DBNull.Value Then
				_address3 = New SqlString("")
			Else
				_address3 = New SqlString(CType(objSqlDataReader("Address3"), String))
			End If
			
			_address3Old = _address3
			
			If objSqlDataReader("Address4") Is System.DBNull.Value Then
				_address4 = New SqlString("")
			Else
				_address4 = New SqlString(CType(objSqlDataReader("Address4"), String))
			End If
			
			_address4Old = _address4
			
			If objSqlDataReader("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objSqlDataReader("City"), String))
			End If
			
			_cityOld = _city
			
			If objSqlDataReader("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objSqlDataReader("State"), String))
			End If
			
			_stateOld = _state
			
			If objSqlDataReader("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objSqlDataReader("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objSqlDataReader("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objSqlDataReader("County"), String))
			End If
			
			_countyOld = _county
			
			If objSqlDataReader("Country") Is System.DBNull.Value Then
				_country = New SqlString("")
			Else
				_country = New SqlString(CType(objSqlDataReader("Country"), String))
			End If
			
			_countryOld = _country
			
			If objSqlDataReader("ImportedOn") Is System.DBNull.Value Then
				_importedOn = SqlDateTime.Null
			Else
				_importedOn = New SqlDateTime(CType(objSqlDataReader("ImportedOn"), Date))
			End If
			
			_importedOnOld = _importedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_firstName = New SqlString("")
			_firstNameOld = _firstName
			
			_middleName = New SqlString("")
			_middleNameOld = _middleName
			
			_lastName = New SqlString("")
			_lastNameOld = _lastName
			
			
			
			
			_emailAddress = New SqlString("")
			_emailAddressOld = _emailAddress
			
			_phoneNum = New SqlString("")
			_phoneNumOld = _phoneNum
			
			_extension = New SqlString("")
			_extensionOld = _extension
			
			_timeZoneCode = New SqlString("")
			_timeZoneCodeOld = _timeZoneCode
			
			_dSTI = New SqlString("")
			_dSTIOld = _dSTI
			
			
			
			_oKToText = New SqlBoolean(False)
			_oKToTextOld = _oKToText
			
			_title = New SqlString("")
			_titleOld = _title
			
			_prefix = New SqlString("")
			_prefixOld = _prefix
			
			_suffix = New SqlString("")
			_suffixOld = _suffix
			
			
			_sSN = New SqlString("")
			_sSNOld = _sSN
			
			_facility1 = New SqlString("")
			_facility1Old = _facility1
			
			_facility2 = New SqlString("")
			_facility2Old = _facility2
			
			
			_address1 = New SqlString("")
			_address1Old = _address1
			
			_address2 = New SqlString("")
			_address2Old = _address2
			
			_address3 = New SqlString("")
			_address3Old = _address3
			
			_address4 = New SqlString("")
			_address4Old = _address4
			
			_city = New SqlString("")
			_cityOld = _city
			
			_state = New SqlString("")
			_stateOld = _state
			
			_postalCode = New SqlString("")
			_postalCodeOld = _postalCode
			
			_county = New SqlString("")
			_countyOld = _county
			
			_country = New SqlString("")
			_countryOld = _country
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_iD = _iDOld
			
			_firstName = _firstNameOld
			
			_middleName = _middleNameOld
			
			_lastName = _lastNameOld
			
			_dateOfBirth = _dateOfBirthOld
			
			_languageTypeID = _languageTypeIDOld
			
			_emailTypeID = _emailTypeIDOld
			
			_emailAddress = _emailAddressOld
			
			_phoneNum = _phoneNumOld
			
			_extension = _extensionOld
			
			_timeZoneCode = _timeZoneCodeOld
			
			_dSTI = _dSTIOld
			
			_phoneTimeID = _phoneTimeIDOld
			
			_phoneTypeID = _phoneTypeIDOld
			
			_oKToText = _oKToTextOld
			
			_title = _titleOld
			
			_prefix = _prefixOld
			
			_suffix = _suffixOld
			
			_genderID = _genderIDOld
			
			_sSN = _sSNOld
			
			_facility1 = _facility1Old
			
			_facility2 = _facility2Old
			
			_addressTypeID = _addressTypeIDOld
			
			_address1 = _address1Old
			
			_address2 = _address2Old
			
			_address3 = _address3Old
			
			_address4 = _address4Old
			
			_city = _cityOld
			
			_state = _stateOld
			
			_postalCode = _postalCodeOld
			
			_county = _countyOld
			
			_country = _countryOld
			
			_importedOn = _importedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub



		''' <summary>
		''' Selects all rows from the view.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_vwExtTestSample_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("vwExtTestSample")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_vwExtTestSample_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("VwExtTestSample::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ID]() As SqlInt32
			Get
				Return _iD
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _iD.Equals(Value) Then
					If _iDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _iD.Equals(_iDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim iDTmp As SqlInt32 = Value
				If iDTmp.IsNull Then
					Throw New NullValueException("ID", "ID can't be NULL")
				End If
				_iD = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FirstName]() As SqlString
			Get
				Return _firstName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _firstName.IsNull Then
					CurrentValue = _firstName.Value
				End If
				If Not _firstNameOld.IsNull Then
					OldValue = _firstNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_firstName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MiddleName]() As SqlString
			Get
				Return _middleName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _middleName.IsNull Then
					CurrentValue = _middleName.Value
				End If
				If Not _middleNameOld.IsNull Then
					OldValue = _middleNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_middleName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastName]() As SqlString
			Get
				Return _lastName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastName.IsNull Then
					CurrentValue = _lastName.Value
				End If
				If Not _lastNameOld.IsNull Then
					OldValue = _lastNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateOfBirth]() As SqlDateTime
			Get
				Return _dateOfBirth
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateOfBirth.Equals(Value) Then
					If _dateOfBirthOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateOfBirth.Equals(_dateOfBirthOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateOfBirth = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LanguageTypeID]() As SqlInt32
			Get
				Return _languageTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _languageTypeID.Equals(Value) Then
					If _languageTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _languageTypeID.Equals(_languageTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_languageTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EmailTypeID]() As SqlInt32
			Get
				Return _emailTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _emailTypeID.Equals(Value) Then
					If _emailTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _emailTypeID.Equals(_emailTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_emailTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EmailAddress]() As SqlString
			Get
				Return _emailAddress
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _emailAddress.IsNull Then
					CurrentValue = _emailAddress.Value
				End If
				If Not _emailAddressOld.IsNull Then
					OldValue = _emailAddressOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_emailAddress = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneNum]() As SqlString
			Get
				Return _phoneNum
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _phoneNum.IsNull Then
					CurrentValue = _phoneNum.Value
				End If
				If Not _phoneNumOld.IsNull Then
					OldValue = _phoneNumOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_phoneNum = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Extension]() As SqlString
			Get
				Return _extension
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _extension.IsNull Then
					CurrentValue = _extension.Value
				End If
				If Not _extensionOld.IsNull Then
					OldValue = _extensionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_extension = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimeZoneCode]() As SqlString
			Get
				Return _timeZoneCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _timeZoneCode.IsNull Then
					CurrentValue = _timeZoneCode.Value
				End If
				If Not _timeZoneCodeOld.IsNull Then
					OldValue = _timeZoneCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_timeZoneCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DSTI]() As SqlString
			Get
				Return _dSTI
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _dSTI.IsNull Then
					CurrentValue = _dSTI.Value
				End If
				If Not _dSTIOld.IsNull Then
					OldValue = _dSTIOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_dSTI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneTimeID]() As SqlInt32
			Get
				Return _phoneTimeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneTimeID.Equals(Value) Then
					If _phoneTimeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneTimeID.Equals(_phoneTimeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneTimeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneTypeID]() As SqlInt32
			Get
				Return _phoneTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneTypeID.Equals(Value) Then
					If _phoneTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneTypeID.Equals(_phoneTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [OKToText]() As SqlBoolean
			Get
				Return _oKToText
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _oKToText.Equals(Value) Then
					If _oKToTextOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _oKToText.Equals(_oKToTextOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_oKToText = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Title]() As SqlString
			Get
				Return _title
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _title.IsNull Then
					CurrentValue = _title.Value
				End If
				If Not _titleOld.IsNull Then
					OldValue = _titleOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_title = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Prefix]() As SqlString
			Get
				Return _prefix
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _prefix.IsNull Then
					CurrentValue = _prefix.Value
				End If
				If Not _prefixOld.IsNull Then
					OldValue = _prefixOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_prefix = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Suffix]() As SqlString
			Get
				Return _suffix
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _suffix.IsNull Then
					CurrentValue = _suffix.Value
				End If
				If Not _suffixOld.IsNull Then
					OldValue = _suffixOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_suffix = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [GenderID]() As SqlInt32
			Get
				Return _genderID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _genderID.Equals(Value) Then
					If _genderIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _genderID.Equals(_genderIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_genderID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SSN]() As SqlString
			Get
				Return _sSN
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sSN.IsNull Then
					CurrentValue = _sSN.Value
				End If
				If Not _sSNOld.IsNull Then
					OldValue = _sSNOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sSN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Facility1]() As SqlString
			Get
				Return _facility1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _facility1.IsNull Then
					CurrentValue = _facility1.Value
				End If
				If Not _facility1Old.IsNull Then
					OldValue = _facility1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_facility1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Facility2]() As SqlString
			Get
				Return _facility2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _facility2.IsNull Then
					CurrentValue = _facility2.Value
				End If
				If Not _facility2Old.IsNull Then
					OldValue = _facility2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_facility2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressTypeID]() As SqlInt32
			Get
				Return _addressTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressTypeID.Equals(Value) Then
					If _addressTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressTypeID.Equals(_addressTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_addressTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address1]() As SqlString
			Get
				Return _address1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address1.IsNull Then
					CurrentValue = _address1.Value
				End If
				If Not _address1Old.IsNull Then
					OldValue = _address1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address2]() As SqlString
			Get
				Return _address2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address2.IsNull Then
					CurrentValue = _address2.Value
				End If
				If Not _address2Old.IsNull Then
					OldValue = _address2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address3]() As SqlString
			Get
				Return _address3
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address3.IsNull Then
					CurrentValue = _address3.Value
				End If
				If Not _address3Old.IsNull Then
					OldValue = _address3Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address3 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Address4]() As SqlString
			Get
				Return _address4
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _address4.IsNull Then
					CurrentValue = _address4.Value
				End If
				If Not _address4Old.IsNull Then
					OldValue = _address4Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_address4 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [City]() As SqlString
			Get
				Return _city
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _city.IsNull Then
					CurrentValue = _city.Value
				End If
				If Not _cityOld.IsNull Then
					OldValue = _cityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_city = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [State]() As SqlString
			Get
				Return _state
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _state.IsNull Then
					CurrentValue = _state.Value
				End If
				If Not _stateOld.IsNull Then
					OldValue = _stateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_state = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PostalCode]() As SqlString
			Get
				Return _postalCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _postalCode.IsNull Then
					CurrentValue = _postalCode.Value
				End If
				If Not _postalCodeOld.IsNull Then
					OldValue = _postalCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_postalCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [County]() As SqlString
			Get
				Return _county
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _county.IsNull Then
					CurrentValue = _county.Value
				End If
				If Not _countyOld.IsNull Then
					OldValue = _countyOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_county = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Country]() As SqlString
			Get
				Return _country
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _country.IsNull Then
					CurrentValue = _country.Value
				End If
				If Not _countryOld.IsNull Then
					OldValue = _countryOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_country = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ImportedOn]() As SqlDateTime
			Get
				Return _importedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _importedOn.Equals(Value) Then
					If _importedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _importedOn.Equals(_importedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_importedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
