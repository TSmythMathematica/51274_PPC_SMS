' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:38 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpLocatingAttemptType.
	''' </summary>

	Public Class TlkpLocatingAttemptType
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _showAddresses As SqlBoolean
		Private _showAddressesOld As SqlBoolean
		Private _showPersonName As SqlBoolean
		Private _showPersonNameOld As SqlBoolean
		Private _isFieldLocating As SqlBoolean
		Private _isFieldLocatingOld As SqlBoolean
		Private _showPhones As SqlBoolean
		Private _showPhonesOld As SqlBoolean
		Private _showChangeRespondent As SqlBoolean
		Private _showChangeRespondentOld As SqlBoolean
		Private _showAddDocument As SqlBoolean
		Private _showAddDocumentOld As SqlBoolean
		Private _showEmails As SqlBoolean
		Private _showEmailsOld As SqlBoolean
		Private _showInSeparateBrowser As SqlBoolean
		Private _showInSeparateBrowserOld As SqlBoolean
		Private _allowMultipleAttempts As SqlBoolean
		Private _allowMultipleAttemptsOld As SqlBoolean
		Private _showCaseMembers As SqlBoolean
		Private _showCaseMembersOld As SqlBoolean
		Private _isActive As SqlBoolean
		Private _isActiveOld As SqlBoolean

		Private _showDefault As SqlString
		Private _showDefaultOld As SqlString

		Private _resultDefault As SqlInt32
		Private _resultDefaultOld As SqlInt32
		Private _locatingAttemptTypeID As SqlInt32
		Private _locatingAttemptTypeIDOld As SqlInt32
		Private _sortOrder As SqlInt32
		Private _sortOrderOld As SqlInt32

		Private _showURL As SqlString
		Private _showURLOld As SqlString
		Private _applicationLocation As SqlString
		Private _applicationLocationOld As SqlString
		Private _locatingAttemptType As SqlString
		Private _locatingAttemptTypeOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpLocatingAttemptType constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptType class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptType class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpLocatingAttemptType class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_locatingAttemptTypeID = New SqlInt32(CType(objDataRow("LocatingAttemptTypeID"), Integer))
			
			_locatingAttemptTypeIDOld = _locatingAttemptTypeID
			
			If objDataRow("LocatingAttemptType") Is System.DBNull.Value Then
				_locatingAttemptType = New SqlString("")
			Else
				_locatingAttemptType = New SqlString(CType(objDataRow("LocatingAttemptType"), String))
			End If
			
			_locatingAttemptTypeOld = _locatingAttemptType
			
			_isActive = New SqlBoolean(CType(objDataRow("IsActive"), Boolean))
			
			_isActiveOld = _isActive
			
			If objDataRow("SortOrder") Is System.DBNull.Value Then
				_sortOrder = SqlInt32.Null
			Else
				_sortOrder = New SqlInt32(CType(objDataRow("SortOrder"), Integer))
			End If
			
			_sortOrderOld = _sortOrder
			
			_allowMultipleAttempts = New SqlBoolean(CType(objDataRow("AllowMultipleAttempts"), Boolean))
			
			_allowMultipleAttemptsOld = _allowMultipleAttempts
			
			If objDataRow("ApplicationLocation") Is System.DBNull.Value Then
				_applicationLocation = New SqlString("")
			Else
				_applicationLocation = New SqlString(CType(objDataRow("ApplicationLocation"), String))
			End If
			
			_applicationLocationOld = _applicationLocation
			
			If objDataRow("ShowURL") Is System.DBNull.Value Then
				_showURL = New SqlString("")
			Else
				_showURL = New SqlString(CType(objDataRow("ShowURL"), String))
			End If
			
			_showURLOld = _showURL
			
			If objDataRow("ShowInSeparateBrowser") Is System.DBNull.Value Then
				_showInSeparateBrowser = New SqlBoolean(False)
			Else
				_showInSeparateBrowser = New SqlBoolean(CType(objDataRow("ShowInSeparateBrowser"), Boolean))
			End If
			
			_showInSeparateBrowserOld = _showInSeparateBrowser
			
			_showCaseMembers = New SqlBoolean(CType(objDataRow("ShowCaseMembers"), Boolean))
			
			_showCaseMembersOld = _showCaseMembers
			
			_showPersonName = New SqlBoolean(CType(objDataRow("ShowPersonName"), Boolean))
			
			_showPersonNameOld = _showPersonName
			
			_showAddresses = New SqlBoolean(CType(objDataRow("ShowAddresses"), Boolean))
			
			_showAddressesOld = _showAddresses
			
			_showPhones = New SqlBoolean(CType(objDataRow("ShowPhones"), Boolean))
			
			_showPhonesOld = _showPhones
			
			_showEmails = New SqlBoolean(CType(objDataRow("ShowEmails"), Boolean))
			
			_showEmailsOld = _showEmails
			
			_showAddDocument = New SqlBoolean(CType(objDataRow("ShowAddDocument"), Boolean))
			
			_showAddDocumentOld = _showAddDocument
			
			_showChangeRespondent = New SqlBoolean(CType(objDataRow("ShowChangeRespondent"), Boolean))
			
			_showChangeRespondentOld = _showChangeRespondent
			
			If objDataRow("ShowDefault") Is System.DBNull.Value Then
				_showDefault = New SqlString("")
			Else
				_showDefault = New SqlString(CType(objDataRow("ShowDefault"), String))
			End If
			
			_showDefaultOld = _showDefault
			
			If objDataRow("ResultDefault") Is System.DBNull.Value Then
				_resultDefault = SqlInt32.Null
			Else
				_resultDefault = New SqlInt32(CType(objDataRow("ResultDefault"), Integer))
			End If
			
			_resultDefaultOld = _resultDefault
			
			_isFieldLocating = New SqlBoolean(CType(objDataRow("IsFieldLocating"), Boolean))
			
			_isFieldLocatingOld = _isFieldLocating
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_locatingAttemptTypeID = New SqlInt32(CType(objSqlDataReader("LocatingAttemptTypeID"), Integer))
			
			_locatingAttemptTypeIDOld = _locatingAttemptTypeID
			
			If objSqlDataReader("LocatingAttemptType") Is System.DBNull.Value Then
				_locatingAttemptType = New SqlString("")
			Else
				_locatingAttemptType = New SqlString(CType(objSqlDataReader("LocatingAttemptType"), String))
			End If
			
			_locatingAttemptTypeOld = _locatingAttemptType
			
			_isActive = New SqlBoolean(CType(objSqlDataReader("IsActive"), Boolean))
			
			_isActiveOld = _isActive
			
			If objSqlDataReader("SortOrder") Is System.DBNull.Value Then
				_sortOrder = SqlInt32.Null
			Else
				_sortOrder = New SqlInt32(CType(objSqlDataReader("SortOrder"), Integer))
			End If
			
			_sortOrderOld = _sortOrder
			
			_allowMultipleAttempts = New SqlBoolean(CType(objSqlDataReader("AllowMultipleAttempts"), Boolean))
			
			_allowMultipleAttemptsOld = _allowMultipleAttempts
			
			If objSqlDataReader("ApplicationLocation") Is System.DBNull.Value Then
				_applicationLocation = New SqlString("")
			Else
				_applicationLocation = New SqlString(CType(objSqlDataReader("ApplicationLocation"), String))
			End If
			
			_applicationLocationOld = _applicationLocation
			
			If objSqlDataReader("ShowURL") Is System.DBNull.Value Then
				_showURL = New SqlString("")
			Else
				_showURL = New SqlString(CType(objSqlDataReader("ShowURL"), String))
			End If
			
			_showURLOld = _showURL
			
			If objSqlDataReader("ShowInSeparateBrowser") Is System.DBNull.Value Then
				_showInSeparateBrowser = New SqlBoolean(False)
			Else
				_showInSeparateBrowser = New SqlBoolean(CType(objSqlDataReader("ShowInSeparateBrowser"), Boolean))
			End If
			
			_showInSeparateBrowserOld = _showInSeparateBrowser
			
			_showCaseMembers = New SqlBoolean(CType(objSqlDataReader("ShowCaseMembers"), Boolean))
			
			_showCaseMembersOld = _showCaseMembers
			
			_showPersonName = New SqlBoolean(CType(objSqlDataReader("ShowPersonName"), Boolean))
			
			_showPersonNameOld = _showPersonName
			
			_showAddresses = New SqlBoolean(CType(objSqlDataReader("ShowAddresses"), Boolean))
			
			_showAddressesOld = _showAddresses
			
			_showPhones = New SqlBoolean(CType(objSqlDataReader("ShowPhones"), Boolean))
			
			_showPhonesOld = _showPhones
			
			_showEmails = New SqlBoolean(CType(objSqlDataReader("ShowEmails"), Boolean))
			
			_showEmailsOld = _showEmails
			
			_showAddDocument = New SqlBoolean(CType(objSqlDataReader("ShowAddDocument"), Boolean))
			
			_showAddDocumentOld = _showAddDocument
			
			_showChangeRespondent = New SqlBoolean(CType(objSqlDataReader("ShowChangeRespondent"), Boolean))
			
			_showChangeRespondentOld = _showChangeRespondent
			
			If objSqlDataReader("ShowDefault") Is System.DBNull.Value Then
				_showDefault = New SqlString("")
			Else
				_showDefault = New SqlString(CType(objSqlDataReader("ShowDefault"), String))
			End If
			
			_showDefaultOld = _showDefault
			
			If objSqlDataReader("ResultDefault") Is System.DBNull.Value Then
				_resultDefault = SqlInt32.Null
			Else
				_resultDefault = New SqlInt32(CType(objSqlDataReader("ResultDefault"), Integer))
			End If
			
			_resultDefaultOld = _resultDefault
			
			_isFieldLocating = New SqlBoolean(CType(objSqlDataReader("IsFieldLocating"), Boolean))
			
			_isFieldLocatingOld = _isFieldLocating
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_locatingAttemptType = New SqlString("")
			_locatingAttemptTypeOld = _locatingAttemptType
			
			_isActive = New SqlBoolean(False)
			_isActiveOld = _isActive
			
			
			_allowMultipleAttempts = New SqlBoolean(False)
			_allowMultipleAttemptsOld = _allowMultipleAttempts
			
			_applicationLocation = New SqlString("")
			_applicationLocationOld = _applicationLocation
			
			_showURL = New SqlString("")
			_showURLOld = _showURL
			
			_showInSeparateBrowser = New SqlBoolean(False)
			_showInSeparateBrowserOld = _showInSeparateBrowser
			
			_showCaseMembers = New SqlBoolean(False)
			_showCaseMembersOld = _showCaseMembers
			
			_showPersonName = New SqlBoolean(False)
			_showPersonNameOld = _showPersonName
			
			_showAddresses = New SqlBoolean(False)
			_showAddressesOld = _showAddresses
			
			_showPhones = New SqlBoolean(False)
			_showPhonesOld = _showPhones
			
			_showEmails = New SqlBoolean(False)
			_showEmailsOld = _showEmails
			
			_showAddDocument = New SqlBoolean(False)
			_showAddDocumentOld = _showAddDocument
			
			_showChangeRespondent = New SqlBoolean(False)
			_showChangeRespondentOld = _showChangeRespondent
			
			_showDefault = New SqlString("")
			_showDefaultOld = _showDefault
			
			
			_isFieldLocating = New SqlBoolean(False)
			_isFieldLocatingOld = _isFieldLocating
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_locatingAttemptTypeID = _locatingAttemptTypeIDOld
			
			_locatingAttemptType = _locatingAttemptTypeOld
			
			_isActive = _isActiveOld
			
			_sortOrder = _sortOrderOld
			
			_allowMultipleAttempts = _allowMultipleAttemptsOld
			
			_applicationLocation = _applicationLocationOld
			
			_showURL = _showURLOld
			
			_showInSeparateBrowser = _showInSeparateBrowserOld
			
			_showCaseMembers = _showCaseMembersOld
			
			_showPersonName = _showPersonNameOld
			
			_showAddresses = _showAddressesOld
			
			_showPhones = _showPhonesOld
			
			_showEmails = _showEmailsOld
			
			_showAddDocument = _showAddDocumentOld
			
			_showChangeRespondent = _showChangeRespondentOld
			
			_showDefault = _showDefaultOld
			
			_resultDefault = _resultDefaultOld
			
			_isFieldLocating = _isFieldLocatingOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptTypeID</LI>
		'''		 <LI>LocatingAttemptType. May be SqlString.Null</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>SortOrder. May be SqlInt32.Null</LI>
		'''		 <LI>AllowMultipleAttempts</LI>
		'''		 <LI>ApplicationLocation. May be SqlString.Null</LI>
		'''		 <LI>ShowURL. May be SqlString.Null</LI>
		'''		 <LI>ShowInSeparateBrowser. May be SqlBoolean.Null</LI>
		'''		 <LI>ShowCaseMembers</LI>
		'''		 <LI>ShowPersonName</LI>
		'''		 <LI>ShowAddresses</LI>
		'''		 <LI>ShowPhones</LI>
		'''		 <LI>ShowEmails</LI>
		'''		 <LI>ShowAddDocument</LI>
		'''		 <LI>ShowChangeRespondent</LI>
		'''		 <LI>ShowDefault. May be SqlString.Null</LI>
		'''		 <LI>ResultDefault. May be SqlInt32.Null</LI>
		'''		 <LI>IsFieldLocating</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptType_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptType", SqlDbType.VarChar, 125, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptType))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@SortOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sortOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowMultipleAttempts", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _allowMultipleAttempts))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApplicationLocation", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _applicationLocation))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowURL", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showURL))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowInSeparateBrowser", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showInSeparateBrowser))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowCaseMembers", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showCaseMembers))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowPersonName", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showPersonName))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowAddresses", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showAddresses))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowPhones", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showPhones))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowEmails", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showEmails))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowAddDocument", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showAddDocument))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowChangeRespondent", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showChangeRespondent))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowDefault", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showDefault))
				cmdToExecute.Parameters.Add(New SqlParameter("@ResultDefault", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _resultDefault))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFieldLocating))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptType_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptType::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptTypeID</LI>
		'''		 <LI>LocatingAttemptType. May be SqlString.Null</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>SortOrder. May be SqlInt32.Null</LI>
		'''		 <LI>AllowMultipleAttempts</LI>
		'''		 <LI>ApplicationLocation. May be SqlString.Null</LI>
		'''		 <LI>ShowURL. May be SqlString.Null</LI>
		'''		 <LI>ShowInSeparateBrowser. May be SqlBoolean.Null</LI>
		'''		 <LI>ShowCaseMembers</LI>
		'''		 <LI>ShowPersonName</LI>
		'''		 <LI>ShowAddresses</LI>
		'''		 <LI>ShowPhones</LI>
		'''		 <LI>ShowEmails</LI>
		'''		 <LI>ShowAddDocument</LI>
		'''		 <LI>ShowChangeRespondent</LI>
		'''		 <LI>ShowDefault. May be SqlString.Null</LI>
		'''		 <LI>ResultDefault. May be SqlInt32.Null</LI>
		'''		 <LI>IsFieldLocating</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptType_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptType", SqlDbType.VarChar, 125, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _locatingAttemptType))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsActive", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isActive))
				cmdToExecute.Parameters.Add(New SqlParameter("@SortOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sortOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@AllowMultipleAttempts", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _allowMultipleAttempts))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApplicationLocation", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _applicationLocation))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowURL", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showURL))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowInSeparateBrowser", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showInSeparateBrowser))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowCaseMembers", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showCaseMembers))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowPersonName", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showPersonName))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowAddresses", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showAddresses))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowPhones", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showPhones))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowEmails", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showEmails))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowAddDocument", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showAddDocument))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowChangeRespondent", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _showChangeRespondent))
				cmdToExecute.Parameters.Add(New SqlParameter("@ShowDefault", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _showDefault))
				cmdToExecute.Parameters.Add(New SqlParameter("@ResultDefault", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _resultDefault))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsFieldLocating", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _isFieldLocating))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptType_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptType::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptType_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptType_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptType::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>LocatingAttemptTypeID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>LocatingAttemptTypeID</LI>
		'''		 <LI>LocatingAttemptType</LI>
		'''		 <LI>IsActive</LI>
		'''		 <LI>SortOrder</LI>
		'''		 <LI>AllowMultipleAttempts</LI>
		'''		 <LI>ApplicationLocation</LI>
		'''		 <LI>ShowURL</LI>
		'''		 <LI>ShowInSeparateBrowser</LI>
		'''		 <LI>ShowCaseMembers</LI>
		'''		 <LI>ShowPersonName</LI>
		'''		 <LI>ShowAddresses</LI>
		'''		 <LI>ShowPhones</LI>
		'''		 <LI>ShowEmails</LI>
		'''		 <LI>ShowAddDocument</LI>
		'''		 <LI>ShowChangeRespondent</LI>
		'''		 <LI>ShowDefault</LI>
		'''		 <LI>ResultDefault</LI>
		'''		 <LI>IsFieldLocating</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptType_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpLocatingAttemptType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LocatingAttemptTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _locatingAttemptTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptType_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptType::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpLocatingAttemptType_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpLocatingAttemptType")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpLocatingAttemptType_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpLocatingAttemptType::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptTypeID]() As SqlInt32
			Get
				Return _locatingAttemptTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _locatingAttemptTypeID.Equals(Value) Then
					If _locatingAttemptTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _locatingAttemptTypeID.Equals(_locatingAttemptTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim locatingAttemptTypeIDTmp As SqlInt32 = Value
				If locatingAttemptTypeIDTmp.IsNull Then
					Throw New NullValueException("LocatingAttemptTypeID", "LocatingAttemptTypeID can't be NULL")
				End If
				_locatingAttemptTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingAttemptType]() As SqlString
			Get
				Return _locatingAttemptType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingAttemptType.IsNull Then
					CurrentValue = _locatingAttemptType.Value
				End If
				If Not _locatingAttemptTypeOld.IsNull Then
					OldValue = _locatingAttemptTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingAttemptType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsActive]() As SqlBoolean
			Get
				Return _isActive
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isActive.Equals(Value) Then
					If _isActiveOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isActive.Equals(_isActiveOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isActive = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SortOrder]() As SqlInt32
			Get
				Return _sortOrder
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sortOrder.Equals(Value) Then
					If _sortOrderOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sortOrder.Equals(_sortOrderOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sortOrder = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [AllowMultipleAttempts]() As SqlBoolean
			Get
				Return _allowMultipleAttempts
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _allowMultipleAttempts.Equals(Value) Then
					If _allowMultipleAttemptsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _allowMultipleAttempts.Equals(_allowMultipleAttemptsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_allowMultipleAttempts = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApplicationLocation]() As SqlString
			Get
				Return _applicationLocation
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _applicationLocation.IsNull Then
					CurrentValue = _applicationLocation.Value
				End If
				If Not _applicationLocationOld.IsNull Then
					OldValue = _applicationLocationOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_applicationLocation = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ShowURL]() As SqlString
			Get
				Return _showURL
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _showURL.IsNull Then
					CurrentValue = _showURL.Value
				End If
				If Not _showURLOld.IsNull Then
					OldValue = _showURLOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_showURL = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowInSeparateBrowser]() As SqlBoolean
			Get
				Return _showInSeparateBrowser
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showInSeparateBrowser.Equals(Value) Then
					If _showInSeparateBrowserOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showInSeparateBrowser.Equals(_showInSeparateBrowserOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showInSeparateBrowser = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ShowCaseMembers]() As SqlBoolean
			Get
				Return _showCaseMembers
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showCaseMembers.Equals(Value) Then
					If _showCaseMembersOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showCaseMembers.Equals(_showCaseMembersOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim showCaseMembersTmp As SqlBoolean = Value
				If showCaseMembersTmp.IsNull Then
					Throw New NullValueException("ShowCaseMembers", "ShowCaseMembers can't be NULL")
				End If
				_showCaseMembers = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowPersonName]() As SqlBoolean
			Get
				Return _showPersonName
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showPersonName.Equals(Value) Then
					If _showPersonNameOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showPersonName.Equals(_showPersonNameOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showPersonName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowAddresses]() As SqlBoolean
			Get
				Return _showAddresses
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showAddresses.Equals(Value) Then
					If _showAddressesOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showAddresses.Equals(_showAddressesOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showAddresses = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowPhones]() As SqlBoolean
			Get
				Return _showPhones
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showPhones.Equals(Value) Then
					If _showPhonesOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showPhones.Equals(_showPhonesOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showPhones = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowEmails]() As SqlBoolean
			Get
				Return _showEmails
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showEmails.Equals(Value) Then
					If _showEmailsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showEmails.Equals(_showEmailsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showEmails = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowAddDocument]() As SqlBoolean
			Get
				Return _showAddDocument
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showAddDocument.Equals(Value) Then
					If _showAddDocumentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showAddDocument.Equals(_showAddDocumentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showAddDocument = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ShowChangeRespondent]() As SqlBoolean
			Get
				Return _showChangeRespondent
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _showChangeRespondent.Equals(Value) Then
					If _showChangeRespondentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _showChangeRespondent.Equals(_showChangeRespondentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_showChangeRespondent = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ShowDefault]() As SqlString
			Get
				Return _showDefault
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _showDefault.IsNull Then
					CurrentValue = _showDefault.Value
				End If
				If Not _showDefaultOld.IsNull Then
					OldValue = _showDefaultOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_showDefault = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [ResultDefault]() As SqlInt32
			Get
				Return _resultDefault
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _resultDefault.Equals(Value) Then
					If _resultDefaultOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _resultDefault.Equals(_resultDefaultOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_resultDefault = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsFieldLocating]() As SqlBoolean
			Get
				Return _isFieldLocating
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isFieldLocating.Equals(Value) Then
					If _isFieldLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isFieldLocating.Equals(_isFieldLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isFieldLocating = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
