' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:37 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpInterviewer.
	''' </summary>

	Public Class TlkpInterviewer
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _jASSPersonID As SqlInt64
		Private _jASSPersonIDOld As SqlInt64

		Private _returnToSOC As SqlBoolean
		Private _returnToSOCOld As SqlBoolean

		Private _lastTransmissionDate As SqlDateTime
		Private _lastTransmissionDateOld As SqlDateTime

		Private _interviewerID As SqlInt32
		Private _interviewerIDOld As SqlInt32
		Private _expectedHoursPerWeek As SqlInt32
		Private _expectedHoursPerWeekOld As SqlInt32
		Private _interviewerSupervisorID As SqlInt32
		Private _interviewerSupervisorIDOld As SqlInt32
		Private _teamID As SqlInt32
		Private _teamIDOld As SqlInt32

		Private _mileageRate As SqlSingle
		Private _mileageRateOld As SqlSingle
		Private _rate As SqlSingle
		Private _rateOld As SqlSingle

		Private _status As SqlString
		Private _statusOld As SqlString
		Private _description As SqlString
		Private _descriptionOld As SqlString
		Private _laptopID As SqlString
		Private _laptopIDOld As SqlString
		Private _altState As SqlString
		Private _altStateOld As SqlString
		Private _altPostalCode As SqlString
		Private _altPostalCodeOld As SqlString
		Private _apptTime As SqlString
		Private _apptTimeOld As SqlString
		Private _altCity As SqlString
		Private _altCityOld As SqlString
		Private _mPRIssuedCell As SqlString
		Private _mPRIssuedCellOld As SqlString
		Private _altAddressLine1 As SqlString
		Private _altAddressLine1Old As SqlString
		Private _altAddressLine2 As SqlString
		Private _altAddressLine2Old As SqlString
		Private _city As SqlString
		Private _cityOld As SqlString
		Private _state As SqlString
		Private _stateOld As SqlString
		Private _postalCode As SqlString
		Private _postalCodeOld As SqlString
		Private _addressLine2 As SqlString
		Private _addressLine2Old As SqlString
		Private _userName As SqlString
		Private _userNameOld As SqlString
		Private _password As SqlString
		Private _passwordOld As SqlString
		Private _addressLine1 As SqlString
		Private _addressLine1Old As SqlString
		Private _lastName As SqlString
		Private _lastNameOld As SqlString
		Private _apptDayofWeek As SqlString
		Private _apptDayofWeekOld As SqlString
		Private _firstName As SqlString
		Private _firstNameOld As SqlString
		Private _email As SqlString
		Private _emailOld As SqlString
		Private _employeeID As SqlString
		Private _employeeIDOld As SqlString
		Private _phone1 As SqlString
		Private _phone1Old As SqlString
		Private _phone2 As SqlString
		Private _phone2Old As SqlString

#End Region

		''' <overloads>
		''' The TlkpInterviewer constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpInterviewer class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpInterviewer class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpInterviewer class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_interviewerID = New SqlInt32(CType(objDataRow("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objDataRow("TeamID") Is System.DBNull.Value Then
				_teamID = SqlInt32.Null
			Else
				_teamID = New SqlInt32(CType(objDataRow("TeamID"), Integer))
			End If
			
			_teamIDOld = _teamID
			
			If objDataRow("InterviewerSupervisorID") Is System.DBNull.Value Then
				_interviewerSupervisorID = SqlInt32.Null
			Else
				_interviewerSupervisorID = New SqlInt32(CType(objDataRow("InterviewerSupervisorID"), Integer))
			End If
			
			_interviewerSupervisorIDOld = _interviewerSupervisorID
			
			If objDataRow("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objDataRow("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objDataRow("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objDataRow("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			_userName = New SqlString(CType(objDataRow("UserName"), String))
			
			_userNameOld = _userName
			
			_password = New SqlString(CType(objDataRow("Password"), String))
			
			_passwordOld = _password
			
			If objDataRow("AddressLine1") Is System.DBNull.Value Then
				_addressLine1 = New SqlString("")
			Else
				_addressLine1 = New SqlString(CType(objDataRow("AddressLine1"), String))
			End If
			
			_addressLine1Old = _addressLine1
			
			If objDataRow("AddressLine2") Is System.DBNull.Value Then
				_addressLine2 = New SqlString("")
			Else
				_addressLine2 = New SqlString(CType(objDataRow("AddressLine2"), String))
			End If
			
			_addressLine2Old = _addressLine2
			
			If objDataRow("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objDataRow("City"), String))
			End If
			
			_cityOld = _city
			
			If objDataRow("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objDataRow("State"), String))
			End If
			
			_stateOld = _state
			
			If objDataRow("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objDataRow("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objDataRow("EmployeeID") Is System.DBNull.Value Then
				_employeeID = New SqlString("")
			Else
				_employeeID = New SqlString(CType(objDataRow("EmployeeID"), String))
			End If
			
			_employeeIDOld = _employeeID
			
			If objDataRow("Phone1") Is System.DBNull.Value Then
				_phone1 = New SqlString("")
			Else
				_phone1 = New SqlString(CType(objDataRow("Phone1"), String))
			End If
			
			_phone1Old = _phone1
			
			If objDataRow("Phone2") Is System.DBNull.Value Then
				_phone2 = New SqlString("")
			Else
				_phone2 = New SqlString(CType(objDataRow("Phone2"), String))
			End If
			
			_phone2Old = _phone2
			
			If objDataRow("Email") Is System.DBNull.Value Then
				_email = New SqlString("")
			Else
				_email = New SqlString(CType(objDataRow("Email"), String))
			End If
			
			_emailOld = _email
			
			If objDataRow("ApptTime") Is System.DBNull.Value Then
				_apptTime = New SqlString("")
			Else
				_apptTime = New SqlString(CType(objDataRow("ApptTime"), String))
			End If
			
			_apptTimeOld = _apptTime
			
			If objDataRow("ApptDayofWeek") Is System.DBNull.Value Then
				_apptDayofWeek = New SqlString("")
			Else
				_apptDayofWeek = New SqlString(CType(objDataRow("ApptDayofWeek"), String))
			End If
			
			_apptDayofWeekOld = _apptDayofWeek
			
			If objDataRow("ExpectedHoursPerWeek") Is System.DBNull.Value Then
				_expectedHoursPerWeek = SqlInt32.Null
			Else
				_expectedHoursPerWeek = New SqlInt32(CType(objDataRow("ExpectedHoursPerWeek"), Integer))
			End If
			
			_expectedHoursPerWeekOld = _expectedHoursPerWeek
			
			If objDataRow("Status") Is System.DBNull.Value Then
				_status = New SqlString("")
			Else
				_status = New SqlString(CType(objDataRow("Status"), String))
			End If
			
			_statusOld = _status
			
			If objDataRow("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objDataRow("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objDataRow("Rate") Is System.DBNull.Value Then
				_rate = SqlSingle.Null
			Else
				_rate = New SqlSingle(CType(objDataRow("Rate"), Single))
			End If
			
			_rateOld = _rate
			
			If objDataRow("MileageRate") Is System.DBNull.Value Then
				_mileageRate = SqlSingle.Null
			Else
				_mileageRate = New SqlSingle(CType(objDataRow("MileageRate"), Single))
			End If
			
			_mileageRateOld = _mileageRate
			
			If objDataRow("LaptopID") Is System.DBNull.Value Then
				_laptopID = New SqlString("")
			Else
				_laptopID = New SqlString(CType(objDataRow("LaptopID"), String))
			End If
			
			_laptopIDOld = _laptopID
			
			If objDataRow("LastTransmissionDate") Is System.DBNull.Value Then
				_lastTransmissionDate = SqlDateTime.Null
			Else
				_lastTransmissionDate = New SqlDateTime(CType(objDataRow("LastTransmissionDate"), Date))
			End If
			
			_lastTransmissionDateOld = _lastTransmissionDate
			
			If objDataRow("JASSPersonID") Is System.DBNull.Value Then
				_jASSPersonID = SqlInt64.Null
			Else
				_jASSPersonID = New SqlInt64(CType(objDataRow("JASSPersonID"), Long))
			End If
			
			_jASSPersonIDOld = _jASSPersonID
			
			If objDataRow("MPRIssuedCell") Is System.DBNull.Value Then
				_mPRIssuedCell = New SqlString("")
			Else
				_mPRIssuedCell = New SqlString(CType(objDataRow("MPRIssuedCell"), String))
			End If
			
			_mPRIssuedCellOld = _mPRIssuedCell
			
			If objDataRow("AltAddressLine1") Is System.DBNull.Value Then
				_altAddressLine1 = New SqlString("")
			Else
				_altAddressLine1 = New SqlString(CType(objDataRow("AltAddressLine1"), String))
			End If
			
			_altAddressLine1Old = _altAddressLine1
			
			If objDataRow("AltAddressLine2") Is System.DBNull.Value Then
				_altAddressLine2 = New SqlString("")
			Else
				_altAddressLine2 = New SqlString(CType(objDataRow("AltAddressLine2"), String))
			End If
			
			_altAddressLine2Old = _altAddressLine2
			
			If objDataRow("AltCity") Is System.DBNull.Value Then
				_altCity = New SqlString("")
			Else
				_altCity = New SqlString(CType(objDataRow("AltCity"), String))
			End If
			
			_altCityOld = _altCity
			
			If objDataRow("AltState") Is System.DBNull.Value Then
				_altState = New SqlString("")
			Else
				_altState = New SqlString(CType(objDataRow("AltState"), String))
			End If
			
			_altStateOld = _altState
			
			If objDataRow("AltPostalCode") Is System.DBNull.Value Then
				_altPostalCode = New SqlString("")
			Else
				_altPostalCode = New SqlString(CType(objDataRow("AltPostalCode"), String))
			End If
			
			_altPostalCodeOld = _altPostalCode
			
			If objDataRow("ReturnToSOC") Is System.DBNull.Value Then
				_returnToSOC = New SqlBoolean(False)
			Else
				_returnToSOC = New SqlBoolean(CType(objDataRow("ReturnToSOC"), Boolean))
			End If
			
			_returnToSOCOld = _returnToSOC
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_interviewerID = New SqlInt32(CType(objSqlDataReader("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objSqlDataReader("TeamID") Is System.DBNull.Value Then
				_teamID = SqlInt32.Null
			Else
				_teamID = New SqlInt32(CType(objSqlDataReader("TeamID"), Integer))
			End If
			
			_teamIDOld = _teamID
			
			If objSqlDataReader("InterviewerSupervisorID") Is System.DBNull.Value Then
				_interviewerSupervisorID = SqlInt32.Null
			Else
				_interviewerSupervisorID = New SqlInt32(CType(objSqlDataReader("InterviewerSupervisorID"), Integer))
			End If
			
			_interviewerSupervisorIDOld = _interviewerSupervisorID
			
			If objSqlDataReader("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objSqlDataReader("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objSqlDataReader("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objSqlDataReader("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			_userName = New SqlString(CType(objSqlDataReader("UserName"), String))
			
			_userNameOld = _userName
			
			_password = New SqlString(CType(objSqlDataReader("Password"), String))
			
			_passwordOld = _password
			
			If objSqlDataReader("AddressLine1") Is System.DBNull.Value Then
				_addressLine1 = New SqlString("")
			Else
				_addressLine1 = New SqlString(CType(objSqlDataReader("AddressLine1"), String))
			End If
			
			_addressLine1Old = _addressLine1
			
			If objSqlDataReader("AddressLine2") Is System.DBNull.Value Then
				_addressLine2 = New SqlString("")
			Else
				_addressLine2 = New SqlString(CType(objSqlDataReader("AddressLine2"), String))
			End If
			
			_addressLine2Old = _addressLine2
			
			If objSqlDataReader("City") Is System.DBNull.Value Then
				_city = New SqlString("")
			Else
				_city = New SqlString(CType(objSqlDataReader("City"), String))
			End If
			
			_cityOld = _city
			
			If objSqlDataReader("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objSqlDataReader("State"), String))
			End If
			
			_stateOld = _state
			
			If objSqlDataReader("PostalCode") Is System.DBNull.Value Then
				_postalCode = New SqlString("")
			Else
				_postalCode = New SqlString(CType(objSqlDataReader("PostalCode"), String))
			End If
			
			_postalCodeOld = _postalCode
			
			If objSqlDataReader("EmployeeID") Is System.DBNull.Value Then
				_employeeID = New SqlString("")
			Else
				_employeeID = New SqlString(CType(objSqlDataReader("EmployeeID"), String))
			End If
			
			_employeeIDOld = _employeeID
			
			If objSqlDataReader("Phone1") Is System.DBNull.Value Then
				_phone1 = New SqlString("")
			Else
				_phone1 = New SqlString(CType(objSqlDataReader("Phone1"), String))
			End If
			
			_phone1Old = _phone1
			
			If objSqlDataReader("Phone2") Is System.DBNull.Value Then
				_phone2 = New SqlString("")
			Else
				_phone2 = New SqlString(CType(objSqlDataReader("Phone2"), String))
			End If
			
			_phone2Old = _phone2
			
			If objSqlDataReader("Email") Is System.DBNull.Value Then
				_email = New SqlString("")
			Else
				_email = New SqlString(CType(objSqlDataReader("Email"), String))
			End If
			
			_emailOld = _email
			
			If objSqlDataReader("ApptTime") Is System.DBNull.Value Then
				_apptTime = New SqlString("")
			Else
				_apptTime = New SqlString(CType(objSqlDataReader("ApptTime"), String))
			End If
			
			_apptTimeOld = _apptTime
			
			If objSqlDataReader("ApptDayofWeek") Is System.DBNull.Value Then
				_apptDayofWeek = New SqlString("")
			Else
				_apptDayofWeek = New SqlString(CType(objSqlDataReader("ApptDayofWeek"), String))
			End If
			
			_apptDayofWeekOld = _apptDayofWeek
			
			If objSqlDataReader("ExpectedHoursPerWeek") Is System.DBNull.Value Then
				_expectedHoursPerWeek = SqlInt32.Null
			Else
				_expectedHoursPerWeek = New SqlInt32(CType(objSqlDataReader("ExpectedHoursPerWeek"), Integer))
			End If
			
			_expectedHoursPerWeekOld = _expectedHoursPerWeek
			
			If objSqlDataReader("Status") Is System.DBNull.Value Then
				_status = New SqlString("")
			Else
				_status = New SqlString(CType(objSqlDataReader("Status"), String))
			End If
			
			_statusOld = _status
			
			If objSqlDataReader("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objSqlDataReader("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objSqlDataReader("Rate") Is System.DBNull.Value Then
				_rate = SqlSingle.Null
			Else
				_rate = New SqlSingle(CType(objSqlDataReader("Rate"), Single))
			End If
			
			_rateOld = _rate
			
			If objSqlDataReader("MileageRate") Is System.DBNull.Value Then
				_mileageRate = SqlSingle.Null
			Else
				_mileageRate = New SqlSingle(CType(objSqlDataReader("MileageRate"), Single))
			End If
			
			_mileageRateOld = _mileageRate
			
			If objSqlDataReader("LaptopID") Is System.DBNull.Value Then
				_laptopID = New SqlString("")
			Else
				_laptopID = New SqlString(CType(objSqlDataReader("LaptopID"), String))
			End If
			
			_laptopIDOld = _laptopID
			
			If objSqlDataReader("LastTransmissionDate") Is System.DBNull.Value Then
				_lastTransmissionDate = SqlDateTime.Null
			Else
				_lastTransmissionDate = New SqlDateTime(CType(objSqlDataReader("LastTransmissionDate"), Date))
			End If
			
			_lastTransmissionDateOld = _lastTransmissionDate
			
			If objSqlDataReader("JASSPersonID") Is System.DBNull.Value Then
				_jASSPersonID = SqlInt64.Null
			Else
				_jASSPersonID = New SqlInt64(CType(objSqlDataReader("JASSPersonID"), Long))
			End If
			
			_jASSPersonIDOld = _jASSPersonID
			
			If objSqlDataReader("MPRIssuedCell") Is System.DBNull.Value Then
				_mPRIssuedCell = New SqlString("")
			Else
				_mPRIssuedCell = New SqlString(CType(objSqlDataReader("MPRIssuedCell"), String))
			End If
			
			_mPRIssuedCellOld = _mPRIssuedCell
			
			If objSqlDataReader("AltAddressLine1") Is System.DBNull.Value Then
				_altAddressLine1 = New SqlString("")
			Else
				_altAddressLine1 = New SqlString(CType(objSqlDataReader("AltAddressLine1"), String))
			End If
			
			_altAddressLine1Old = _altAddressLine1
			
			If objSqlDataReader("AltAddressLine2") Is System.DBNull.Value Then
				_altAddressLine2 = New SqlString("")
			Else
				_altAddressLine2 = New SqlString(CType(objSqlDataReader("AltAddressLine2"), String))
			End If
			
			_altAddressLine2Old = _altAddressLine2
			
			If objSqlDataReader("AltCity") Is System.DBNull.Value Then
				_altCity = New SqlString("")
			Else
				_altCity = New SqlString(CType(objSqlDataReader("AltCity"), String))
			End If
			
			_altCityOld = _altCity
			
			If objSqlDataReader("AltState") Is System.DBNull.Value Then
				_altState = New SqlString("")
			Else
				_altState = New SqlString(CType(objSqlDataReader("AltState"), String))
			End If
			
			_altStateOld = _altState
			
			If objSqlDataReader("AltPostalCode") Is System.DBNull.Value Then
				_altPostalCode = New SqlString("")
			Else
				_altPostalCode = New SqlString(CType(objSqlDataReader("AltPostalCode"), String))
			End If
			
			_altPostalCodeOld = _altPostalCode
			
			If objSqlDataReader("ReturnToSOC") Is System.DBNull.Value Then
				_returnToSOC = New SqlBoolean(False)
			Else
				_returnToSOC = New SqlBoolean(CType(objSqlDataReader("ReturnToSOC"), Boolean))
			End If
			
			_returnToSOCOld = _returnToSOC
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			_firstName = New SqlString("")
			_firstNameOld = _firstName
			
			_lastName = New SqlString("")
			_lastNameOld = _lastName
			
			_userName = New SqlString("")
			_userNameOld = _userName
			
			_password = New SqlString("")
			_passwordOld = _password
			
			_addressLine1 = New SqlString("")
			_addressLine1Old = _addressLine1
			
			_addressLine2 = New SqlString("")
			_addressLine2Old = _addressLine2
			
			_city = New SqlString("")
			_cityOld = _city
			
			_state = New SqlString("")
			_stateOld = _state
			
			_postalCode = New SqlString("")
			_postalCodeOld = _postalCode
			
			_employeeID = New SqlString("")
			_employeeIDOld = _employeeID
			
			_phone1 = New SqlString("")
			_phone1Old = _phone1
			
			_phone2 = New SqlString("")
			_phone2Old = _phone2
			
			_email = New SqlString("")
			_emailOld = _email
			
			_apptTime = New SqlString("")
			_apptTimeOld = _apptTime
			
			_apptDayofWeek = New SqlString("")
			_apptDayofWeekOld = _apptDayofWeek
			
			
			_status = New SqlString("")
			_statusOld = _status
			
			_description = New SqlString("")
			_descriptionOld = _description
			
			
			
			_laptopID = New SqlString("")
			_laptopIDOld = _laptopID
			
			
			
			_mPRIssuedCell = New SqlString("")
			_mPRIssuedCellOld = _mPRIssuedCell
			
			_altAddressLine1 = New SqlString("")
			_altAddressLine1Old = _altAddressLine1
			
			_altAddressLine2 = New SqlString("")
			_altAddressLine2Old = _altAddressLine2
			
			_altCity = New SqlString("")
			_altCityOld = _altCity
			
			_altState = New SqlString("")
			_altStateOld = _altState
			
			_altPostalCode = New SqlString("")
			_altPostalCodeOld = _altPostalCode
			
			_returnToSOC = New SqlBoolean(False)
			_returnToSOCOld = _returnToSOC
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_interviewerID = _interviewerIDOld
			
			_teamID = _teamIDOld
			
			_interviewerSupervisorID = _interviewerSupervisorIDOld
			
			_firstName = _firstNameOld
			
			_lastName = _lastNameOld
			
			_userName = _userNameOld
			
			_password = _passwordOld
			
			_addressLine1 = _addressLine1Old
			
			_addressLine2 = _addressLine2Old
			
			_city = _cityOld
			
			_state = _stateOld
			
			_postalCode = _postalCodeOld
			
			_employeeID = _employeeIDOld
			
			_phone1 = _phone1Old
			
			_phone2 = _phone2Old
			
			_email = _emailOld
			
			_apptTime = _apptTimeOld
			
			_apptDayofWeek = _apptDayofWeekOld
			
			_expectedHoursPerWeek = _expectedHoursPerWeekOld
			
			_status = _statusOld
			
			_description = _descriptionOld
			
			_rate = _rateOld
			
			_mileageRate = _mileageRateOld
			
			_laptopID = _laptopIDOld
			
			_lastTransmissionDate = _lastTransmissionDateOld
			
			_jASSPersonID = _jASSPersonIDOld
			
			_mPRIssuedCell = _mPRIssuedCellOld
			
			_altAddressLine1 = _altAddressLine1Old
			
			_altAddressLine2 = _altAddressLine2Old
			
			_altCity = _altCityOld
			
			_altState = _altStateOld
			
			_altPostalCode = _altPostalCodeOld
			
			_returnToSOC = _returnToSOCOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>TeamID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>FirstName. May be SqlString.Null</LI>
		'''		 <LI>LastName. May be SqlString.Null</LI>
		'''		 <LI>UserName</LI>
		'''		 <LI>Password</LI>
		'''		 <LI>AddressLine1. May be SqlString.Null</LI>
		'''		 <LI>AddressLine2. May be SqlString.Null</LI>
		'''		 <LI>City. May be SqlString.Null</LI>
		'''		 <LI>State. May be SqlString.Null</LI>
		'''		 <LI>PostalCode. May be SqlString.Null</LI>
		'''		 <LI>EmployeeID. May be SqlString.Null</LI>
		'''		 <LI>Phone1. May be SqlString.Null</LI>
		'''		 <LI>Phone2. May be SqlString.Null</LI>
		'''		 <LI>Email. May be SqlString.Null</LI>
		'''		 <LI>ApptTime. May be SqlString.Null</LI>
		'''		 <LI>ApptDayofWeek. May be SqlString.Null</LI>
		'''		 <LI>ExpectedHoursPerWeek. May be SqlInt32.Null</LI>
		'''		 <LI>Status. May be SqlString.Null</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>Rate. May be SqlSingle.Null</LI>
		'''		 <LI>MileageRate. May be SqlSingle.Null</LI>
		'''		 <LI>LaptopID. May be SqlString.Null</LI>
		'''		 <LI>LastTransmissionDate. May be SqlDateTime.Null</LI>
		'''		 <LI>JASSPersonID. May be SqlInt64.Null</LI>
		'''		 <LI>MPRIssuedCell. May be SqlString.Null</LI>
		'''		 <LI>AltAddressLine1. May be SqlString.Null</LI>
		'''		 <LI>AltAddressLine2. May be SqlString.Null</LI>
		'''		 <LI>AltCity. May be SqlString.Null</LI>
		'''		 <LI>AltState. May be SqlString.Null</LI>
		'''		 <LI>AltPostalCode. May be SqlString.Null</LI>
		'''		 <LI>ReturnToSOC. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@TeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _teamID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(New SqlParameter("@FirstName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _firstName))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastName))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Password", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _password))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressLine1", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _addressLine1))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressLine2", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _addressLine2))
				cmdToExecute.Parameters.Add(New SqlParameter("@City", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _city))
				cmdToExecute.Parameters.Add(New SqlParameter("@State", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _state))
				cmdToExecute.Parameters.Add(New SqlParameter("@PostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _postalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmployeeID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _employeeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Phone1", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phone1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Phone2", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phone2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Email", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _email))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApptTime", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _apptTime))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApptDayofWeek", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _apptDayofWeek))
				cmdToExecute.Parameters.Add(New SqlParameter("@ExpectedHoursPerWeek", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _expectedHoursPerWeek))
				cmdToExecute.Parameters.Add(New SqlParameter("@Status", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _status))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@Rate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _rate))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageRate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileageRate))
				cmdToExecute.Parameters.Add(New SqlParameter("@LaptopID", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _laptopID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastTransmissionDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastTransmissionDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@JASSPersonID", SqlDbType.BigInt, 8, ParameterDirection.Input, True, 19, 0, "", DataRowVersion.Proposed, _jASSPersonID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRIssuedCell", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRIssuedCell))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltAddressLine1", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altAddressLine1))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltAddressLine2", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altAddressLine2))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltCity", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altCity))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltState", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altState))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltPostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altPostalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnToSOC", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnToSOC))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_interviewerID = CType(cmdToExecute.Parameters.Item("@InterviewerID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>TeamID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>FirstName. May be SqlString.Null</LI>
		'''		 <LI>LastName. May be SqlString.Null</LI>
		'''		 <LI>UserName</LI>
		'''		 <LI>Password</LI>
		'''		 <LI>AddressLine1. May be SqlString.Null</LI>
		'''		 <LI>AddressLine2. May be SqlString.Null</LI>
		'''		 <LI>City. May be SqlString.Null</LI>
		'''		 <LI>State. May be SqlString.Null</LI>
		'''		 <LI>PostalCode. May be SqlString.Null</LI>
		'''		 <LI>EmployeeID. May be SqlString.Null</LI>
		'''		 <LI>Phone1. May be SqlString.Null</LI>
		'''		 <LI>Phone2. May be SqlString.Null</LI>
		'''		 <LI>Email. May be SqlString.Null</LI>
		'''		 <LI>ApptTime. May be SqlString.Null</LI>
		'''		 <LI>ApptDayofWeek. May be SqlString.Null</LI>
		'''		 <LI>ExpectedHoursPerWeek. May be SqlInt32.Null</LI>
		'''		 <LI>Status. May be SqlString.Null</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>Rate. May be SqlSingle.Null</LI>
		'''		 <LI>MileageRate. May be SqlSingle.Null</LI>
		'''		 <LI>LaptopID. May be SqlString.Null</LI>
		'''		 <LI>LastTransmissionDate. May be SqlDateTime.Null</LI>
		'''		 <LI>JASSPersonID. May be SqlInt64.Null</LI>
		'''		 <LI>MPRIssuedCell. May be SqlString.Null</LI>
		'''		 <LI>AltAddressLine1. May be SqlString.Null</LI>
		'''		 <LI>AltAddressLine2. May be SqlString.Null</LI>
		'''		 <LI>AltCity. May be SqlString.Null</LI>
		'''		 <LI>AltState. May be SqlString.Null</LI>
		'''		 <LI>AltPostalCode. May be SqlString.Null</LI>
		'''		 <LI>ReturnToSOC. May be SqlBoolean.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@TeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _teamID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(New SqlParameter("@FirstName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _firstName))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastName))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Password", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _password))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressLine1", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _addressLine1))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressLine2", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _addressLine2))
				cmdToExecute.Parameters.Add(New SqlParameter("@City", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _city))
				cmdToExecute.Parameters.Add(New SqlParameter("@State", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _state))
				cmdToExecute.Parameters.Add(New SqlParameter("@PostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _postalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmployeeID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _employeeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Phone1", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phone1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Phone2", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _phone2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Email", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _email))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApptTime", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _apptTime))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApptDayofWeek", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _apptDayofWeek))
				cmdToExecute.Parameters.Add(New SqlParameter("@ExpectedHoursPerWeek", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _expectedHoursPerWeek))
				cmdToExecute.Parameters.Add(New SqlParameter("@Status", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _status))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@Rate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _rate))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageRate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileageRate))
				cmdToExecute.Parameters.Add(New SqlParameter("@LaptopID", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _laptopID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastTransmissionDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastTransmissionDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@JASSPersonID", SqlDbType.BigInt, 8, ParameterDirection.Input, True, 19, 0, "", DataRowVersion.Proposed, _jASSPersonID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRIssuedCell", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRIssuedCell))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltAddressLine1", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altAddressLine1))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltAddressLine2", SqlDbType.VarChar, 40, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altAddressLine2))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltCity", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altCity))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltState", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altState))
				cmdToExecute.Parameters.Add(New SqlParameter("@AltPostalCode", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _altPostalCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnToSOC", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnToSOC))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'TeamID.
		''' It will reset the field 'TeamID' in
		''' all rows which have as value for this field the value as set in property 'TeamIDOld' to 
		''' the value as set in property 'TeamID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>TeamID. May be SqlInt32.Null</LI>
		'''		 <LI>TeamIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWTeamIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_UpdateAllWTeamIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@TeamID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _teamID))
				cmdToExecute.Parameters.Add(new SqlParameter("@TeamIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _teamIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_UpdateAllWTeamIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::UpdateAllWTeamIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerSupervisorID.
		''' It will reset the field 'InterviewerSupervisorID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerSupervisorIDOld' to 
		''' the value as set in property 'InterviewerSupervisorID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		'''		 <LI>InterviewerSupervisorIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerSupervisorIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_UpdateAllWInterviewerSupervisorIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_UpdateAllWInterviewerSupervisorIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::UpdateAllWInterviewerSupervisorIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>TeamID</LI>
		'''		 <LI>InterviewerSupervisorID</LI>
		'''		 <LI>FirstName</LI>
		'''		 <LI>LastName</LI>
		'''		 <LI>UserName</LI>
		'''		 <LI>Password</LI>
		'''		 <LI>AddressLine1</LI>
		'''		 <LI>AddressLine2</LI>
		'''		 <LI>City</LI>
		'''		 <LI>State</LI>
		'''		 <LI>PostalCode</LI>
		'''		 <LI>EmployeeID</LI>
		'''		 <LI>Phone1</LI>
		'''		 <LI>Phone2</LI>
		'''		 <LI>Email</LI>
		'''		 <LI>ApptTime</LI>
		'''		 <LI>ApptDayofWeek</LI>
		'''		 <LI>ExpectedHoursPerWeek</LI>
		'''		 <LI>Status</LI>
		'''		 <LI>Description</LI>
		'''		 <LI>Rate</LI>
		'''		 <LI>MileageRate</LI>
		'''		 <LI>LaptopID</LI>
		'''		 <LI>LastTransmissionDate</LI>
		'''		 <LI>JASSPersonID</LI>
		'''		 <LI>MPRIssuedCell</LI>
		'''		 <LI>AltAddressLine1</LI>
		'''		 <LI>AltAddressLine2</LI>
		'''		 <LI>AltCity</LI>
		'''		 <LI>AltState</LI>
		'''		 <LI>AltPostalCode</LI>
		'''		 <LI>ReturnToSOC</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInterviewer")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInterviewer")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'TeamID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>TeamID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWTeamIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_SelectAllWTeamIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInterviewer")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@TeamID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _teamID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_SelectAllWTeamIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::SelectAllWTeamIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerSupervisorID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerSupervisorID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerSupervisorIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpInterviewer_SelectAllWInterviewerSupervisorIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpInterviewer")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerSupervisorID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _interviewerSupervisorID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpInterviewer_SelectAllWInterviewerSupervisorIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpInterviewer::SelectAllWInterviewerSupervisorIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerID]() As SqlInt32
			Get
				Return _interviewerID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerID.Equals(Value) Then
					If _interviewerIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerID.Equals(_interviewerIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerIDTmp As SqlInt32 = Value
				If interviewerIDTmp.IsNull Then
					Throw New NullValueException("InterviewerID", "InterviewerID can't be NULL")
				End If
				_interviewerID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TeamID]() As SqlInt32
			Get
				Return _teamID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _teamID.Equals(Value) Then
					If _teamIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _teamID.Equals(_teamIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_teamID = Value
			End Set
		End Property
		Protected Property [TeamIDOld]() As SqlInt32
			Get
				Return _teamIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_teamIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerSupervisorID]() As SqlInt32
			Get
				Return _interviewerSupervisorID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerSupervisorID.Equals(Value) Then
					If _interviewerSupervisorIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerSupervisorID.Equals(_interviewerSupervisorIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_interviewerSupervisorID = Value
			End Set
		End Property
		Protected Property [InterviewerSupervisorIDOld]() As SqlInt32
			Get
				Return _interviewerSupervisorIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_interviewerSupervisorIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FirstName]() As SqlString
			Get
				Return _firstName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _firstName.IsNull Then
					CurrentValue = _firstName.Value
				End If
				If Not _firstNameOld.IsNull Then
					OldValue = _firstNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_firstName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastName]() As SqlString
			Get
				Return _lastName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastName.IsNull Then
					CurrentValue = _lastName.Value
				End If
				If Not _lastNameOld.IsNull Then
					OldValue = _lastNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [UserName]() As SqlString
			Get
				Return _userName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _userName.IsNull Then
					CurrentValue = _userName.Value
				End If
				If Not _userNameOld.IsNull Then
					OldValue = _userNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim userNameTmp As SqlString = Value
				If userNameTmp.IsNull Then
					Throw New NullValueException("UserName", "UserName can't be NULL")
				End If
				_userName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Password]() As SqlString
			Get
				Return _password
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _password.IsNull Then
					CurrentValue = _password.Value
				End If
				If Not _passwordOld.IsNull Then
					OldValue = _passwordOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim passwordTmp As SqlString = Value
				If passwordTmp.IsNull Then
					Throw New NullValueException("Password", "Password can't be NULL")
				End If
				_password = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressLine1]() As SqlString
			Get
				Return _addressLine1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _addressLine1.IsNull Then
					CurrentValue = _addressLine1.Value
				End If
				If Not _addressLine1Old.IsNull Then
					OldValue = _addressLine1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_addressLine1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressLine2]() As SqlString
			Get
				Return _addressLine2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _addressLine2.IsNull Then
					CurrentValue = _addressLine2.Value
				End If
				If Not _addressLine2Old.IsNull Then
					OldValue = _addressLine2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_addressLine2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [City]() As SqlString
			Get
				Return _city
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _city.IsNull Then
					CurrentValue = _city.Value
				End If
				If Not _cityOld.IsNull Then
					OldValue = _cityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_city = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [State]() As SqlString
			Get
				Return _state
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _state.IsNull Then
					CurrentValue = _state.Value
				End If
				If Not _stateOld.IsNull Then
					OldValue = _stateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_state = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PostalCode]() As SqlString
			Get
				Return _postalCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _postalCode.IsNull Then
					CurrentValue = _postalCode.Value
				End If
				If Not _postalCodeOld.IsNull Then
					OldValue = _postalCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_postalCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EmployeeID]() As SqlString
			Get
				Return _employeeID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _employeeID.IsNull Then
					CurrentValue = _employeeID.Value
				End If
				If Not _employeeIDOld.IsNull Then
					OldValue = _employeeIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_employeeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Phone1]() As SqlString
			Get
				Return _phone1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _phone1.IsNull Then
					CurrentValue = _phone1.Value
				End If
				If Not _phone1Old.IsNull Then
					OldValue = _phone1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_phone1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Phone2]() As SqlString
			Get
				Return _phone2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _phone2.IsNull Then
					CurrentValue = _phone2.Value
				End If
				If Not _phone2Old.IsNull Then
					OldValue = _phone2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_phone2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Email]() As SqlString
			Get
				Return _email
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _email.IsNull Then
					CurrentValue = _email.Value
				End If
				If Not _emailOld.IsNull Then
					OldValue = _emailOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_email = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApptTime]() As SqlString
			Get
				Return _apptTime
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _apptTime.IsNull Then
					CurrentValue = _apptTime.Value
				End If
				If Not _apptTimeOld.IsNull Then
					OldValue = _apptTimeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_apptTime = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApptDayofWeek]() As SqlString
			Get
				Return _apptDayofWeek
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _apptDayofWeek.IsNull Then
					CurrentValue = _apptDayofWeek.Value
				End If
				If Not _apptDayofWeekOld.IsNull Then
					OldValue = _apptDayofWeekOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_apptDayofWeek = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ExpectedHoursPerWeek]() As SqlInt32
			Get
				Return _expectedHoursPerWeek
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _expectedHoursPerWeek.Equals(Value) Then
					If _expectedHoursPerWeekOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _expectedHoursPerWeek.Equals(_expectedHoursPerWeekOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_expectedHoursPerWeek = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Status]() As SqlString
			Get
				Return _status
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _status.IsNull Then
					CurrentValue = _status.Value
				End If
				If Not _statusOld.IsNull Then
					OldValue = _statusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_status = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Description]() As SqlString
			Get
				Return _description
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _description.IsNull Then
					CurrentValue = _description.Value
				End If
				If Not _descriptionOld.IsNull Then
					OldValue = _descriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_description = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Rate]() As SqlSingle
			Get
				Return _rate
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _rate.Equals(Value) Then
					If _rateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _rate.Equals(_rateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_rate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0.375))", _
		IsTimeStamp:=False)> _
		Public Property [MileageRate]() As SqlSingle
			Get
				Return _mileageRate
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _mileageRate.Equals(Value) Then
					If _mileageRateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mileageRate.Equals(_mileageRateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mileageRate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LaptopID]() As SqlString
			Get
				Return _laptopID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _laptopID.IsNull Then
					CurrentValue = _laptopID.Value
				End If
				If Not _laptopIDOld.IsNull Then
					OldValue = _laptopIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_laptopID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastTransmissionDate]() As SqlDateTime
			Get
				Return _lastTransmissionDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastTransmissionDate.Equals(Value) Then
					If _lastTransmissionDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastTransmissionDate.Equals(_lastTransmissionDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastTransmissionDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [JASSPersonID]() As SqlInt64
			Get
				Return _jASSPersonID
			End Get
			Set(ByVal Value As SqlInt64)
				If Not _jASSPersonID.Equals(Value) Then
					If _jASSPersonIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _jASSPersonID.Equals(_jASSPersonIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_jASSPersonID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRIssuedCell]() As SqlString
			Get
				Return _mPRIssuedCell
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRIssuedCell.IsNull Then
					CurrentValue = _mPRIssuedCell.Value
				End If
				If Not _mPRIssuedCellOld.IsNull Then
					OldValue = _mPRIssuedCellOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRIssuedCell = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltAddressLine1]() As SqlString
			Get
				Return _altAddressLine1
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altAddressLine1.IsNull Then
					CurrentValue = _altAddressLine1.Value
				End If
				If Not _altAddressLine1Old.IsNull Then
					OldValue = _altAddressLine1Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altAddressLine1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltAddressLine2]() As SqlString
			Get
				Return _altAddressLine2
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altAddressLine2.IsNull Then
					CurrentValue = _altAddressLine2.Value
				End If
				If Not _altAddressLine2Old.IsNull Then
					OldValue = _altAddressLine2Old.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altAddressLine2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltCity]() As SqlString
			Get
				Return _altCity
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altCity.IsNull Then
					CurrentValue = _altCity.Value
				End If
				If Not _altCityOld.IsNull Then
					OldValue = _altCityOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altCity = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltState]() As SqlString
			Get
				Return _altState
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altState.IsNull Then
					CurrentValue = _altState.Value
				End If
				If Not _altStateOld.IsNull Then
					OldValue = _altStateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altState = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AltPostalCode]() As SqlString
			Get
				Return _altPostalCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _altPostalCode.IsNull Then
					CurrentValue = _altPostalCode.Value
				End If
				If Not _altPostalCodeOld.IsNull Then
					OldValue = _altPostalCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_altPostalCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReturnToSOC]() As SqlBoolean
			Get
				Return _returnToSOC
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _returnToSOC.Equals(Value) Then
					If _returnToSOCOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _returnToSOC.Equals(_returnToSOCOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_returnToSOC = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
