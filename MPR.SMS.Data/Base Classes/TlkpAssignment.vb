' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:35 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tlkpAssignment.
	''' </summary>

	Public Class TlkpAssignment
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _applicableStratum1 As SqlInt32
		Private _applicableStratum1Old As SqlInt32
		Private _applicableStratum2 As SqlInt32
		Private _applicableStratum2Old As SqlInt32
		Private _applicableStratum3 As SqlInt32
		Private _applicableStratum3Old As SqlInt32
		Private _assignmentID As SqlInt32
		Private _assignmentIDOld As SqlInt32

		Private _description As SqlString
		Private _descriptionOld As SqlString
		Private _code As SqlString
		Private _codeOld As SqlString

#End Region

		''' <overloads>
		''' The TlkpAssignment constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TlkpAssignment class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpAssignment class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TlkpAssignment class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_assignmentID = New SqlInt32(CType(objDataRow("AssignmentID"), Integer))
			
			_assignmentIDOld = _assignmentID
			
			_code = New SqlString(CType(objDataRow("Code"), String))
			
			_codeOld = _code
			
			If objDataRow("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objDataRow("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objDataRow("ApplicableStratum1") Is System.DBNull.Value Then
				_applicableStratum1 = SqlInt32.Null
			Else
				_applicableStratum1 = New SqlInt32(CType(objDataRow("ApplicableStratum1"), Integer))
			End If
			
			_applicableStratum1Old = _applicableStratum1
			
			If objDataRow("ApplicableStratum2") Is System.DBNull.Value Then
				_applicableStratum2 = SqlInt32.Null
			Else
				_applicableStratum2 = New SqlInt32(CType(objDataRow("ApplicableStratum2"), Integer))
			End If
			
			_applicableStratum2Old = _applicableStratum2
			
			If objDataRow("ApplicableStratum3") Is System.DBNull.Value Then
				_applicableStratum3 = SqlInt32.Null
			Else
				_applicableStratum3 = New SqlInt32(CType(objDataRow("ApplicableStratum3"), Integer))
			End If
			
			_applicableStratum3Old = _applicableStratum3
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_assignmentID = New SqlInt32(CType(objSqlDataReader("AssignmentID"), Integer))
			
			_assignmentIDOld = _assignmentID
			
			_code = New SqlString(CType(objSqlDataReader("Code"), String))
			
			_codeOld = _code
			
			If objSqlDataReader("Description") Is System.DBNull.Value Then
				_description = New SqlString("")
			Else
				_description = New SqlString(CType(objSqlDataReader("Description"), String))
			End If
			
			_descriptionOld = _description
			
			If objSqlDataReader("ApplicableStratum1") Is System.DBNull.Value Then
				_applicableStratum1 = SqlInt32.Null
			Else
				_applicableStratum1 = New SqlInt32(CType(objSqlDataReader("ApplicableStratum1"), Integer))
			End If
			
			_applicableStratum1Old = _applicableStratum1
			
			If objSqlDataReader("ApplicableStratum2") Is System.DBNull.Value Then
				_applicableStratum2 = SqlInt32.Null
			Else
				_applicableStratum2 = New SqlInt32(CType(objSqlDataReader("ApplicableStratum2"), Integer))
			End If
			
			_applicableStratum2Old = _applicableStratum2
			
			If objSqlDataReader("ApplicableStratum3") Is System.DBNull.Value Then
				_applicableStratum3 = SqlInt32.Null
			Else
				_applicableStratum3 = New SqlInt32(CType(objSqlDataReader("ApplicableStratum3"), Integer))
			End If
			
			_applicableStratum3Old = _applicableStratum3
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_code = New SqlString("")
			_codeOld = _code
			
			_description = New SqlString("")
			_descriptionOld = _description
			
			
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_assignmentID = _assignmentIDOld
			
			_code = _codeOld
			
			_description = _descriptionOld
			
			_applicableStratum1 = _applicableStratum1Old
			
			_applicableStratum2 = _applicableStratum2Old
			
			_applicableStratum3 = _applicableStratum3Old
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>AssignmentID</LI>
		'''		 <LI>Code</LI>
		'''		 <LI>Description. May be SqlString.Null</LI>
		'''		 <LI>ApplicableStratum1. May be SqlInt32.Null</LI>
		'''		 <LI>ApplicableStratum2. May be SqlInt32.Null</LI>
		'''		 <LI>ApplicableStratum3. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpAssignment_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@AssignmentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _assignmentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Code", SqlDbType.VarChar, 3, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _code))
				cmdToExecute.Parameters.Add(New SqlParameter("@Description", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _description))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApplicableStratum1", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _applicableStratum1))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApplicableStratum2", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _applicableStratum2))
				cmdToExecute.Parameters.Add(New SqlParameter("@ApplicableStratum3", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _applicableStratum3))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpAssignment_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpAssignment::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tlkpAssignment_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tlkpAssignment")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tlkpAssignment_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TlkpAssignment::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AssignmentID]() As SqlInt32
			Get
				Return _assignmentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _assignmentID.Equals(Value) Then
					If _assignmentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _assignmentID.Equals(_assignmentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim assignmentIDTmp As SqlInt32 = Value
				If assignmentIDTmp.IsNull Then
					Throw New NullValueException("AssignmentID", "AssignmentID can't be NULL")
				End If
				_assignmentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Code]() As SqlString
			Get
				Return _code
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _code.IsNull Then
					CurrentValue = _code.Value
				End If
				If Not _codeOld.IsNull Then
					OldValue = _codeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim codeTmp As SqlString = Value
				If codeTmp.IsNull Then
					Throw New NullValueException("Code", "Code can't be NULL")
				End If
				_code = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Description]() As SqlString
			Get
				Return _description
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _description.IsNull Then
					CurrentValue = _description.Value
				End If
				If Not _descriptionOld.IsNull Then
					OldValue = _descriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_description = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApplicableStratum1]() As SqlInt32
			Get
				Return _applicableStratum1
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _applicableStratum1.Equals(Value) Then
					If _applicableStratum1Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _applicableStratum1.Equals(_applicableStratum1Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_applicableStratum1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApplicableStratum2]() As SqlInt32
			Get
				Return _applicableStratum2
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _applicableStratum2.Equals(Value) Then
					If _applicableStratum2Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _applicableStratum2.Equals(_applicableStratum2Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_applicableStratum2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ApplicableStratum3]() As SqlInt32
			Get
				Return _applicableStratum3
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _applicableStratum3.Equals(Value) Then
					If _applicableStratum3Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _applicableStratum3.Equals(_applicableStratum3Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_applicableStratum3 = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
