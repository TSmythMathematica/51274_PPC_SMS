' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:41 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the view named vwLocatingSelectionDetail.
	''' </summary>

	Public Class VwLocatingSelectionDetail
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _dateSentToLocating As SqlDateTime
		Private _dateSentToLocatingOld As SqlDateTime
		Private _statusDate As SqlDateTime
		Private _statusDateOld As SqlDateTime

		Private _totalHoursInLocating As SqlDouble
		Private _totalHoursInLocatingOld As SqlDouble

		Private _timesInLocating As SqlInt32
		Private _timesInLocatingOld As SqlInt32
		Private _daysInLocating As SqlInt32
		Private _daysInLocatingOld As SqlInt32
		Private _numAttempts As SqlInt32
		Private _numAttemptsOld As SqlInt32
		Private _totalSecondsInLocating As SqlInt32
		Private _totalSecondsInLocatingOld As SqlInt32
		Private _priority As SqlInt32
		Private _priorityOld As SqlInt32
		Private _timesTouched As SqlInt32
		Private _timesTouchedOld As SqlInt32

		Private _timeZone As SqlString
		Private _timeZoneOld As SqlString
		Private _site As SqlString
		Private _siteOld As SqlString
		Private _accurint As SqlString
		Private _accurintOld As SqlString
		Private _timeZoneCode As SqlString
		Private _timeZoneCodeOld As SqlString
		Private _userName As SqlString
		Private _userNameOld As SqlString
		Private _state As SqlString
		Private _stateOld As SqlString
		Private _locatingStatus As SqlString
		Private _locatingStatusOld As SqlString
		Private _name As SqlString
		Private _nameOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _language As SqlString
		Private _languageOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString

#End Region

		''' <overloads>
		''' The VwLocatingSelectionDetail constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the VwLocatingSelectionDetail class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwLocatingSelectionDetail class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the VwLocatingSelectionDetail class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			_priority = New SqlInt32(CType(objDataRow("Priority"), Integer))
			
			_priorityOld = _priority
			
			If objDataRow("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objDataRow("Name"), String))
			End If
			
			_nameOld = _name
			
			If objDataRow("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objDataRow("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objDataRow("StatusDate") Is System.DBNull.Value Then
				_statusDate = SqlDateTime.Null
			Else
				_statusDate = New SqlDateTime(CType(objDataRow("StatusDate"), Date))
			End If
			
			_statusDateOld = _statusDate
			
			If objDataRow("DateSentToLocating") Is System.DBNull.Value Then
				_dateSentToLocating = SqlDateTime.Null
			Else
				_dateSentToLocating = New SqlDateTime(CType(objDataRow("DateSentToLocating"), Date))
			End If
			
			_dateSentToLocatingOld = _dateSentToLocating
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("DaysInLocating") Is System.DBNull.Value Then
				_daysInLocating = SqlInt32.Null
			Else
				_daysInLocating = New SqlInt32(CType(objDataRow("DaysInLocating"), Integer))
			End If
			
			_daysInLocatingOld = _daysInLocating
			
			_timesInLocating = New SqlInt32(CType(objDataRow("TimesInLocating"), Integer))
			
			_timesInLocatingOld = _timesInLocating
			
			_timesTouched = New SqlInt32(CType(objDataRow("TimesTouched"), Integer))
			
			_timesTouchedOld = _timesTouched
			
			If objDataRow("NumAttempts") Is System.DBNull.Value Then
				_numAttempts = SqlInt32.Null
			Else
				_numAttempts = New SqlInt32(CType(objDataRow("NumAttempts"), Integer))
			End If
			
			_numAttemptsOld = _numAttempts
			
			_totalSecondsInLocating = New SqlInt32(CType(objDataRow("TotalSecondsInLocating"), Integer))
			
			_totalSecondsInLocatingOld = _totalSecondsInLocating
			
			If objDataRow("TotalHoursInLocating") Is System.DBNull.Value Then
				_totalHoursInLocating = SqlDouble.Null
			Else
				_totalHoursInLocating = New SqlDouble(CType(objDataRow("TotalHoursInLocating"), Double))
			End If
			
			_totalHoursInLocatingOld = _totalHoursInLocating
			
			If objDataRow("Language") Is System.DBNull.Value Then
				_language = New SqlString("")
			Else
				_language = New SqlString(CType(objDataRow("Language"), String))
			End If
			
			_languageOld = _language
			
			If objDataRow("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objDataRow("State"), String))
			End If
			
			_stateOld = _state
			
			If objDataRow("TimeZone") Is System.DBNull.Value Then
				_timeZone = New SqlString("")
			Else
				_timeZone = New SqlString(CType(objDataRow("TimeZone"), String))
			End If
			
			_timeZoneOld = _timeZone
			
			If objDataRow("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objDataRow("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objDataRow("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objDataRow("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objDataRow("Site") Is System.DBNull.Value Then
				_site = New SqlString("")
			Else
				_site = New SqlString(CType(objDataRow("Site"), String))
			End If
			
			_siteOld = _site
			
			_accurint = New SqlString(CType(objDataRow("Accurint"), String))
			
			_accurintOld = _accurint
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			_priority = New SqlInt32(CType(objSqlDataReader("Priority"), Integer))
			
			_priorityOld = _priority
			
			If objSqlDataReader("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objSqlDataReader("Name"), String))
			End If
			
			_nameOld = _name
			
			If objSqlDataReader("LocatingStatus") Is System.DBNull.Value Then
				_locatingStatus = New SqlString("")
			Else
				_locatingStatus = New SqlString(CType(objSqlDataReader("LocatingStatus"), String))
			End If
			
			_locatingStatusOld = _locatingStatus
			
			If objSqlDataReader("StatusDate") Is System.DBNull.Value Then
				_statusDate = SqlDateTime.Null
			Else
				_statusDate = New SqlDateTime(CType(objSqlDataReader("StatusDate"), Date))
			End If
			
			_statusDateOld = _statusDate
			
			If objSqlDataReader("DateSentToLocating") Is System.DBNull.Value Then
				_dateSentToLocating = SqlDateTime.Null
			Else
				_dateSentToLocating = New SqlDateTime(CType(objSqlDataReader("DateSentToLocating"), Date))
			End If
			
			_dateSentToLocatingOld = _dateSentToLocating
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("DaysInLocating") Is System.DBNull.Value Then
				_daysInLocating = SqlInt32.Null
			Else
				_daysInLocating = New SqlInt32(CType(objSqlDataReader("DaysInLocating"), Integer))
			End If
			
			_daysInLocatingOld = _daysInLocating
			
			_timesInLocating = New SqlInt32(CType(objSqlDataReader("TimesInLocating"), Integer))
			
			_timesInLocatingOld = _timesInLocating
			
			_timesTouched = New SqlInt32(CType(objSqlDataReader("TimesTouched"), Integer))
			
			_timesTouchedOld = _timesTouched
			
			If objSqlDataReader("NumAttempts") Is System.DBNull.Value Then
				_numAttempts = SqlInt32.Null
			Else
				_numAttempts = New SqlInt32(CType(objSqlDataReader("NumAttempts"), Integer))
			End If
			
			_numAttemptsOld = _numAttempts
			
			_totalSecondsInLocating = New SqlInt32(CType(objSqlDataReader("TotalSecondsInLocating"), Integer))
			
			_totalSecondsInLocatingOld = _totalSecondsInLocating
			
			If objSqlDataReader("TotalHoursInLocating") Is System.DBNull.Value Then
				_totalHoursInLocating = SqlDouble.Null
			Else
				_totalHoursInLocating = New SqlDouble(CType(objSqlDataReader("TotalHoursInLocating"), Double))
			End If
			
			_totalHoursInLocatingOld = _totalHoursInLocating
			
			If objSqlDataReader("Language") Is System.DBNull.Value Then
				_language = New SqlString("")
			Else
				_language = New SqlString(CType(objSqlDataReader("Language"), String))
			End If
			
			_languageOld = _language
			
			If objSqlDataReader("State") Is System.DBNull.Value Then
				_state = New SqlString("")
			Else
				_state = New SqlString(CType(objSqlDataReader("State"), String))
			End If
			
			_stateOld = _state
			
			If objSqlDataReader("TimeZone") Is System.DBNull.Value Then
				_timeZone = New SqlString("")
			Else
				_timeZone = New SqlString(CType(objSqlDataReader("TimeZone"), String))
			End If
			
			_timeZoneOld = _timeZone
			
			If objSqlDataReader("TimeZoneCode") Is System.DBNull.Value Then
				_timeZoneCode = New SqlString("")
			Else
				_timeZoneCode = New SqlString(CType(objSqlDataReader("TimeZoneCode"), String))
			End If
			
			_timeZoneCodeOld = _timeZoneCode
			
			If objSqlDataReader("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objSqlDataReader("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objSqlDataReader("Site") Is System.DBNull.Value Then
				_site = New SqlString("")
			Else
				_site = New SqlString(CType(objSqlDataReader("Site"), String))
			End If
			
			_siteOld = _site
			
			_accurint = New SqlString(CType(objSqlDataReader("Accurint"), String))
			
			_accurintOld = _accurint
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			_name = New SqlString("")
			_nameOld = _name
			
			_locatingStatus = New SqlString("")
			_locatingStatusOld = _locatingStatus
			
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			
			
			
			
			
			_language = New SqlString("")
			_languageOld = _language
			
			_state = New SqlString("")
			_stateOld = _state
			
			_timeZone = New SqlString("")
			_timeZoneOld = _timeZone
			
			_timeZoneCode = New SqlString("")
			_timeZoneCodeOld = _timeZoneCode
			
			_userName = New SqlString("")
			_userNameOld = _userName
			
			_site = New SqlString("")
			_siteOld = _site
			
			_accurint = New SqlString("")
			_accurintOld = _accurint
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_mPRID = _mPRIDOld
			
			_priority = _priorityOld
			
			_name = _nameOld
			
			_locatingStatus = _locatingStatusOld
			
			_statusDate = _statusDateOld
			
			_dateSentToLocating = _dateSentToLocatingOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_daysInLocating = _daysInLocatingOld
			
			_timesInLocating = _timesInLocatingOld
			
			_timesTouched = _timesTouchedOld
			
			_numAttempts = _numAttemptsOld
			
			_totalSecondsInLocating = _totalSecondsInLocatingOld
			
			_totalHoursInLocating = _totalHoursInLocatingOld
			
			_language = _languageOld
			
			_state = _stateOld
			
			_timeZone = _timeZoneOld
			
			_timeZoneCode = _timeZoneCodeOld
			
			_userName = _userNameOld
			
			_site = _siteOld
			
			_accurint = _accurintOld
			
			ModifiedColumnCount = 0
			
		End Sub



		''' <summary>
		''' Selects all rows from the view.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_vwLocatingSelectionDetail_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("vwLocatingSelectionDetail")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_vwLocatingSelectionDetail_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("VwLocatingSelectionDetail::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Priority]() As SqlInt32
			Get
				Return _priority
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _priority.Equals(Value) Then
					If _priorityOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _priority.Equals(_priorityOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim priorityTmp As SqlInt32 = Value
				If priorityTmp.IsNull Then
					Throw New NullValueException("Priority", "Priority can't be NULL")
				End If
				_priority = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Name]() As SqlString
			Get
				Return _name
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _name.IsNull Then
					CurrentValue = _name.Value
				End If
				If Not _nameOld.IsNull Then
					OldValue = _nameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_name = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LocatingStatus]() As SqlString
			Get
				Return _locatingStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _locatingStatus.IsNull Then
					CurrentValue = _locatingStatus.Value
				End If
				If Not _locatingStatusOld.IsNull Then
					OldValue = _locatingStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_locatingStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusDate]() As SqlDateTime
			Get
				Return _statusDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _statusDate.Equals(Value) Then
					If _statusDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _statusDate.Equals(_statusDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_statusDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateSentToLocating]() As SqlDateTime
			Get
				Return _dateSentToLocating
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateSentToLocating.Equals(Value) Then
					If _dateSentToLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateSentToLocating.Equals(_dateSentToLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateSentToLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DaysInLocating]() As SqlInt32
			Get
				Return _daysInLocating
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _daysInLocating.Equals(Value) Then
					If _daysInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _daysInLocating.Equals(_daysInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_daysInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimesInLocating]() As SqlInt32
			Get
				Return _timesInLocating
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _timesInLocating.Equals(Value) Then
					If _timesInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _timesInLocating.Equals(_timesInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim timesInLocatingTmp As SqlInt32 = Value
				If timesInLocatingTmp.IsNull Then
					Throw New NullValueException("TimesInLocating", "TimesInLocating can't be NULL")
				End If
				_timesInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimesTouched]() As SqlInt32
			Get
				Return _timesTouched
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _timesTouched.Equals(Value) Then
					If _timesTouchedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _timesTouched.Equals(_timesTouchedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim timesTouchedTmp As SqlInt32 = Value
				If timesTouchedTmp.IsNull Then
					Throw New NullValueException("TimesTouched", "TimesTouched can't be NULL")
				End If
				_timesTouched = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NumAttempts]() As SqlInt32
			Get
				Return _numAttempts
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _numAttempts.Equals(Value) Then
					If _numAttemptsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _numAttempts.Equals(_numAttemptsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_numAttempts = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TotalSecondsInLocating]() As SqlInt32
			Get
				Return _totalSecondsInLocating
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _totalSecondsInLocating.Equals(Value) Then
					If _totalSecondsInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _totalSecondsInLocating.Equals(_totalSecondsInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim totalSecondsInLocatingTmp As SqlInt32 = Value
				If totalSecondsInLocatingTmp.IsNull Then
					Throw New NullValueException("TotalSecondsInLocating", "TotalSecondsInLocating can't be NULL")
				End If
				_totalSecondsInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TotalHoursInLocating]() As SqlDouble
			Get
				Return _totalHoursInLocating
			End Get
			Set(ByVal Value As SqlDouble)
				If Not _totalHoursInLocating.Equals(Value) Then
					If _totalHoursInLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _totalHoursInLocating.Equals(_totalHoursInLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_totalHoursInLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Language]() As SqlString
			Get
				Return _language
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _language.IsNull Then
					CurrentValue = _language.Value
				End If
				If Not _languageOld.IsNull Then
					OldValue = _languageOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_language = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [State]() As SqlString
			Get
				Return _state
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _state.IsNull Then
					CurrentValue = _state.Value
				End If
				If Not _stateOld.IsNull Then
					OldValue = _stateOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_state = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimeZone]() As SqlString
			Get
				Return _timeZone
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _timeZone.IsNull Then
					CurrentValue = _timeZone.Value
				End If
				If Not _timeZoneOld.IsNull Then
					OldValue = _timeZoneOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_timeZone = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [TimeZoneCode]() As SqlString
			Get
				Return _timeZoneCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _timeZoneCode.IsNull Then
					CurrentValue = _timeZoneCode.Value
				End If
				If Not _timeZoneCodeOld.IsNull Then
					OldValue = _timeZoneCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_timeZoneCode = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [UserName]() As SqlString
			Get
				Return _userName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _userName.IsNull Then
					CurrentValue = _userName.Value
				End If
				If Not _userNameOld.IsNull Then
					OldValue = _userNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_userName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Site]() As SqlString
			Get
				Return _site
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _site.IsNull Then
					CurrentValue = _site.Value
				End If
				If Not _siteOld.IsNull Then
					OldValue = _siteOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_site = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Accurint]() As SqlString
			Get
				Return _accurint
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _accurint.IsNull Then
					CurrentValue = _accurint.Value
				End If
				If Not _accurintOld.IsNull Then
					OldValue = _accurintOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim accurintTmp As SqlString = Value
				If accurintTmp.IsNull Then
					Throw New NullValueException("Accurint", "Accurint can't be NULL")
				End If
				_accurint = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
