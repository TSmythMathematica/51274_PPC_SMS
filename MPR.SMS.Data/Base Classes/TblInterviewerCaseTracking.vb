' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:32 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblInterviewerCaseTracking.
	''' </summary>

	Public Class TblInterviewerCaseTracking
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _remark1 As SqlBoolean
		Private _remark1Old As SqlBoolean
		Private _remark7 As SqlBoolean
		Private _remark7Old As SqlBoolean
		Private _remark2 As SqlBoolean
		Private _remark2Old As SqlBoolean
		Private _remark6 As SqlBoolean
		Private _remark6Old As SqlBoolean
		Private _remark3 As SqlBoolean
		Private _remark3Old As SqlBoolean
		Private _remark5 As SqlBoolean
		Private _remark5Old As SqlBoolean
		Private _remark10 As SqlBoolean
		Private _remark10Old As SqlBoolean
		Private _remark4 As SqlBoolean
		Private _remark4Old As SqlBoolean
		Private _remark8 As SqlBoolean
		Private _remark8Old As SqlBoolean
		Private _remark9 As SqlBoolean
		Private _remark9Old As SqlBoolean

		Private _reportedStatus As SqlString
		Private _reportedStatusOld As SqlString

		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _interviewerCaseTrackingID As SqlInt32
		Private _interviewerCaseTrackingIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _interviewerID As SqlInt32
		Private _interviewerIDOld As SqlInt32

		Private _dateReported As SqlDateTime
		Private _dateReportedOld As SqlDateTime

		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString

#End Region

		''' <overloads>
		''' The TblInterviewerCaseTracking constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblInterviewerCaseTracking class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInterviewerCaseTracking class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInterviewerCaseTracking class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_interviewerCaseTrackingID = New SqlInt32(CType(objDataRow("InterviewerCaseTrackingID"), Integer))
			
			_interviewerCaseTrackingIDOld = _interviewerCaseTrackingID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			_interviewerID = New SqlInt32(CType(objDataRow("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objDataRow("DateReported") Is System.DBNull.Value Then
				_dateReported = SqlDateTime.Null
			Else
				_dateReported = New SqlDateTime(CType(objDataRow("DateReported"), Date))
			End If
			
			_dateReportedOld = _dateReported
			
			_reportedStatus = New SqlString(CType(objDataRow("ReportedStatus"), String))
			
			_reportedStatusOld = _reportedStatus
			
			_notes = New SqlString(CType(objDataRow("Notes"), String))
			
			_notesOld = _notes
			
			_remark1 = New SqlBoolean(CType(objDataRow("Remark1"), Boolean))
			
			_remark1Old = _remark1
			
			_remark2 = New SqlBoolean(CType(objDataRow("Remark2"), Boolean))
			
			_remark2Old = _remark2
			
			_remark3 = New SqlBoolean(CType(objDataRow("Remark3"), Boolean))
			
			_remark3Old = _remark3
			
			_remark4 = New SqlBoolean(CType(objDataRow("Remark4"), Boolean))
			
			_remark4Old = _remark4
			
			_remark5 = New SqlBoolean(CType(objDataRow("Remark5"), Boolean))
			
			_remark5Old = _remark5
			
			_remark6 = New SqlBoolean(CType(objDataRow("Remark6"), Boolean))
			
			_remark6Old = _remark6
			
			_remark7 = New SqlBoolean(CType(objDataRow("Remark7"), Boolean))
			
			_remark7Old = _remark7
			
			_remark8 = New SqlBoolean(CType(objDataRow("Remark8"), Boolean))
			
			_remark8Old = _remark8
			
			_remark9 = New SqlBoolean(CType(objDataRow("Remark9"), Boolean))
			
			_remark9Old = _remark9
			
			_remark10 = New SqlBoolean(CType(objDataRow("Remark10"), Boolean))
			
			_remark10Old = _remark10
			
			_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_interviewerCaseTrackingID = New SqlInt32(CType(objSqlDataReader("InterviewerCaseTrackingID"), Integer))
			
			_interviewerCaseTrackingIDOld = _interviewerCaseTrackingID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			_interviewerID = New SqlInt32(CType(objSqlDataReader("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objSqlDataReader("DateReported") Is System.DBNull.Value Then
				_dateReported = SqlDateTime.Null
			Else
				_dateReported = New SqlDateTime(CType(objSqlDataReader("DateReported"), Date))
			End If
			
			_dateReportedOld = _dateReported
			
			_reportedStatus = New SqlString(CType(objSqlDataReader("ReportedStatus"), String))
			
			_reportedStatusOld = _reportedStatus
			
			_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			
			_notesOld = _notes
			
			_remark1 = New SqlBoolean(CType(objSqlDataReader("Remark1"), Boolean))
			
			_remark1Old = _remark1
			
			_remark2 = New SqlBoolean(CType(objSqlDataReader("Remark2"), Boolean))
			
			_remark2Old = _remark2
			
			_remark3 = New SqlBoolean(CType(objSqlDataReader("Remark3"), Boolean))
			
			_remark3Old = _remark3
			
			_remark4 = New SqlBoolean(CType(objSqlDataReader("Remark4"), Boolean))
			
			_remark4Old = _remark4
			
			_remark5 = New SqlBoolean(CType(objSqlDataReader("Remark5"), Boolean))
			
			_remark5Old = _remark5
			
			_remark6 = New SqlBoolean(CType(objSqlDataReader("Remark6"), Boolean))
			
			_remark6Old = _remark6
			
			_remark7 = New SqlBoolean(CType(objSqlDataReader("Remark7"), Boolean))
			
			_remark7Old = _remark7
			
			_remark8 = New SqlBoolean(CType(objSqlDataReader("Remark8"), Boolean))
			
			_remark8Old = _remark8
			
			_remark9 = New SqlBoolean(CType(objSqlDataReader("Remark9"), Boolean))
			
			_remark9Old = _remark9
			
			_remark10 = New SqlBoolean(CType(objSqlDataReader("Remark10"), Boolean))
			
			_remark10Old = _remark10
			
			_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			_reportedStatus = New SqlString("")
			_reportedStatusOld = _reportedStatus
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			_remark1 = New SqlBoolean(False)
			_remark1Old = _remark1
			
			_remark2 = New SqlBoolean(False)
			_remark2Old = _remark2
			
			_remark3 = New SqlBoolean(False)
			_remark3Old = _remark3
			
			_remark4 = New SqlBoolean(False)
			_remark4Old = _remark4
			
			_remark5 = New SqlBoolean(False)
			_remark5Old = _remark5
			
			_remark6 = New SqlBoolean(False)
			_remark6Old = _remark6
			
			_remark7 = New SqlBoolean(False)
			_remark7Old = _remark7
			
			_remark8 = New SqlBoolean(False)
			_remark8Old = _remark8
			
			_remark9 = New SqlBoolean(False)
			_remark9Old = _remark9
			
			_remark10 = New SqlBoolean(False)
			_remark10Old = _remark10
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_interviewerCaseTrackingID = _interviewerCaseTrackingIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_interviewerID = _interviewerIDOld
			
			_dateReported = _dateReportedOld
			
			_reportedStatus = _reportedStatusOld
			
			_notes = _notesOld
			
			_remark1 = _remark1Old
			
			_remark2 = _remark2Old
			
			_remark3 = _remark3Old
			
			_remark4 = _remark4Old
			
			_remark5 = _remark5Old
			
			_remark6 = _remark6Old
			
			_remark7 = _remark7Old
			
			_remark8 = _remark8Old
			
			_remark9 = _remark9Old
			
			_remark10 = _remark10Old
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported. May be SqlDateTime.Null</LI>
		'''		 <LI>ReportedStatus</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>Remark1</LI>
		'''		 <LI>Remark2</LI>
		'''		 <LI>Remark3</LI>
		'''		 <LI>Remark4</LI>
		'''		 <LI>Remark5</LI>
		'''		 <LI>Remark6</LI>
		'''		 <LI>Remark7</LI>
		'''		 <LI>Remark8</LI>
		'''		 <LI>Remark9</LI>
		'''		 <LI>Remark10</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>InterviewerCaseTrackingID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateReported", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateReported))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReportedStatus", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _reportedStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 500, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark1", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark2", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark3", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark3))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark4", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark4))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark5", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark5))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark6", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark6))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark7", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark7))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark8", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark8))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark9", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark9))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark10", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark10))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerCaseTrackingID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _interviewerCaseTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_interviewerCaseTrackingID = CType(cmdToExecute.Parameters.Item("@InterviewerCaseTrackingID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerCaseTrackingID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported. May be SqlDateTime.Null</LI>
		'''		 <LI>ReportedStatus</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>Remark1</LI>
		'''		 <LI>Remark2</LI>
		'''		 <LI>Remark3</LI>
		'''		 <LI>Remark4</LI>
		'''		 <LI>Remark5</LI>
		'''		 <LI>Remark6</LI>
		'''		 <LI>Remark7</LI>
		'''		 <LI>Remark8</LI>
		'''		 <LI>Remark9</LI>
		'''		 <LI>Remark10</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerCaseTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerCaseTrackingID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateReported", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateReported))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReportedStatus", SqlDbType.Char, 4, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _reportedStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 500, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark1", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark1))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark2", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark2))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark3", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark3))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark4", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark4))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark5", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark5))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark6", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark6))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark7", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark7))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark8", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark8))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark9", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark9))
				cmdToExecute.Parameters.Add(New SqlParameter("@Remark10", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _remark10))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerID.
		''' It will reset the field 'InterviewerID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerIDOld' to 
		''' the value as set in property 'InterviewerID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>InterviewerIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_UpdateAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_UpdateAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::UpdateAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerCaseTrackingID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerCaseTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerCaseTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerCaseTrackingID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InterviewerCaseTrackingID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported</LI>
		'''		 <LI>ReportedStatus</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>Remark1</LI>
		'''		 <LI>Remark2</LI>
		'''		 <LI>Remark3</LI>
		'''		 <LI>Remark4</LI>
		'''		 <LI>Remark5</LI>
		'''		 <LI>Remark6</LI>
		'''		 <LI>Remark7</LI>
		'''		 <LI>Remark8</LI>
		'''		 <LI>Remark9</LI>
		'''		 <LI>Remark10</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerCaseTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerCaseTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerCaseTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerCaseTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerCaseTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerCaseTracking_SelectAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerCaseTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerCaseTracking_SelectAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerCaseTracking::SelectAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerCaseTrackingID]() As SqlInt32
			Get
				Return _interviewerCaseTrackingID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerCaseTrackingID.Equals(Value) Then
					If _interviewerCaseTrackingIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerCaseTrackingID.Equals(_interviewerCaseTrackingIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerCaseTrackingIDTmp As SqlInt32 = Value
				If interviewerCaseTrackingIDTmp.IsNull Then
					Throw New NullValueException("InterviewerCaseTrackingID", "InterviewerCaseTrackingID can't be NULL")
				End If
				_interviewerCaseTrackingID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerID]() As SqlInt32
			Get
				Return _interviewerID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerID.Equals(Value) Then
					If _interviewerIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerID.Equals(_interviewerIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerIDTmp As SqlInt32 = Value
				If interviewerIDTmp.IsNull Then
					Throw New NullValueException("InterviewerID", "InterviewerID can't be NULL")
				End If
				_interviewerID = Value
			End Set
		End Property
		Protected Property [InterviewerIDOld]() As SqlInt32
			Get
				Return _interviewerIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim interviewerIDOldTmp As SqlInt32 = Value
				If interviewerIDOldTmp.IsNull Then
					Throw New NullValueException("InterviewerIDOld", "InterviewerIDOld can't be NULL")
				End If
				_interviewerIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateReported]() As SqlDateTime
			Get
				Return _dateReported
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateReported.Equals(Value) Then
					If _dateReportedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateReported.Equals(_dateReportedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateReported = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [ReportedStatus]() As SqlString
			Get
				Return _reportedStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _reportedStatus.IsNull Then
					CurrentValue = _reportedStatus.Value
				End If
				If Not _reportedStatusOld.IsNull Then
					OldValue = _reportedStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_reportedStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark1]() As SqlBoolean
			Get
				Return _remark1
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark1.Equals(Value) Then
					If _remark1Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark1.Equals(_remark1Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark1 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark2]() As SqlBoolean
			Get
				Return _remark2
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark2.Equals(Value) Then
					If _remark2Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark2.Equals(_remark2Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark2 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark3]() As SqlBoolean
			Get
				Return _remark3
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark3.Equals(Value) Then
					If _remark3Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark3.Equals(_remark3Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark3 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark4]() As SqlBoolean
			Get
				Return _remark4
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark4.Equals(Value) Then
					If _remark4Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark4.Equals(_remark4Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark4 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark5]() As SqlBoolean
			Get
				Return _remark5
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark5.Equals(Value) Then
					If _remark5Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark5.Equals(_remark5Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark5 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark6]() As SqlBoolean
			Get
				Return _remark6
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark6.Equals(Value) Then
					If _remark6Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark6.Equals(_remark6Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark6 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark7]() As SqlBoolean
			Get
				Return _remark7
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark7.Equals(Value) Then
					If _remark7Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark7.Equals(_remark7Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark7 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark8]() As SqlBoolean
			Get
				Return _remark8
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark8.Equals(Value) Then
					If _remark8Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark8.Equals(_remark8Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark8 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark9]() As SqlBoolean
			Get
				Return _remark9
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark9.Equals(Value) Then
					If _remark9Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark9.Equals(_remark9Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark9 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [Remark10]() As SqlBoolean
			Get
				Return _remark10
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _remark10.Equals(Value) Then
					If _remark10Old.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _remark10.Equals(_remark10Old) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_remark10 = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
