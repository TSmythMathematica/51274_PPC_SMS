' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:33 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblPerson.
	''' </summary>

	Public Class TblPerson
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _isIneligible As SqlBoolean
		Private _isIneligibleOld As SqlBoolean
		Private _isHispanic As SqlBoolean
		Private _isHispanicOld As SqlBoolean
		Private _nonResidentAlien As SqlBoolean
		Private _nonResidentAlienOld As SqlBoolean
		Private _inSample As SqlBoolean
		Private _inSampleOld As SqlBoolean

		Private _dateOfBirth As SqlDateTime
		Private _dateOfBirthOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _dateOfDeath As SqlDateTime
		Private _dateOfDeathOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _languageTypeID As SqlInt32
		Private _languageTypeIDOld As SqlInt32
		Private _ageAtSampling As SqlInt32
		Private _ageAtSamplingOld As SqlInt32
		Private _consentID As SqlInt32
		Private _consentIDOld As SqlInt32
		Private _genderID As SqlInt32
		Private _genderIDOld As SqlInt32
		Private _assentID As SqlInt32
		Private _assentIDOld As SqlInt32
		Private _relationshipTypeID As SqlInt32
		Private _relationshipTypeIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32

		Private _bPN As SqlByte
		Private _bPNOld As SqlByte

		Private _webUsername As SqlString
		Private _webUsernameOld As SqlString
		Private _languageOther As SqlString
		Private _languageOtherOld As SqlString
		Private _prefix As SqlString
		Private _prefixOld As SqlString
		Private _webPassword As SqlString
		Private _webPasswordOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _webSite As SqlString
		Private _webSiteOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _title As SqlString
		Private _titleOld As SqlString
		Private _suffix As SqlString
		Private _suffixOld As SqlString
		Private _sSN As SqlString
		Private _sSNOld As SqlString
		Private _lexID As SqlString
		Private _lexIDOld As SqlString
		Private _eIN As SqlString
		Private _eINOld As SqlString
		Private _maidenName As SqlString
		Private _maidenNameOld As SqlString
		Private _firstName As SqlString
		Private _firstNameOld As SqlString
		Private _raceOther As SqlString
		Private _raceOtherOld As SqlString
		Private _maritalStatus As SqlString
		Private _maritalStatusOld As SqlString
		Private _lastName As SqlString
		Private _lastNameOld As SqlString
		Private _middleName As SqlString
		Private _middleNameOld As SqlString

#End Region

		''' <overloads>
		''' The TblPerson constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblPerson class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblPerson class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblPerson class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("Prefix") Is System.DBNull.Value Then
				_prefix = New SqlString("")
			Else
				_prefix = New SqlString(CType(objDataRow("Prefix"), String))
			End If
			
			_prefixOld = _prefix
			
			If objDataRow("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objDataRow("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objDataRow("MiddleName") Is System.DBNull.Value Then
				_middleName = New SqlString("")
			Else
				_middleName = New SqlString(CType(objDataRow("MiddleName"), String))
			End If
			
			_middleNameOld = _middleName
			
			If objDataRow("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objDataRow("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objDataRow("MaidenName") Is System.DBNull.Value Then
				_maidenName = New SqlString("")
			Else
				_maidenName = New SqlString(CType(objDataRow("MaidenName"), String))
			End If
			
			_maidenNameOld = _maidenName
			
			If objDataRow("Suffix") Is System.DBNull.Value Then
				_suffix = New SqlString("")
			Else
				_suffix = New SqlString(CType(objDataRow("Suffix"), String))
			End If
			
			_suffixOld = _suffix
			
			If objDataRow("Title") Is System.DBNull.Value Then
				_title = New SqlString("")
			Else
				_title = New SqlString(CType(objDataRow("Title"), String))
			End If
			
			_titleOld = _title
			
			If objDataRow("SSN") Is System.DBNull.Value Then
				_sSN = New SqlString("")
			Else
				_sSN = New SqlString(CType(objDataRow("SSN"), String))
			End If
			
			_sSNOld = _sSN
			
			If objDataRow("EIN") Is System.DBNull.Value Then
				_eIN = New SqlString("")
			Else
				_eIN = New SqlString(CType(objDataRow("EIN"), String))
			End If
			
			_eINOld = _eIN
			
			If objDataRow("LexID") Is System.DBNull.Value Then
				_lexID = New SqlString("")
			Else
				_lexID = New SqlString(CType(objDataRow("LexID"), String))
			End If
			
			_lexIDOld = _lexID
			
			If objDataRow("RelationshipTypeID") Is System.DBNull.Value Then
				_relationshipTypeID = SqlInt32.Null
			Else
				_relationshipTypeID = New SqlInt32(CType(objDataRow("RelationshipTypeID"), Integer))
			End If
			
			_relationshipTypeIDOld = _relationshipTypeID
			
			If objDataRow("InSample") Is System.DBNull.Value Then
				_inSample = New SqlBoolean(False)
			Else
				_inSample = New SqlBoolean(CType(objDataRow("InSample"), Boolean))
			End If
			
			_inSampleOld = _inSample
			
			If objDataRow("IsIneligible") Is System.DBNull.Value Then
				_isIneligible = New SqlBoolean(False)
			Else
				_isIneligible = New SqlBoolean(CType(objDataRow("IsIneligible"), Boolean))
			End If
			
			_isIneligibleOld = _isIneligible
			
			If objDataRow("ConsentID") Is System.DBNull.Value Then
				_consentID = SqlInt32.Null
			Else
				_consentID = New SqlInt32(CType(objDataRow("ConsentID"), Integer))
			End If
			
			_consentIDOld = _consentID
			
			If objDataRow("AssentID") Is System.DBNull.Value Then
				_assentID = SqlInt32.Null
			Else
				_assentID = New SqlInt32(CType(objDataRow("AssentID"), Integer))
			End If
			
			_assentIDOld = _assentID
			
			If objDataRow("GenderID") Is System.DBNull.Value Then
				_genderID = SqlInt32.Null
			Else
				_genderID = New SqlInt32(CType(objDataRow("GenderID"), Integer))
			End If
			
			_genderIDOld = _genderID
			
			If objDataRow("DateOfBirth") Is System.DBNull.Value Then
				_dateOfBirth = SqlDateTime.Null
			Else
				_dateOfBirth = New SqlDateTime(CType(objDataRow("DateOfBirth"), Date))
			End If
			
			_dateOfBirthOld = _dateOfBirth
			
			If objDataRow("DateOfDeath") Is System.DBNull.Value Then
				_dateOfDeath = SqlDateTime.Null
			Else
				_dateOfDeath = New SqlDateTime(CType(objDataRow("DateOfDeath"), Date))
			End If
			
			_dateOfDeathOld = _dateOfDeath
			
			If objDataRow("AgeAtSampling") Is System.DBNull.Value Then
				_ageAtSampling = SqlInt32.Null
			Else
				_ageAtSampling = New SqlInt32(CType(objDataRow("AgeAtSampling"), Integer))
			End If
			
			_ageAtSamplingOld = _ageAtSampling
			
			If objDataRow("MaritalStatus") Is System.DBNull.Value Then
				_maritalStatus = New SqlString("")
			Else
				_maritalStatus = New SqlString(CType(objDataRow("MaritalStatus"), String))
			End If
			
			_maritalStatusOld = _maritalStatus
			
			If objDataRow("IsHispanic") Is System.DBNull.Value Then
				_isHispanic = New SqlBoolean(False)
			Else
				_isHispanic = New SqlBoolean(CType(objDataRow("IsHispanic"), Boolean))
			End If
			
			_isHispanicOld = _isHispanic
			
			If objDataRow("RaceOther") Is System.DBNull.Value Then
				_raceOther = New SqlString("")
			Else
				_raceOther = New SqlString(CType(objDataRow("RaceOther"), String))
			End If
			
			_raceOtherOld = _raceOther
			
			If objDataRow("LanguageTypeID") Is System.DBNull.Value Then
				_languageTypeID = SqlInt32.Null
			Else
				_languageTypeID = New SqlInt32(CType(objDataRow("LanguageTypeID"), Integer))
			End If
			
			_languageTypeIDOld = _languageTypeID
			
			If objDataRow("LanguageOther") Is System.DBNull.Value Then
				_languageOther = New SqlString("")
			Else
				_languageOther = New SqlString(CType(objDataRow("LanguageOther"), String))
			End If
			
			_languageOtherOld = _languageOther
			
			If objDataRow("NonResidentAlien") Is System.DBNull.Value Then
				_nonResidentAlien = New SqlBoolean(False)
			Else
				_nonResidentAlien = New SqlBoolean(CType(objDataRow("NonResidentAlien"), Boolean))
			End If
			
			_nonResidentAlienOld = _nonResidentAlien
			
			If objDataRow("WebUsername") Is System.DBNull.Value Then
				_webUsername = New SqlString("")
			Else
				_webUsername = New SqlString(CType(objDataRow("WebUsername"), String))
			End If
			
			_webUsernameOld = _webUsername
			
			If objDataRow("WebPassword") Is System.DBNull.Value Then
				_webPassword = New SqlString("")
			Else
				_webPassword = New SqlString(CType(objDataRow("WebPassword"), String))
			End If
			
			_webPasswordOld = _webPassword
			
			If objDataRow("WebSite") Is System.DBNull.Value Then
				_webSite = New SqlString("")
			Else
				_webSite = New SqlString(CType(objDataRow("WebSite"), String))
			End If
			
			_webSiteOld = _webSite
			
			If objDataRow("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objDataRow("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("Prefix") Is System.DBNull.Value Then
				_prefix = New SqlString("")
			Else
				_prefix = New SqlString(CType(objSqlDataReader("Prefix"), String))
			End If
			
			_prefixOld = _prefix
			
			If objSqlDataReader("FirstName") Is System.DBNull.Value Then
				_firstName = New SqlString("")
			Else
				_firstName = New SqlString(CType(objSqlDataReader("FirstName"), String))
			End If
			
			_firstNameOld = _firstName
			
			If objSqlDataReader("MiddleName") Is System.DBNull.Value Then
				_middleName = New SqlString("")
			Else
				_middleName = New SqlString(CType(objSqlDataReader("MiddleName"), String))
			End If
			
			_middleNameOld = _middleName
			
			If objSqlDataReader("LastName") Is System.DBNull.Value Then
				_lastName = New SqlString("")
			Else
				_lastName = New SqlString(CType(objSqlDataReader("LastName"), String))
			End If
			
			_lastNameOld = _lastName
			
			If objSqlDataReader("MaidenName") Is System.DBNull.Value Then
				_maidenName = New SqlString("")
			Else
				_maidenName = New SqlString(CType(objSqlDataReader("MaidenName"), String))
			End If
			
			_maidenNameOld = _maidenName
			
			If objSqlDataReader("Suffix") Is System.DBNull.Value Then
				_suffix = New SqlString("")
			Else
				_suffix = New SqlString(CType(objSqlDataReader("Suffix"), String))
			End If
			
			_suffixOld = _suffix
			
			If objSqlDataReader("Title") Is System.DBNull.Value Then
				_title = New SqlString("")
			Else
				_title = New SqlString(CType(objSqlDataReader("Title"), String))
			End If
			
			_titleOld = _title
			
			If objSqlDataReader("SSN") Is System.DBNull.Value Then
				_sSN = New SqlString("")
			Else
				_sSN = New SqlString(CType(objSqlDataReader("SSN"), String))
			End If
			
			_sSNOld = _sSN
			
			If objSqlDataReader("EIN") Is System.DBNull.Value Then
				_eIN = New SqlString("")
			Else
				_eIN = New SqlString(CType(objSqlDataReader("EIN"), String))
			End If
			
			_eINOld = _eIN
			
			If objSqlDataReader("LexID") Is System.DBNull.Value Then
				_lexID = New SqlString("")
			Else
				_lexID = New SqlString(CType(objSqlDataReader("LexID"), String))
			End If
			
			_lexIDOld = _lexID
			
			If objSqlDataReader("RelationshipTypeID") Is System.DBNull.Value Then
				_relationshipTypeID = SqlInt32.Null
			Else
				_relationshipTypeID = New SqlInt32(CType(objSqlDataReader("RelationshipTypeID"), Integer))
			End If
			
			_relationshipTypeIDOld = _relationshipTypeID
			
			If objSqlDataReader("InSample") Is System.DBNull.Value Then
				_inSample = New SqlBoolean(False)
			Else
				_inSample = New SqlBoolean(CType(objSqlDataReader("InSample"), Boolean))
			End If
			
			_inSampleOld = _inSample
			
			If objSqlDataReader("IsIneligible") Is System.DBNull.Value Then
				_isIneligible = New SqlBoolean(False)
			Else
				_isIneligible = New SqlBoolean(CType(objSqlDataReader("IsIneligible"), Boolean))
			End If
			
			_isIneligibleOld = _isIneligible
			
			If objSqlDataReader("ConsentID") Is System.DBNull.Value Then
				_consentID = SqlInt32.Null
			Else
				_consentID = New SqlInt32(CType(objSqlDataReader("ConsentID"), Integer))
			End If
			
			_consentIDOld = _consentID
			
			If objSqlDataReader("AssentID") Is System.DBNull.Value Then
				_assentID = SqlInt32.Null
			Else
				_assentID = New SqlInt32(CType(objSqlDataReader("AssentID"), Integer))
			End If
			
			_assentIDOld = _assentID
			
			If objSqlDataReader("GenderID") Is System.DBNull.Value Then
				_genderID = SqlInt32.Null
			Else
				_genderID = New SqlInt32(CType(objSqlDataReader("GenderID"), Integer))
			End If
			
			_genderIDOld = _genderID
			
			If objSqlDataReader("DateOfBirth") Is System.DBNull.Value Then
				_dateOfBirth = SqlDateTime.Null
			Else
				_dateOfBirth = New SqlDateTime(CType(objSqlDataReader("DateOfBirth"), Date))
			End If
			
			_dateOfBirthOld = _dateOfBirth
			
			If objSqlDataReader("DateOfDeath") Is System.DBNull.Value Then
				_dateOfDeath = SqlDateTime.Null
			Else
				_dateOfDeath = New SqlDateTime(CType(objSqlDataReader("DateOfDeath"), Date))
			End If
			
			_dateOfDeathOld = _dateOfDeath
			
			If objSqlDataReader("AgeAtSampling") Is System.DBNull.Value Then
				_ageAtSampling = SqlInt32.Null
			Else
				_ageAtSampling = New SqlInt32(CType(objSqlDataReader("AgeAtSampling"), Integer))
			End If
			
			_ageAtSamplingOld = _ageAtSampling
			
			If objSqlDataReader("MaritalStatus") Is System.DBNull.Value Then
				_maritalStatus = New SqlString("")
			Else
				_maritalStatus = New SqlString(CType(objSqlDataReader("MaritalStatus"), String))
			End If
			
			_maritalStatusOld = _maritalStatus
			
			If objSqlDataReader("IsHispanic") Is System.DBNull.Value Then
				_isHispanic = New SqlBoolean(False)
			Else
				_isHispanic = New SqlBoolean(CType(objSqlDataReader("IsHispanic"), Boolean))
			End If
			
			_isHispanicOld = _isHispanic
			
			If objSqlDataReader("RaceOther") Is System.DBNull.Value Then
				_raceOther = New SqlString("")
			Else
				_raceOther = New SqlString(CType(objSqlDataReader("RaceOther"), String))
			End If
			
			_raceOtherOld = _raceOther
			
			If objSqlDataReader("LanguageTypeID") Is System.DBNull.Value Then
				_languageTypeID = SqlInt32.Null
			Else
				_languageTypeID = New SqlInt32(CType(objSqlDataReader("LanguageTypeID"), Integer))
			End If
			
			_languageTypeIDOld = _languageTypeID
			
			If objSqlDataReader("LanguageOther") Is System.DBNull.Value Then
				_languageOther = New SqlString("")
			Else
				_languageOther = New SqlString(CType(objSqlDataReader("LanguageOther"), String))
			End If
			
			_languageOtherOld = _languageOther
			
			If objSqlDataReader("NonResidentAlien") Is System.DBNull.Value Then
				_nonResidentAlien = New SqlBoolean(False)
			Else
				_nonResidentAlien = New SqlBoolean(CType(objSqlDataReader("NonResidentAlien"), Boolean))
			End If
			
			_nonResidentAlienOld = _nonResidentAlien
			
			If objSqlDataReader("WebUsername") Is System.DBNull.Value Then
				_webUsername = New SqlString("")
			Else
				_webUsername = New SqlString(CType(objSqlDataReader("WebUsername"), String))
			End If
			
			_webUsernameOld = _webUsername
			
			If objSqlDataReader("WebPassword") Is System.DBNull.Value Then
				_webPassword = New SqlString("")
			Else
				_webPassword = New SqlString(CType(objSqlDataReader("WebPassword"), String))
			End If
			
			_webPasswordOld = _webPassword
			
			If objSqlDataReader("WebSite") Is System.DBNull.Value Then
				_webSite = New SqlString("")
			Else
				_webSite = New SqlString(CType(objSqlDataReader("WebSite"), String))
			End If
			
			_webSiteOld = _webSite
			
			If objSqlDataReader("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objSqlDataReader("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			_prefix = New SqlString("")
			_prefixOld = _prefix
			
			_firstName = New SqlString("")
			_firstNameOld = _firstName
			
			_middleName = New SqlString("")
			_middleNameOld = _middleName
			
			_lastName = New SqlString("")
			_lastNameOld = _lastName
			
			_maidenName = New SqlString("")
			_maidenNameOld = _maidenName
			
			_suffix = New SqlString("")
			_suffixOld = _suffix
			
			_title = New SqlString("")
			_titleOld = _title
			
			_sSN = New SqlString("")
			_sSNOld = _sSN
			
			_eIN = New SqlString("")
			_eINOld = _eIN
			
			_lexID = New SqlString("")
			_lexIDOld = _lexID
			
			
			_inSample = New SqlBoolean(False)
			_inSampleOld = _inSample
			
			_isIneligible = New SqlBoolean(False)
			_isIneligibleOld = _isIneligible
			
			
			
			
			
			
			
			_maritalStatus = New SqlString("")
			_maritalStatusOld = _maritalStatus
			
			_isHispanic = New SqlBoolean(False)
			_isHispanicOld = _isHispanic
			
			_raceOther = New SqlString("")
			_raceOtherOld = _raceOther
			
			
			_languageOther = New SqlString("")
			_languageOtherOld = _languageOther
			
			_nonResidentAlien = New SqlBoolean(False)
			_nonResidentAlienOld = _nonResidentAlien
			
			_webUsername = New SqlString("")
			_webUsernameOld = _webUsername
			
			_webPassword = New SqlString("")
			_webPasswordOld = _webPassword
			
			_webSite = New SqlString("")
			_webSiteOld = _webSite
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_mPRID = _mPRIDOld
			
			_caseID = _caseIDOld
			
			_round = _roundOld
			
			_prefix = _prefixOld
			
			_firstName = _firstNameOld
			
			_middleName = _middleNameOld
			
			_lastName = _lastNameOld
			
			_maidenName = _maidenNameOld
			
			_suffix = _suffixOld
			
			_title = _titleOld
			
			_sSN = _sSNOld
			
			_eIN = _eINOld
			
			_lexID = _lexIDOld
			
			_relationshipTypeID = _relationshipTypeIDOld
			
			_inSample = _inSampleOld
			
			_isIneligible = _isIneligibleOld
			
			_consentID = _consentIDOld
			
			_assentID = _assentIDOld
			
			_genderID = _genderIDOld
			
			_dateOfBirth = _dateOfBirthOld
			
			_dateOfDeath = _dateOfDeathOld
			
			_ageAtSampling = _ageAtSamplingOld
			
			_maritalStatus = _maritalStatusOld
			
			_isHispanic = _isHispanicOld
			
			_raceOther = _raceOtherOld
			
			_languageTypeID = _languageTypeIDOld
			
			_languageOther = _languageOtherOld
			
			_nonResidentAlien = _nonResidentAlienOld
			
			_webUsername = _webUsernameOld
			
			_webPassword = _webPasswordOld
			
			_webSite = _webSiteOld
			
			_bPN = _bPNOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>MPRID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Prefix. May be SqlString.Null</LI>
		'''		 <LI>FirstName. May be SqlString.Null</LI>
		'''		 <LI>MiddleName. May be SqlString.Null</LI>
		'''		 <LI>LastName. May be SqlString.Null</LI>
		'''		 <LI>MaidenName. May be SqlString.Null</LI>
		'''		 <LI>Suffix. May be SqlString.Null</LI>
		'''		 <LI>Title. May be SqlString.Null</LI>
		'''		 <LI>SSN. May be SqlString.Null</LI>
		'''		 <LI>EIN. May be SqlString.Null</LI>
		'''		 <LI>LexID. May be SqlString.Null</LI>
		'''		 <LI>RelationshipTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>InSample. May be SqlBoolean.Null</LI>
		'''		 <LI>IsIneligible. May be SqlBoolean.Null</LI>
		'''		 <LI>ConsentID. May be SqlInt32.Null</LI>
		'''		 <LI>AssentID. May be SqlInt32.Null</LI>
		'''		 <LI>GenderID. May be SqlInt32.Null</LI>
		'''		 <LI>DateOfBirth. May be SqlDateTime.Null</LI>
		'''		 <LI>DateOfDeath. May be SqlDateTime.Null</LI>
		'''		 <LI>AgeAtSampling. May be SqlInt32.Null</LI>
		'''		 <LI>MaritalStatus. May be SqlString.Null</LI>
		'''		 <LI>IsHispanic. May be SqlBoolean.Null</LI>
		'''		 <LI>RaceOther. May be SqlString.Null</LI>
		'''		 <LI>LanguageTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>LanguageOther. May be SqlString.Null</LI>
		'''		 <LI>NonResidentAlien. May be SqlBoolean.Null</LI>
		'''		 <LI>WebUsername. May be SqlString.Null</LI>
		'''		 <LI>WebPassword. May be SqlString.Null</LI>
		'''		 <LI>WebSite. May be SqlString.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Prefix", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _prefix))
				cmdToExecute.Parameters.Add(New SqlParameter("@FirstName", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _firstName))
				cmdToExecute.Parameters.Add(New SqlParameter("@MiddleName", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _middleName))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastName", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastName))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaidenName", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _maidenName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Suffix", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _suffix))
				cmdToExecute.Parameters.Add(New SqlParameter("@Title", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _title))
				cmdToExecute.Parameters.Add(New SqlParameter("@SSN", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sSN))
				cmdToExecute.Parameters.Add(New SqlParameter("@EIN", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _eIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@LexID", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lexID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RelationshipTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _relationshipTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InSample", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inSample))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsIneligible", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isIneligible))
				cmdToExecute.Parameters.Add(New SqlParameter("@ConsentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _consentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AssentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _assentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@GenderID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _genderID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfBirth", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfBirth))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfDeath", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfDeath))
				cmdToExecute.Parameters.Add(New SqlParameter("@AgeAtSampling", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _ageAtSampling))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaritalStatus", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _maritalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHispanic", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isHispanic))
				cmdToExecute.Parameters.Add(New SqlParameter("@RaceOther", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _raceOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@LanguageTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _languageTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LanguageOther", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _languageOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@NonResidentAlien", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _nonResidentAlien))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebUsername", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webUsername))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebPassword", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webPassword))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebSite", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webSite))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>MPRID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>Prefix. May be SqlString.Null</LI>
		'''		 <LI>FirstName. May be SqlString.Null</LI>
		'''		 <LI>MiddleName. May be SqlString.Null</LI>
		'''		 <LI>LastName. May be SqlString.Null</LI>
		'''		 <LI>MaidenName. May be SqlString.Null</LI>
		'''		 <LI>Suffix. May be SqlString.Null</LI>
		'''		 <LI>Title. May be SqlString.Null</LI>
		'''		 <LI>SSN. May be SqlString.Null</LI>
		'''		 <LI>EIN. May be SqlString.Null</LI>
		'''		 <LI>LexID. May be SqlString.Null</LI>
		'''		 <LI>RelationshipTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>InSample. May be SqlBoolean.Null</LI>
		'''		 <LI>IsIneligible. May be SqlBoolean.Null</LI>
		'''		 <LI>ConsentID. May be SqlInt32.Null</LI>
		'''		 <LI>AssentID. May be SqlInt32.Null</LI>
		'''		 <LI>GenderID. May be SqlInt32.Null</LI>
		'''		 <LI>DateOfBirth. May be SqlDateTime.Null</LI>
		'''		 <LI>DateOfDeath. May be SqlDateTime.Null</LI>
		'''		 <LI>AgeAtSampling. May be SqlInt32.Null</LI>
		'''		 <LI>MaritalStatus. May be SqlString.Null</LI>
		'''		 <LI>IsHispanic. May be SqlBoolean.Null</LI>
		'''		 <LI>RaceOther. May be SqlString.Null</LI>
		'''		 <LI>LanguageTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>LanguageOther. May be SqlString.Null</LI>
		'''		 <LI>NonResidentAlien. May be SqlBoolean.Null</LI>
		'''		 <LI>WebUsername. May be SqlString.Null</LI>
		'''		 <LI>WebPassword. May be SqlString.Null</LI>
		'''		 <LI>WebSite. May be SqlString.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@Prefix", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _prefix))
				cmdToExecute.Parameters.Add(New SqlParameter("@FirstName", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _firstName))
				cmdToExecute.Parameters.Add(New SqlParameter("@MiddleName", SqlDbType.VarChar, 20, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _middleName))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastName", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastName))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaidenName", SqlDbType.VarChar, 30, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _maidenName))
				cmdToExecute.Parameters.Add(New SqlParameter("@Suffix", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _suffix))
				cmdToExecute.Parameters.Add(New SqlParameter("@Title", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _title))
				cmdToExecute.Parameters.Add(New SqlParameter("@SSN", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sSN))
				cmdToExecute.Parameters.Add(New SqlParameter("@EIN", SqlDbType.VarChar, 11, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _eIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@LexID", SqlDbType.VarChar, 15, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lexID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RelationshipTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _relationshipTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InSample", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _inSample))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsIneligible", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isIneligible))
				cmdToExecute.Parameters.Add(New SqlParameter("@ConsentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _consentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@AssentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _assentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@GenderID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _genderID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfBirth", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfBirth))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateOfDeath", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateOfDeath))
				cmdToExecute.Parameters.Add(New SqlParameter("@AgeAtSampling", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _ageAtSampling))
				cmdToExecute.Parameters.Add(New SqlParameter("@MaritalStatus", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _maritalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@IsHispanic", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _isHispanic))
				cmdToExecute.Parameters.Add(New SqlParameter("@RaceOther", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _raceOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@LanguageTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _languageTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@LanguageOther", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _languageOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@NonResidentAlien", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _nonResidentAlien))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebUsername", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webUsername))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebPassword", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webPassword))
				cmdToExecute.Parameters.Add(New SqlParameter("@WebSite", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _webSite))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'RelationshipTypeID.
		''' It will reset the field 'RelationshipTypeID' in
		''' all rows which have as value for this field the value as set in property 'RelationshipTypeIDOld' to 
		''' the value as set in property 'RelationshipTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>RelationshipTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>RelationshipTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWRelationshipTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_UpdateAllWRelationshipTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@RelationshipTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _relationshipTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@RelationshipTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _relationshipTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_UpdateAllWRelationshipTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::UpdateAllWRelationshipTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'ConsentID.
		''' It will reset the field 'ConsentID' in
		''' all rows which have as value for this field the value as set in property 'ConsentIDOld' to 
		''' the value as set in property 'ConsentID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>ConsentID. May be SqlInt32.Null</LI>
		'''		 <LI>ConsentIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWConsentIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_UpdateAllWConsentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ConsentID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _consentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ConsentIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _consentIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_UpdateAllWConsentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::UpdateAllWConsentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'AssentID.
		''' It will reset the field 'AssentID' in
		''' all rows which have as value for this field the value as set in property 'AssentIDOld' to 
		''' the value as set in property 'AssentID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>AssentID. May be SqlInt32.Null</LI>
		'''		 <LI>AssentIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWAssentIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_UpdateAllWAssentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@AssentID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _assentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@AssentIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _assentIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_UpdateAllWAssentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::UpdateAllWAssentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'LanguageTypeID.
		''' It will reset the field 'LanguageTypeID' in
		''' all rows which have as value for this field the value as set in property 'LanguageTypeIDOld' to 
		''' the value as set in property 'LanguageTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>LanguageTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>LanguageTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWLanguageTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_UpdateAllWLanguageTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LanguageTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _languageTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@LanguageTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _languageTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_UpdateAllWLanguageTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::UpdateAllWLanguageTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>Prefix</LI>
		'''		 <LI>FirstName</LI>
		'''		 <LI>MiddleName</LI>
		'''		 <LI>LastName</LI>
		'''		 <LI>MaidenName</LI>
		'''		 <LI>Suffix</LI>
		'''		 <LI>Title</LI>
		'''		 <LI>SSN</LI>
		'''		 <LI>EIN</LI>
		'''		 <LI>LexID</LI>
		'''		 <LI>RelationshipTypeID</LI>
		'''		 <LI>InSample</LI>
		'''		 <LI>IsIneligible</LI>
		'''		 <LI>ConsentID</LI>
		'''		 <LI>AssentID</LI>
		'''		 <LI>GenderID</LI>
		'''		 <LI>DateOfBirth</LI>
		'''		 <LI>DateOfDeath</LI>
		'''		 <LI>AgeAtSampling</LI>
		'''		 <LI>MaritalStatus</LI>
		'''		 <LI>IsHispanic</LI>
		'''		 <LI>RaceOther</LI>
		'''		 <LI>LanguageTypeID</LI>
		'''		 <LI>LanguageOther</LI>
		'''		 <LI>NonResidentAlien</LI>
		'''		 <LI>WebUsername</LI>
		'''		 <LI>WebPassword</LI>
		'''		 <LI>WebSite</LI>
		'''		 <LI>BPN</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'RelationshipTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>RelationshipTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWRelationshipTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAllWRelationshipTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@RelationshipTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _relationshipTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAllWRelationshipTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAllWRelationshipTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'ConsentID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>ConsentID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWConsentIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAllWConsentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ConsentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _consentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAllWConsentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAllWConsentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'AssentID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>AssentID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWAssentIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAllWAssentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@AssentID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _assentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAllWAssentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAllWAssentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'LanguageTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>LanguageTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWLanguageTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblPerson_SelectAllWLanguageTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblPerson")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@LanguageTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _languageTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblPerson_SelectAllWLanguageTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblPerson::SelectAllWLanguageTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Prefix]() As SqlString
			Get
				Return _prefix
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _prefix.IsNull Then
					CurrentValue = _prefix.Value
				End If
				If Not _prefixOld.IsNull Then
					OldValue = _prefixOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_prefix = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [FirstName]() As SqlString
			Get
				Return _firstName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _firstName.IsNull Then
					CurrentValue = _firstName.Value
				End If
				If Not _firstNameOld.IsNull Then
					OldValue = _firstNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_firstName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [MiddleName]() As SqlString
			Get
				Return _middleName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _middleName.IsNull Then
					CurrentValue = _middleName.Value
				End If
				If Not _middleNameOld.IsNull Then
					OldValue = _middleNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_middleName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastName]() As SqlString
			Get
				Return _lastName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastName.IsNull Then
					CurrentValue = _lastName.Value
				End If
				If Not _lastNameOld.IsNull Then
					OldValue = _lastNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [MaidenName]() As SqlString
			Get
				Return _maidenName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _maidenName.IsNull Then
					CurrentValue = _maidenName.Value
				End If
				If Not _maidenNameOld.IsNull Then
					OldValue = _maidenNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_maidenName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Suffix]() As SqlString
			Get
				Return _suffix
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _suffix.IsNull Then
					CurrentValue = _suffix.Value
				End If
				If Not _suffixOld.IsNull Then
					OldValue = _suffixOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_suffix = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Title]() As SqlString
			Get
				Return _title
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _title.IsNull Then
					CurrentValue = _title.Value
				End If
				If Not _titleOld.IsNull Then
					OldValue = _titleOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_title = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [SSN]() As SqlString
			Get
				Return _sSN
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sSN.IsNull Then
					CurrentValue = _sSN.Value
				End If
				If Not _sSNOld.IsNull Then
					OldValue = _sSNOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sSN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EIN]() As SqlString
			Get
				Return _eIN
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _eIN.IsNull Then
					CurrentValue = _eIN.Value
				End If
				If Not _eINOld.IsNull Then
					OldValue = _eINOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_eIN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LexID]() As SqlString
			Get
				Return _lexID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lexID.IsNull Then
					CurrentValue = _lexID.Value
				End If
				If Not _lexIDOld.IsNull Then
					OldValue = _lexIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lexID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [RelationshipTypeID]() As SqlInt32
			Get
				Return _relationshipTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _relationshipTypeID.Equals(Value) Then
					If _relationshipTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _relationshipTypeID.Equals(_relationshipTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_relationshipTypeID = Value
			End Set
		End Property
		Protected Property [RelationshipTypeIDOld]() As SqlInt32
			Get
				Return _relationshipTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_relationshipTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((1))", _
		IsTimeStamp:=False)> _
		Public Property [InSample]() As SqlBoolean
			Get
				Return _inSample
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _inSample.Equals(Value) Then
					If _inSampleOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _inSample.Equals(_inSampleOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_inSample = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsIneligible]() As SqlBoolean
			Get
				Return _isIneligible
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isIneligible.Equals(Value) Then
					If _isIneligibleOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isIneligible.Equals(_isIneligibleOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isIneligible = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ConsentID]() As SqlInt32
			Get
				Return _consentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _consentID.Equals(Value) Then
					If _consentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _consentID.Equals(_consentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_consentID = Value
			End Set
		End Property
		Protected Property [ConsentIDOld]() As SqlInt32
			Get
				Return _consentIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_consentIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AssentID]() As SqlInt32
			Get
				Return _assentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _assentID.Equals(Value) Then
					If _assentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _assentID.Equals(_assentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_assentID = Value
			End Set
		End Property
		Protected Property [AssentIDOld]() As SqlInt32
			Get
				Return _assentIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_assentIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [GenderID]() As SqlInt32
			Get
				Return _genderID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _genderID.Equals(Value) Then
					If _genderIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _genderID.Equals(_genderIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_genderID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateOfBirth]() As SqlDateTime
			Get
				Return _dateOfBirth
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateOfBirth.Equals(Value) Then
					If _dateOfBirthOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateOfBirth.Equals(_dateOfBirthOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateOfBirth = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateOfDeath]() As SqlDateTime
			Get
				Return _dateOfDeath
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateOfDeath.Equals(Value) Then
					If _dateOfDeathOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateOfDeath.Equals(_dateOfDeathOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateOfDeath = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AgeAtSampling]() As SqlInt32
			Get
				Return _ageAtSampling
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _ageAtSampling.Equals(Value) Then
					If _ageAtSamplingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _ageAtSampling.Equals(_ageAtSamplingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_ageAtSampling = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [MaritalStatus]() As SqlString
			Get
				Return _maritalStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _maritalStatus.IsNull Then
					CurrentValue = _maritalStatus.Value
				End If
				If Not _maritalStatusOld.IsNull Then
					OldValue = _maritalStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_maritalStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [IsHispanic]() As SqlBoolean
			Get
				Return _isHispanic
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _isHispanic.Equals(Value) Then
					If _isHispanicOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _isHispanic.Equals(_isHispanicOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_isHispanic = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RaceOther]() As SqlString
			Get
				Return _raceOther
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _raceOther.IsNull Then
					CurrentValue = _raceOther.Value
				End If
				If Not _raceOtherOld.IsNull Then
					OldValue = _raceOtherOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_raceOther = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [LanguageTypeID]() As SqlInt32
			Get
				Return _languageTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _languageTypeID.Equals(Value) Then
					If _languageTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _languageTypeID.Equals(_languageTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_languageTypeID = Value
			End Set
		End Property
		Protected Property [LanguageTypeIDOld]() As SqlInt32
			Get
				Return _languageTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_languageTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LanguageOther]() As SqlString
			Get
				Return _languageOther
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _languageOther.IsNull Then
					CurrentValue = _languageOther.Value
				End If
				If Not _languageOtherOld.IsNull Then
					OldValue = _languageOtherOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_languageOther = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [NonResidentAlien]() As SqlBoolean
			Get
				Return _nonResidentAlien
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _nonResidentAlien.Equals(Value) Then
					If _nonResidentAlienOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _nonResidentAlien.Equals(_nonResidentAlienOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_nonResidentAlien = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [WebUsername]() As SqlString
			Get
				Return _webUsername
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _webUsername.IsNull Then
					CurrentValue = _webUsername.Value
				End If
				If Not _webUsernameOld.IsNull Then
					OldValue = _webUsernameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_webUsername = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [WebPassword]() As SqlString
			Get
				Return _webPassword
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _webPassword.IsNull Then
					CurrentValue = _webPassword.Value
				End If
				If Not _webPasswordOld.IsNull Then
					OldValue = _webPasswordOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_webPassword = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [WebSite]() As SqlString
			Get
				Return _webSite
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _webSite.IsNull Then
					CurrentValue = _webSite.Value
				End If
				If Not _webSiteOld.IsNull Then
					OldValue = _webSiteOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_webSite = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BPN]() As SqlByte
			Get
				Return _bPN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bPN.Equals(Value) Then
					If _bPNOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bPN.Equals(_bPNOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bPN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
