' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:34 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblStudent.
	''' </summary>

	Public Class TblStudent
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _selectionType As SqlString
		Private _selectionTypeOld As SqlString

		Private _mobilityDate As SqlDateTime
		Private _mobilityDateOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _behavior As SqlInt32
		Private _behaviorOld As SqlInt32
		Private _classroomIDBaseline As SqlInt32
		Private _classroomIDBaselineOld As SqlInt32
		Private _studentNumber As SqlInt32
		Private _studentNumberOld As SqlInt32
		Private _selectionOrder As SqlInt32
		Private _selectionOrderOld As SqlInt32
		Private _performance As SqlInt32
		Private _performanceOld As SqlInt32
		Private _studentID As SqlInt32
		Private _studentIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _classroomID As SqlInt32
		Private _classroomIDOld As SqlInt32
		Private _schoolID As SqlInt32
		Private _schoolIDOld As SqlInt32

		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _gradeBaseline As SqlString
		Private _gradeBaselineOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _grade As SqlString
		Private _gradeOld As SqlString
		Private _mobilityCode As SqlString
		Private _mobilityCodeOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _mobilityNote As SqlString
		Private _mobilityNoteOld As SqlString

#End Region

		''' <overloads>
		''' The TblStudent constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblStudent class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblStudent class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblStudent class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_studentID = New SqlInt32(CType(objDataRow("StudentID"), Integer))
			
			_studentIDOld = _studentID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objDataRow("SchoolID") Is System.DBNull.Value Then
				_schoolID = SqlInt32.Null
			Else
				_schoolID = New SqlInt32(CType(objDataRow("SchoolID"), Integer))
			End If
			
			_schoolIDOld = _schoolID
			
			If objDataRow("ClassroomID") Is System.DBNull.Value Then
				_classroomID = SqlInt32.Null
			Else
				_classroomID = New SqlInt32(CType(objDataRow("ClassroomID"), Integer))
			End If
			
			_classroomIDOld = _classroomID
			
			If objDataRow("Grade") Is System.DBNull.Value Then
				_grade = New SqlString("")
			Else
				_grade = New SqlString(CType(objDataRow("Grade"), String))
			End If
			
			_gradeOld = _grade
			
			If objDataRow("MobilityCode") Is System.DBNull.Value Then
				_mobilityCode = New SqlString("")
			Else
				_mobilityCode = New SqlString(CType(objDataRow("MobilityCode"), String))
			End If
			
			_mobilityCodeOld = _mobilityCode
			
			If objDataRow("MobilityDate") Is System.DBNull.Value Then
				_mobilityDate = SqlDateTime.Null
			Else
				_mobilityDate = New SqlDateTime(CType(objDataRow("MobilityDate"), Date))
			End If
			
			_mobilityDateOld = _mobilityDate
			
			If objDataRow("MobilityNote") Is System.DBNull.Value Then
				_mobilityNote = New SqlString("")
			Else
				_mobilityNote = New SqlString(CType(objDataRow("MobilityNote"), String))
			End If
			
			_mobilityNoteOld = _mobilityNote
			
			If objDataRow("GradeBaseline") Is System.DBNull.Value Then
				_gradeBaseline = New SqlString("")
			Else
				_gradeBaseline = New SqlString(CType(objDataRow("GradeBaseline"), String))
			End If
			
			_gradeBaselineOld = _gradeBaseline
			
			If objDataRow("ClassroomIDBaseline") Is System.DBNull.Value Then
				_classroomIDBaseline = SqlInt32.Null
			Else
				_classroomIDBaseline = New SqlInt32(CType(objDataRow("ClassroomIDBaseline"), Integer))
			End If
			
			_classroomIDBaselineOld = _classroomIDBaseline
			
			If objDataRow("Behavior") Is System.DBNull.Value Then
				_behavior = SqlInt32.Null
			Else
				_behavior = New SqlInt32(CType(objDataRow("Behavior"), Integer))
			End If
			
			_behaviorOld = _behavior
			
			If objDataRow("Performance") Is System.DBNull.Value Then
				_performance = SqlInt32.Null
			Else
				_performance = New SqlInt32(CType(objDataRow("Performance"), Integer))
			End If
			
			_performanceOld = _performance
			
			If objDataRow("SelectionOrder") Is System.DBNull.Value Then
				_selectionOrder = SqlInt32.Null
			Else
				_selectionOrder = New SqlInt32(CType(objDataRow("SelectionOrder"), Integer))
			End If
			
			_selectionOrderOld = _selectionOrder
			
			If objDataRow("SelectionType") Is System.DBNull.Value Then
				_selectionType = New SqlString("")
			Else
				_selectionType = New SqlString(CType(objDataRow("SelectionType"), String))
			End If
			
			_selectionTypeOld = _selectionType
			
			If objDataRow("StudentNumber") Is System.DBNull.Value Then
				_studentNumber = SqlInt32.Null
			Else
				_studentNumber = New SqlInt32(CType(objDataRow("StudentNumber"), Integer))
			End If
			
			_studentNumberOld = _studentNumber
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_studentID = New SqlInt32(CType(objSqlDataReader("StudentID"), Integer))
			
			_studentIDOld = _studentID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("SchoolID") Is System.DBNull.Value Then
				_schoolID = SqlInt32.Null
			Else
				_schoolID = New SqlInt32(CType(objSqlDataReader("SchoolID"), Integer))
			End If
			
			_schoolIDOld = _schoolID
			
			If objSqlDataReader("ClassroomID") Is System.DBNull.Value Then
				_classroomID = SqlInt32.Null
			Else
				_classroomID = New SqlInt32(CType(objSqlDataReader("ClassroomID"), Integer))
			End If
			
			_classroomIDOld = _classroomID
			
			If objSqlDataReader("Grade") Is System.DBNull.Value Then
				_grade = New SqlString("")
			Else
				_grade = New SqlString(CType(objSqlDataReader("Grade"), String))
			End If
			
			_gradeOld = _grade
			
			If objSqlDataReader("MobilityCode") Is System.DBNull.Value Then
				_mobilityCode = New SqlString("")
			Else
				_mobilityCode = New SqlString(CType(objSqlDataReader("MobilityCode"), String))
			End If
			
			_mobilityCodeOld = _mobilityCode
			
			If objSqlDataReader("MobilityDate") Is System.DBNull.Value Then
				_mobilityDate = SqlDateTime.Null
			Else
				_mobilityDate = New SqlDateTime(CType(objSqlDataReader("MobilityDate"), Date))
			End If
			
			_mobilityDateOld = _mobilityDate
			
			If objSqlDataReader("MobilityNote") Is System.DBNull.Value Then
				_mobilityNote = New SqlString("")
			Else
				_mobilityNote = New SqlString(CType(objSqlDataReader("MobilityNote"), String))
			End If
			
			_mobilityNoteOld = _mobilityNote
			
			If objSqlDataReader("GradeBaseline") Is System.DBNull.Value Then
				_gradeBaseline = New SqlString("")
			Else
				_gradeBaseline = New SqlString(CType(objSqlDataReader("GradeBaseline"), String))
			End If
			
			_gradeBaselineOld = _gradeBaseline
			
			If objSqlDataReader("ClassroomIDBaseline") Is System.DBNull.Value Then
				_classroomIDBaseline = SqlInt32.Null
			Else
				_classroomIDBaseline = New SqlInt32(CType(objSqlDataReader("ClassroomIDBaseline"), Integer))
			End If
			
			_classroomIDBaselineOld = _classroomIDBaseline
			
			If objSqlDataReader("Behavior") Is System.DBNull.Value Then
				_behavior = SqlInt32.Null
			Else
				_behavior = New SqlInt32(CType(objSqlDataReader("Behavior"), Integer))
			End If
			
			_behaviorOld = _behavior
			
			If objSqlDataReader("Performance") Is System.DBNull.Value Then
				_performance = SqlInt32.Null
			Else
				_performance = New SqlInt32(CType(objSqlDataReader("Performance"), Integer))
			End If
			
			_performanceOld = _performance
			
			If objSqlDataReader("SelectionOrder") Is System.DBNull.Value Then
				_selectionOrder = SqlInt32.Null
			Else
				_selectionOrder = New SqlInt32(CType(objSqlDataReader("SelectionOrder"), Integer))
			End If
			
			_selectionOrderOld = _selectionOrder
			
			If objSqlDataReader("SelectionType") Is System.DBNull.Value Then
				_selectionType = New SqlString("")
			Else
				_selectionType = New SqlString(CType(objSqlDataReader("SelectionType"), String))
			End If
			
			_selectionTypeOld = _selectionType
			
			If objSqlDataReader("StudentNumber") Is System.DBNull.Value Then
				_studentNumber = SqlInt32.Null
			Else
				_studentNumber = New SqlInt32(CType(objSqlDataReader("StudentNumber"), Integer))
			End If
			
			_studentNumberOld = _studentNumber
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			
			_grade = New SqlString("")
			_gradeOld = _grade
			
			_mobilityCode = New SqlString("")
			_mobilityCodeOld = _mobilityCode
			
			
			_mobilityNote = New SqlString("")
			_mobilityNoteOld = _mobilityNote
			
			_gradeBaseline = New SqlString("")
			_gradeBaselineOld = _gradeBaseline
			
			
			
			
			
			_selectionType = New SqlString("")
			_selectionTypeOld = _selectionType
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_studentID = _studentIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_schoolID = _schoolIDOld
			
			_classroomID = _classroomIDOld
			
			_grade = _gradeOld
			
			_mobilityCode = _mobilityCodeOld
			
			_mobilityDate = _mobilityDateOld
			
			_mobilityNote = _mobilityNoteOld
			
			_gradeBaseline = _gradeBaselineOld
			
			_classroomIDBaseline = _classroomIDBaselineOld
			
			_behavior = _behaviorOld
			
			_performance = _performanceOld
			
			_selectionOrder = _selectionOrderOld
			
			_selectionType = _selectionTypeOld
			
			_studentNumber = _studentNumberOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>SchoolID. May be SqlInt32.Null</LI>
		'''		 <LI>ClassroomID. May be SqlInt32.Null</LI>
		'''		 <LI>Grade. May be SqlString.Null</LI>
		'''		 <LI>MobilityCode. May be SqlString.Null</LI>
		'''		 <LI>MobilityDate. May be SqlDateTime.Null</LI>
		'''		 <LI>MobilityNote. May be SqlString.Null</LI>
		'''		 <LI>GradeBaseline. May be SqlString.Null</LI>
		'''		 <LI>ClassroomIDBaseline. May be SqlInt32.Null</LI>
		'''		 <LI>Behavior. May be SqlInt32.Null</LI>
		'''		 <LI>Performance. May be SqlInt32.Null</LI>
		'''		 <LI>SelectionOrder. May be SqlInt32.Null</LI>
		'''		 <LI>SelectionType. May be SqlString.Null</LI>
		'''		 <LI>StudentNumber. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>StudentID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SchoolID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _schoolID))
				cmdToExecute.Parameters.Add(New SqlParameter("@ClassroomID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Grade", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _grade))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityCode", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityNote", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityNote))
				cmdToExecute.Parameters.Add(New SqlParameter("@GradeBaseline", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _gradeBaseline))
				cmdToExecute.Parameters.Add(New SqlParameter("@ClassroomIDBaseline", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomIDBaseline))
				cmdToExecute.Parameters.Add(New SqlParameter("@Behavior", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _behavior))
				cmdToExecute.Parameters.Add(New SqlParameter("@Performance", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _performance))
				cmdToExecute.Parameters.Add(New SqlParameter("@SelectionOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _selectionOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@SelectionType", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _selectionType))
				cmdToExecute.Parameters.Add(New SqlParameter("@StudentNumber", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _studentNumber))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@StudentID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _studentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_studentID = CType(cmdToExecute.Parameters.Item("@StudentID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>StudentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>SchoolID. May be SqlInt32.Null</LI>
		'''		 <LI>ClassroomID. May be SqlInt32.Null</LI>
		'''		 <LI>Grade. May be SqlString.Null</LI>
		'''		 <LI>MobilityCode. May be SqlString.Null</LI>
		'''		 <LI>MobilityDate. May be SqlDateTime.Null</LI>
		'''		 <LI>MobilityNote. May be SqlString.Null</LI>
		'''		 <LI>GradeBaseline. May be SqlString.Null</LI>
		'''		 <LI>ClassroomIDBaseline. May be SqlInt32.Null</LI>
		'''		 <LI>Behavior. May be SqlInt32.Null</LI>
		'''		 <LI>Performance. May be SqlInt32.Null</LI>
		'''		 <LI>SelectionOrder. May be SqlInt32.Null</LI>
		'''		 <LI>SelectionType. May be SqlString.Null</LI>
		'''		 <LI>StudentNumber. May be SqlInt32.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@StudentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _studentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SchoolID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _schoolID))
				cmdToExecute.Parameters.Add(New SqlParameter("@ClassroomID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Grade", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _grade))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityCode", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityCode))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@MobilityNote", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityNote))
				cmdToExecute.Parameters.Add(New SqlParameter("@GradeBaseline", SqlDbType.VarChar, 2, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _gradeBaseline))
				cmdToExecute.Parameters.Add(New SqlParameter("@ClassroomIDBaseline", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomIDBaseline))
				cmdToExecute.Parameters.Add(New SqlParameter("@Behavior", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _behavior))
				cmdToExecute.Parameters.Add(New SqlParameter("@Performance", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _performance))
				cmdToExecute.Parameters.Add(New SqlParameter("@SelectionOrder", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _selectionOrder))
				cmdToExecute.Parameters.Add(New SqlParameter("@SelectionType", SqlDbType.Char, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _selectionType))
				cmdToExecute.Parameters.Add(New SqlParameter("@StudentNumber", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _studentNumber))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'MPRID.
		''' It will reset the field 'MPRID' in
		''' all rows which have as value for this field the value as set in property 'MPRIDOld' to 
		''' the value as set in property 'MPRID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		'''		 <LI>MPRIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWMPRIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_UpdateAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRIDOld", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 8, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_UpdateAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::UpdateAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SchoolID.
		''' It will reset the field 'SchoolID' in
		''' all rows which have as value for this field the value as set in property 'SchoolIDOld' to 
		''' the value as set in property 'SchoolID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SchoolID. May be SqlInt32.Null</LI>
		'''		 <LI>SchoolIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSchoolIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_UpdateAllWSchoolIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SchoolID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _schoolID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SchoolIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _schoolIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_UpdateAllWSchoolIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::UpdateAllWSchoolIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'ClassroomID.
		''' It will reset the field 'ClassroomID' in
		''' all rows which have as value for this field the value as set in property 'ClassroomIDOld' to 
		''' the value as set in property 'ClassroomID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>ClassroomID. May be SqlInt32.Null</LI>
		'''		 <LI>ClassroomIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWClassroomIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_UpdateAllWClassroomIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ClassroomID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _classroomID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ClassroomIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_UpdateAllWClassroomIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::UpdateAllWClassroomIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'MobilityCode.
		''' It will reset the field 'MobilityCode' in
		''' all rows which have as value for this field the value as set in property 'MobilityCodeOld' to 
		''' the value as set in property 'MobilityCode'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MobilityCode. May be SqlString.Null</LI>
		'''		 <LI>MobilityCodeOld. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWMobilityCodeLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_UpdateAllWMobilityCodeLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MobilityCode", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mobilityCode))
				cmdToExecute.Parameters.Add(new SqlParameter("@MobilityCodeOld", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityCodeOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 10, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_UpdateAllWMobilityCodeLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::UpdateAllWMobilityCodeLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>StudentID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@StudentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _studentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>StudentID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>StudentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>SchoolID</LI>
		'''		 <LI>ClassroomID</LI>
		'''		 <LI>Grade</LI>
		'''		 <LI>MobilityCode</LI>
		'''		 <LI>MobilityDate</LI>
		'''		 <LI>MobilityNote</LI>
		'''		 <LI>GradeBaseline</LI>
		'''		 <LI>ClassroomIDBaseline</LI>
		'''		 <LI>Behavior</LI>
		'''		 <LI>Performance</LI>
		'''		 <LI>SelectionOrder</LI>
		'''		 <LI>SelectionType</LI>
		'''		 <LI>StudentNumber</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@StudentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _studentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select a row from the database based on the unique field 'MPRID'
		''' </summary>
		''' <returns>A DataTable object if successful, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>StudentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>SchoolID</LI>
		'''		 <LI>ClassroomID</LI>
		'''		 <LI>Grade</LI>
		'''		 <LI>MobilityCode</LI>
		'''		 <LI>MobilityDate</LI>
		'''		 <LI>MobilityNote</LI>
		'''		 <LI>GradeBaseline</LI>
		'''		 <LI>ClassroomIDBaseline</LI>
		'''		 <LI>Behavior</LI>
		'''		 <LI>Performance</LI>
		'''		 <LI>SelectionOrder</LI>
		'''		 <LI>SelectionType</LI>
		'''		 <LI>StudentNumber</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>
		Public Function SelectOneWMPRIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectOneWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectOneWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectOneWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'MPRID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MPRID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWMPRIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectAllWMPRIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectAllWMPRIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectAllWMPRIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SchoolID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SchoolID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSchoolIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectAllWSchoolIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SchoolID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _schoolID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectAllWSchoolIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectAllWSchoolIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'ClassroomID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>ClassroomID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWClassroomIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectAllWClassroomIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ClassroomID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _classroomID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectAllWClassroomIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectAllWClassroomIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'MobilityCode'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>MobilityCode. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWMobilityCodeLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblStudent_SelectAllWMobilityCodeLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblStudent")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@MobilityCode", SqlDbType.VarChar, 10, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mobilityCode))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblStudent_SelectAllWMobilityCodeLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblStudent::SelectAllWMobilityCodeLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StudentID]() As SqlInt32
			Get
				Return _studentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _studentID.Equals(Value) Then
					If _studentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _studentID.Equals(_studentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim studentIDTmp As SqlInt32 = Value
				If studentIDTmp.IsNull Then
					Throw New NullValueException("StudentID", "StudentID can't be NULL")
				End If
				_studentID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=True, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				Dim mPRIDTmp As SqlString = Value
				If mPRIDTmp.IsNull Then
					Throw New NullValueException("MPRID", "MPRID can't be NULL")
				End If
				_mPRID = Value
			End Set
		End Property
		Protected Property [MPRIDOld]() As SqlString
			Get
				Return _mPRIDOld
			End Get
			Set(ByVal Value As SqlString)
				Dim mPRIDOldTmp As SqlString = Value
				If mPRIDOldTmp.IsNull Then
					Throw New NullValueException("MPRIDOld", "MPRIDOld can't be NULL")
				End If
				_mPRIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SchoolID]() As SqlInt32
			Get
				Return _schoolID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _schoolID.Equals(Value) Then
					If _schoolIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _schoolID.Equals(_schoolIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_schoolID = Value
			End Set
		End Property
		Protected Property [SchoolIDOld]() As SqlInt32
			Get
				Return _schoolIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_schoolIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ClassroomID]() As SqlInt32
			Get
				Return _classroomID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _classroomID.Equals(Value) Then
					If _classroomIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _classroomID.Equals(_classroomIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_classroomID = Value
			End Set
		End Property
		Protected Property [ClassroomIDOld]() As SqlInt32
			Get
				Return _classroomIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_classroomIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Grade]() As SqlString
			Get
				Return _grade
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _grade.IsNull Then
					CurrentValue = _grade.Value
				End If
				If Not _gradeOld.IsNull Then
					OldValue = _gradeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_grade = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('000')", _
		IsTimeStamp:=False)> _
		Public Property [MobilityCode]() As SqlString
			Get
				Return _mobilityCode
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mobilityCode.IsNull Then
					CurrentValue = _mobilityCode.Value
				End If
				If Not _mobilityCodeOld.IsNull Then
					OldValue = _mobilityCodeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mobilityCode = Value
			End Set
		End Property
		Protected Property [MobilityCodeOld]() As SqlString
			Get
				Return _mobilityCodeOld
			End Get
			Set(ByVal Value As SqlString)
				_mobilityCodeOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [MobilityDate]() As SqlDateTime
			Get
				Return _mobilityDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _mobilityDate.Equals(Value) Then
					If _mobilityDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mobilityDate.Equals(_mobilityDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mobilityDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MobilityNote]() As SqlString
			Get
				Return _mobilityNote
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mobilityNote.IsNull Then
					CurrentValue = _mobilityNote.Value
				End If
				If Not _mobilityNoteOld.IsNull Then
					OldValue = _mobilityNoteOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mobilityNote = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [GradeBaseline]() As SqlString
			Get
				Return _gradeBaseline
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _gradeBaseline.IsNull Then
					CurrentValue = _gradeBaseline.Value
				End If
				If Not _gradeBaselineOld.IsNull Then
					OldValue = _gradeBaselineOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_gradeBaseline = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ClassroomIDBaseline]() As SqlInt32
			Get
				Return _classroomIDBaseline
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _classroomIDBaseline.Equals(Value) Then
					If _classroomIDBaselineOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _classroomIDBaseline.Equals(_classroomIDBaselineOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_classroomIDBaseline = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Behavior]() As SqlInt32
			Get
				Return _behavior
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _behavior.Equals(Value) Then
					If _behaviorOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _behavior.Equals(_behaviorOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_behavior = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Performance]() As SqlInt32
			Get
				Return _performance
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _performance.Equals(Value) Then
					If _performanceOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _performance.Equals(_performanceOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_performance = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SelectionOrder]() As SqlInt32
			Get
				Return _selectionOrder
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _selectionOrder.Equals(Value) Then
					If _selectionOrderOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _selectionOrder.Equals(_selectionOrderOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_selectionOrder = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SelectionType]() As SqlString
			Get
				Return _selectionType
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _selectionType.IsNull Then
					CurrentValue = _selectionType.Value
				End If
				If Not _selectionTypeOld.IsNull Then
					OldValue = _selectionTypeOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_selectionType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StudentNumber]() As SqlInt32
			Get
				Return _studentNumber
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _studentNumber.Equals(Value) Then
					If _studentNumberOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _studentNumber.Equals(_studentNumberOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_studentNumber = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
