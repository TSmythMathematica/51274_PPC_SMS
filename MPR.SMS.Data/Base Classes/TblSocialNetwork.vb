' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:34 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblSocialNetwork.
	''' </summary>

	Public Class TblSocialNetwork
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _likeUs As SqlBoolean
		Private _likeUsOld As SqlBoolean

		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _sentRequestOn As SqlDateTime
		Private _sentRequestOnOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _sourceQualityID As SqlInt32
		Private _sourceQualityIDOld As SqlInt32
		Private _sourceTypeID As SqlInt32
		Private _sourceTypeIDOld As SqlInt32
		Private _socialNetworkID As SqlInt32
		Private _socialNetworkIDOld As SqlInt32
		Private _statusTypeID As SqlInt32
		Private _statusTypeIDOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _socialNetworkTypeID As SqlInt32
		Private _socialNetworkTypeIDOld As SqlInt32

		Private _bIN As SqlByte
		Private _bINOld As SqlByte
		Private _bPN As SqlByte
		Private _bPNOld As SqlByte

		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString
		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _userName As SqlString
		Private _userNameOld As SqlString
		Private _uRL As SqlString
		Private _uRLOld As SqlString
		Private _nameUsed As SqlString
		Private _nameUsedOld As SqlString

#End Region

		''' <overloads>
		''' The TblSocialNetwork constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblSocialNetwork class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblSocialNetwork class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblSocialNetwork class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_socialNetworkID = New SqlInt32(CType(objDataRow("SocialNetworkID"), Integer))
			
			_socialNetworkIDOld = _socialNetworkID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objDataRow("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objDataRow("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objDataRow("NameUsed") Is System.DBNull.Value Then
				_nameUsed = New SqlString("")
			Else
				_nameUsed = New SqlString(CType(objDataRow("NameUsed"), String))
			End If
			
			_nameUsedOld = _nameUsed
			
			If objDataRow("URL") Is System.DBNull.Value Then
				_uRL = New SqlString("")
			Else
				_uRL = New SqlString(CType(objDataRow("URL"), String))
			End If
			
			_uRLOld = _uRL
			
			If objDataRow("SocialNetworkTypeID") Is System.DBNull.Value Then
				_socialNetworkTypeID = SqlInt32.Null
			Else
				_socialNetworkTypeID = New SqlInt32(CType(objDataRow("SocialNetworkTypeID"), Integer))
			End If
			
			_socialNetworkTypeIDOld = _socialNetworkTypeID
			
			If objDataRow("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objDataRow("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objDataRow("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objDataRow("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objDataRow("StatusTypeID") Is System.DBNull.Value Then
				_statusTypeID = SqlInt32.Null
			Else
				_statusTypeID = New SqlInt32(CType(objDataRow("StatusTypeID"), Integer))
			End If
			
			_statusTypeIDOld = _statusTypeID
			
			If objDataRow("SentRequestOn") Is System.DBNull.Value Then
				_sentRequestOn = SqlDateTime.Null
			Else
				_sentRequestOn = New SqlDateTime(CType(objDataRow("SentRequestOn"), Date))
			End If
			
			_sentRequestOnOld = _sentRequestOn
			
			If objDataRow("LikeUs") Is System.DBNull.Value Then
				_likeUs = New SqlBoolean(False)
			Else
				_likeUs = New SqlBoolean(CType(objDataRow("LikeUs"), Boolean))
			End If
			
			_likeUsOld = _likeUs
			
			If objDataRow("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objDataRow("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objDataRow("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objDataRow("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objDataRow("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objDataRow("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_socialNetworkID = New SqlInt32(CType(objSqlDataReader("SocialNetworkID"), Integer))
			
			_socialNetworkIDOld = _socialNetworkID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			If objSqlDataReader("UserName") Is System.DBNull.Value Then
				_userName = New SqlString("")
			Else
				_userName = New SqlString(CType(objSqlDataReader("UserName"), String))
			End If
			
			_userNameOld = _userName
			
			If objSqlDataReader("NameUsed") Is System.DBNull.Value Then
				_nameUsed = New SqlString("")
			Else
				_nameUsed = New SqlString(CType(objSqlDataReader("NameUsed"), String))
			End If
			
			_nameUsedOld = _nameUsed
			
			If objSqlDataReader("URL") Is System.DBNull.Value Then
				_uRL = New SqlString("")
			Else
				_uRL = New SqlString(CType(objSqlDataReader("URL"), String))
			End If
			
			_uRLOld = _uRL
			
			If objSqlDataReader("SocialNetworkTypeID") Is System.DBNull.Value Then
				_socialNetworkTypeID = SqlInt32.Null
			Else
				_socialNetworkTypeID = New SqlInt32(CType(objSqlDataReader("SocialNetworkTypeID"), Integer))
			End If
			
			_socialNetworkTypeIDOld = _socialNetworkTypeID
			
			If objSqlDataReader("SourceTypeID") Is System.DBNull.Value Then
				_sourceTypeID = SqlInt32.Null
			Else
				_sourceTypeID = New SqlInt32(CType(objSqlDataReader("SourceTypeID"), Integer))
			End If
			
			_sourceTypeIDOld = _sourceTypeID
			
			If objSqlDataReader("SourceQualityID") Is System.DBNull.Value Then
				_sourceQualityID = SqlInt32.Null
			Else
				_sourceQualityID = New SqlInt32(CType(objSqlDataReader("SourceQualityID"), Integer))
			End If
			
			_sourceQualityIDOld = _sourceQualityID
			
			If objSqlDataReader("StatusTypeID") Is System.DBNull.Value Then
				_statusTypeID = SqlInt32.Null
			Else
				_statusTypeID = New SqlInt32(CType(objSqlDataReader("StatusTypeID"), Integer))
			End If
			
			_statusTypeIDOld = _statusTypeID
			
			If objSqlDataReader("SentRequestOn") Is System.DBNull.Value Then
				_sentRequestOn = SqlDateTime.Null
			Else
				_sentRequestOn = New SqlDateTime(CType(objSqlDataReader("SentRequestOn"), Date))
			End If
			
			_sentRequestOnOld = _sentRequestOn
			
			If objSqlDataReader("LikeUs") Is System.DBNull.Value Then
				_likeUs = New SqlBoolean(False)
			Else
				_likeUs = New SqlBoolean(CType(objSqlDataReader("LikeUs"), Boolean))
			End If
			
			_likeUsOld = _likeUs
			
			If objSqlDataReader("Notes") Is System.DBNull.Value Then
				_notes = New SqlString("")
			Else
				_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			End If
			
			_notesOld = _notes
			
			If objSqlDataReader("BPN") Is System.DBNull.Value Then
				_bPN = SqlByte.Null
			Else
				_bPN = New SqlByte(CType(objSqlDataReader("BPN"), Byte))
			End If
			
			_bPNOld = _bPN
			
			If objSqlDataReader("BIN") Is System.DBNull.Value Then
				_bIN = SqlByte.Null
			Else
				_bIN = New SqlByte(CType(objSqlDataReader("BIN"), Byte))
			End If
			
			_bINOld = _bIN
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			_userName = New SqlString("")
			_userNameOld = _userName
			
			_nameUsed = New SqlString("")
			_nameUsedOld = _nameUsed
			
			_uRL = New SqlString("")
			_uRLOld = _uRL
			
			
			
			
			
			
			_likeUs = New SqlBoolean(False)
			_likeUsOld = _likeUs
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_socialNetworkID = _socialNetworkIDOld
			
			_caseID = _caseIDOld
			
			_mPRID = _mPRIDOld
			
			_round = _roundOld
			
			_userName = _userNameOld
			
			_nameUsed = _nameUsedOld
			
			_uRL = _uRLOld
			
			_socialNetworkTypeID = _socialNetworkTypeIDOld
			
			_sourceTypeID = _sourceTypeIDOld
			
			_sourceQualityID = _sourceQualityIDOld
			
			_statusTypeID = _statusTypeIDOld
			
			_sentRequestOn = _sentRequestOnOld
			
			_likeUs = _likeUsOld
			
			_notes = _notesOld
			
			_bPN = _bPNOld
			
			_bIN = _bINOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>UserName. May be SqlString.Null</LI>
		'''		 <LI>NameUsed. May be SqlString.Null</LI>
		'''		 <LI>URL. May be SqlString.Null</LI>
		'''		 <LI>SocialNetworkTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>StatusTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SentRequestOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LikeUs. May be SqlBoolean.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>SocialNetworkID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@NameUsed", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _nameUsed))
				cmdToExecute.Parameters.Add(New SqlParameter("@URL", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _uRL))
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _statusTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SentRequestOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sentRequestOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LikeUs", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _likeUs))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@SocialNetworkID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_socialNetworkID = CType(cmdToExecute.Parameters.Item("@SocialNetworkID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SocialNetworkID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>UserName. May be SqlString.Null</LI>
		'''		 <LI>NameUsed. May be SqlString.Null</LI>
		'''		 <LI>URL. May be SqlString.Null</LI>
		'''		 <LI>SocialNetworkTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>StatusTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SentRequestOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LikeUs. May be SqlBoolean.Null</LI>
		'''		 <LI>Notes. May be SqlString.Null</LI>
		'''		 <LI>BPN. May be SqlByte.Null</LI>
		'''		 <LI>BIN. May be SqlByte.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _socialNetworkID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@UserName", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _userName))
				cmdToExecute.Parameters.Add(New SqlParameter("@NameUsed", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _nameUsed))
				cmdToExecute.Parameters.Add(New SqlParameter("@URL", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _uRL))
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _statusTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SentRequestOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sentRequestOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LikeUs", SqlDbType.Bit, 1, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _likeUs))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 2000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@BPN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bPN))
				cmdToExecute.Parameters.Add(New SqlParameter("@BIN", SqlDbType.TinyInt, 1, ParameterDirection.Input, True, 3, 0, "", DataRowVersion.Proposed, _bIN))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CaseID.
		''' It will reset the field 'CaseID' in
		''' all rows which have as value for this field the value as set in property 'CaseIDOld' to 
		''' the value as set in property 'CaseID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		'''		 <LI>CaseIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCaseIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_UpdateAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_UpdateAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::UpdateAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SocialNetworkTypeID.
		''' It will reset the field 'SocialNetworkTypeID' in
		''' all rows which have as value for this field the value as set in property 'SocialNetworkTypeIDOld' to 
		''' the value as set in property 'SocialNetworkTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SocialNetworkTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SocialNetworkTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSocialNetworkTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_UpdateAllWSocialNetworkTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SocialNetworkTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _socialNetworkTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SocialNetworkTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_UpdateAllWSocialNetworkTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::UpdateAllWSocialNetworkTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SourceTypeID.
		''' It will reset the field 'SourceTypeID' in
		''' all rows which have as value for this field the value as set in property 'SourceTypeIDOld' to 
		''' the value as set in property 'SourceTypeID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceTypeIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSourceTypeIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_UpdateAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_UpdateAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::UpdateAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'SourceQualityID.
		''' It will reset the field 'SourceQualityID' in
		''' all rows which have as value for this field the value as set in property 'SourceQualityIDOld' to 
		''' the value as set in property 'SourceQualityID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		'''		 <LI>SourceQualityIDOld. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWSourceQualityIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_UpdateAllWSourceQualityIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityIDOld", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_UpdateAllWSourceQualityIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::UpdateAllWSourceQualityIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SocialNetworkID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@SocialNetworkID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _socialNetworkID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SocialNetworkID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>SocialNetworkID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>UserName</LI>
		'''		 <LI>NameUsed</LI>
		'''		 <LI>URL</LI>
		'''		 <LI>SocialNetworkTypeID</LI>
		'''		 <LI>SourceTypeID</LI>
		'''		 <LI>SourceQualityID</LI>
		'''		 <LI>StatusTypeID</LI>
		'''		 <LI>SentRequestOn</LI>
		'''		 <LI>LikeUs</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>BPN</LI>
		'''		 <LI>BIN</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SocialNetworkID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _socialNetworkID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CaseID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CaseID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCaseIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectAllWCaseIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectAllWCaseIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectAllWCaseIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SocialNetworkTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SocialNetworkTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSocialNetworkTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectAllWSocialNetworkTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SocialNetworkTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _socialNetworkTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectAllWSocialNetworkTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectAllWSocialNetworkTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SourceTypeID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceTypeID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSourceTypeIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectAllWSourceTypeIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceTypeID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceTypeID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectAllWSourceTypeIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectAllWSourceTypeIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'SourceQualityID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>SourceQualityID. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWSourceQualityIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSocialNetwork_SelectAllWSourceQualityIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSocialNetwork")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SourceQualityID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _sourceQualityID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSocialNetwork_SelectAllWSourceQualityIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSocialNetwork::SelectAllWSourceQualityIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SocialNetworkID]() As SqlInt32
			Get
				Return _socialNetworkID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _socialNetworkID.Equals(Value) Then
					If _socialNetworkIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _socialNetworkID.Equals(_socialNetworkIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim socialNetworkIDTmp As SqlInt32 = Value
				If socialNetworkIDTmp.IsNull Then
					Throw New NullValueException("SocialNetworkID", "SocialNetworkID can't be NULL")
				End If
				_socialNetworkID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_caseID = Value
			End Set
		End Property
		Protected Property [CaseIDOld]() As SqlInt32
			Get
				Return _caseIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim caseIDOldTmp As SqlInt32 = Value
				If caseIDOldTmp.IsNull Then
					Throw New NullValueException("CaseIDOld", "CaseIDOld can't be NULL")
				End If
				_caseIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [UserName]() As SqlString
			Get
				Return _userName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _userName.IsNull Then
					CurrentValue = _userName.Value
				End If
				If Not _userNameOld.IsNull Then
					OldValue = _userNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_userName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [NameUsed]() As SqlString
			Get
				Return _nameUsed
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _nameUsed.IsNull Then
					CurrentValue = _nameUsed.Value
				End If
				If Not _nameUsedOld.IsNull Then
					OldValue = _nameUsedOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_nameUsed = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [URL]() As SqlString
			Get
				Return _uRL
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _uRL.IsNull Then
					CurrentValue = _uRL.Value
				End If
				If Not _uRLOld.IsNull Then
					OldValue = _uRLOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_uRL = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SocialNetworkTypeID]() As SqlInt32
			Get
				Return _socialNetworkTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _socialNetworkTypeID.Equals(Value) Then
					If _socialNetworkTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _socialNetworkTypeID.Equals(_socialNetworkTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_socialNetworkTypeID = Value
			End Set
		End Property
		Protected Property [SocialNetworkTypeIDOld]() As SqlInt32
			Get
				Return _socialNetworkTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_socialNetworkTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SourceTypeID]() As SqlInt32
			Get
				Return _sourceTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceTypeID.Equals(Value) Then
					If _sourceTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceTypeID.Equals(_sourceTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceTypeID = Value
			End Set
		End Property
		Protected Property [SourceTypeIDOld]() As SqlInt32
			Get
				Return _sourceTypeIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_sourceTypeIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SourceQualityID]() As SqlInt32
			Get
				Return _sourceQualityID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _sourceQualityID.Equals(Value) Then
					If _sourceQualityIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sourceQualityID.Equals(_sourceQualityIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sourceQualityID = Value
			End Set
		End Property
		Protected Property [SourceQualityIDOld]() As SqlInt32
			Get
				Return _sourceQualityIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				_sourceQualityIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusTypeID]() As SqlInt32
			Get
				Return _statusTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _statusTypeID.Equals(Value) Then
					If _statusTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _statusTypeID.Equals(_statusTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_statusTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SentRequestOn]() As SqlDateTime
			Get
				Return _sentRequestOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _sentRequestOn.Equals(Value) Then
					If _sentRequestOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _sentRequestOn.Equals(_sentRequestOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_sentRequestOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LikeUs]() As SqlBoolean
			Get
				Return _likeUs
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _likeUs.Equals(Value) Then
					If _likeUsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _likeUs.Equals(_likeUsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_likeUs = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BPN]() As SqlByte
			Get
				Return _bPN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bPN.Equals(Value) Then
					If _bPNOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bPN.Equals(_bPNOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bPN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [BIN]() As SqlByte
			Get
				Return _bIN
			End Get
			Set(ByVal Value As SqlByte)
				If Not _bIN.Equals(Value) Then
					If _bINOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _bIN.Equals(_bINOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_bIN = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="(getdate())", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
