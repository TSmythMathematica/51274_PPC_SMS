' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:33 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblMelissa_Results.
	''' </summary>

	Public Class TblMelissa_Results
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _emailID As SqlInt32
		Private _emailIDOld As SqlInt32
		Private _dataType As SqlInt32
		Private _dataTypeOld As SqlInt32
		Private _resultID As SqlInt32
		Private _resultIDOld As SqlInt32
		Private _phoneID As SqlInt32
		Private _phoneIDOld As SqlInt32
		Private _communicationID As SqlInt32
		Private _communicationIDOld As SqlInt32
		Private _addressID As SqlInt32
		Private _addressIDOld As SqlInt32

		Private _createdBy As SqlString
		Private _createdByOld As SqlString
		Private _returnCodeString As SqlString
		Private _returnCodeStringOld As SqlString
		Private _returnCodeDescription As SqlString
		Private _returnCodeDescriptionOld As SqlString
		Private _caseid As SqlString
		Private _caseidOld As SqlString
		Private _mPRID As SqlString
		Private _mPRIDOld As SqlString

#End Region

		''' <overloads>
		''' The TblMelissa_Results constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblMelissa_Results class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblMelissa_Results class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblMelissa_Results class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_resultID = New SqlInt32(CType(objDataRow("ResultID"), Integer))
			
			_resultIDOld = _resultID
			
			_communicationID = New SqlInt32(CType(objDataRow("CommunicationID"), Integer))
			
			_communicationIDOld = _communicationID
			
			If objDataRow("Caseid") Is System.DBNull.Value Then
				_caseid = New SqlString("")
			Else
				_caseid = New SqlString(CType(objDataRow("Caseid"), String))
			End If
			
			_caseidOld = _caseid
			
			If objDataRow("AddressID") Is System.DBNull.Value Then
				_addressID = SqlInt32.Null
			Else
				_addressID = New SqlInt32(CType(objDataRow("AddressID"), Integer))
			End If
			
			_addressIDOld = _addressID
			
			If objDataRow("PhoneID") Is System.DBNull.Value Then
				_phoneID = SqlInt32.Null
			Else
				_phoneID = New SqlInt32(CType(objDataRow("PhoneID"), Integer))
			End If
			
			_phoneIDOld = _phoneID
			
			If objDataRow("EmailID") Is System.DBNull.Value Then
				_emailID = SqlInt32.Null
			Else
				_emailID = New SqlInt32(CType(objDataRow("EmailID"), Integer))
			End If
			
			_emailIDOld = _emailID
			
			If objDataRow("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objDataRow("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objDataRow("DataType") Is System.DBNull.Value Then
				_dataType = SqlInt32.Null
			Else
				_dataType = New SqlInt32(CType(objDataRow("DataType"), Integer))
			End If
			
			_dataTypeOld = _dataType
			
			If objDataRow("ReturnCodeString") Is System.DBNull.Value Then
				_returnCodeString = New SqlString("")
			Else
				_returnCodeString = New SqlString(CType(objDataRow("ReturnCodeString"), String))
			End If
			
			_returnCodeStringOld = _returnCodeString
			
			If objDataRow("ReturnCodeDescription") Is System.DBNull.Value Then
				_returnCodeDescription = New SqlString("")
			Else
				_returnCodeDescription = New SqlString(CType(objDataRow("ReturnCodeDescription"), String))
			End If
			
			_returnCodeDescriptionOld = _returnCodeDescription
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_resultID = New SqlInt32(CType(objSqlDataReader("ResultID"), Integer))
			
			_resultIDOld = _resultID
			
			_communicationID = New SqlInt32(CType(objSqlDataReader("CommunicationID"), Integer))
			
			_communicationIDOld = _communicationID
			
			If objSqlDataReader("Caseid") Is System.DBNull.Value Then
				_caseid = New SqlString("")
			Else
				_caseid = New SqlString(CType(objSqlDataReader("Caseid"), String))
			End If
			
			_caseidOld = _caseid
			
			If objSqlDataReader("AddressID") Is System.DBNull.Value Then
				_addressID = SqlInt32.Null
			Else
				_addressID = New SqlInt32(CType(objSqlDataReader("AddressID"), Integer))
			End If
			
			_addressIDOld = _addressID
			
			If objSqlDataReader("PhoneID") Is System.DBNull.Value Then
				_phoneID = SqlInt32.Null
			Else
				_phoneID = New SqlInt32(CType(objSqlDataReader("PhoneID"), Integer))
			End If
			
			_phoneIDOld = _phoneID
			
			If objSqlDataReader("EmailID") Is System.DBNull.Value Then
				_emailID = SqlInt32.Null
			Else
				_emailID = New SqlInt32(CType(objSqlDataReader("EmailID"), Integer))
			End If
			
			_emailIDOld = _emailID
			
			If objSqlDataReader("MPRID") Is System.DBNull.Value Then
				_mPRID = New SqlString("")
			Else
				_mPRID = New SqlString(CType(objSqlDataReader("MPRID"), String))
			End If
			
			_mPRIDOld = _mPRID
			
			If objSqlDataReader("DataType") Is System.DBNull.Value Then
				_dataType = SqlInt32.Null
			Else
				_dataType = New SqlInt32(CType(objSqlDataReader("DataType"), Integer))
			End If
			
			_dataTypeOld = _dataType
			
			If objSqlDataReader("ReturnCodeString") Is System.DBNull.Value Then
				_returnCodeString = New SqlString("")
			Else
				_returnCodeString = New SqlString(CType(objSqlDataReader("ReturnCodeString"), String))
			End If
			
			_returnCodeStringOld = _returnCodeString
			
			If objSqlDataReader("ReturnCodeDescription") Is System.DBNull.Value Then
				_returnCodeDescription = New SqlString("")
			Else
				_returnCodeDescription = New SqlString(CType(objSqlDataReader("ReturnCodeDescription"), String))
			End If
			
			_returnCodeDescriptionOld = _returnCodeDescription
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			_caseid = New SqlString("")
			_caseidOld = _caseid
			
			
			
			
			_mPRID = New SqlString("")
			_mPRIDOld = _mPRID
			
			
			_returnCodeString = New SqlString("")
			_returnCodeStringOld = _returnCodeString
			
			_returnCodeDescription = New SqlString("")
			_returnCodeDescriptionOld = _returnCodeDescription
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_resultID = _resultIDOld
			
			_communicationID = _communicationIDOld
			
			_caseid = _caseidOld
			
			_addressID = _addressIDOld
			
			_phoneID = _phoneIDOld
			
			_emailID = _emailIDOld
			
			_mPRID = _mPRIDOld
			
			_dataType = _dataTypeOld
			
			_returnCodeString = _returnCodeStringOld
			
			_returnCodeDescription = _returnCodeDescriptionOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>CommunicationID</LI>
		'''		 <LI>Caseid. May be SqlString.Null</LI>
		'''		 <LI>AddressID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneID. May be SqlInt32.Null</LI>
		'''		 <LI>EmailID. May be SqlInt32.Null</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>DataType. May be SqlInt32.Null</LI>
		'''		 <LI>ReturnCodeString. May be SqlString.Null</LI>
		'''		 <LI>ReturnCodeDescription. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ResultID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@CommunicationID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _communicationID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Caseid", SqlDbType.NVarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _caseid))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmailID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _emailID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataType", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _dataType))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnCodeString", SqlDbType.NVarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnCodeString))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnCodeDescription", SqlDbType.NVarChar, 1000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnCodeDescription))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.NVarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ResultID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _resultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_resultID = CType(cmdToExecute.Parameters.Item("@ResultID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>ResultID</LI>
		'''		 <LI>CommunicationID</LI>
		'''		 <LI>Caseid. May be SqlString.Null</LI>
		'''		 <LI>AddressID. May be SqlInt32.Null</LI>
		'''		 <LI>PhoneID. May be SqlInt32.Null</LI>
		'''		 <LI>EmailID. May be SqlInt32.Null</LI>
		'''		 <LI>MPRID. May be SqlString.Null</LI>
		'''		 <LI>DataType. May be SqlInt32.Null</LI>
		'''		 <LI>ReturnCodeString. May be SqlString.Null</LI>
		'''		 <LI>ReturnCodeDescription. May be SqlString.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@ResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _resultID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CommunicationID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _communicationID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Caseid", SqlDbType.NVarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _caseid))
				cmdToExecute.Parameters.Add(New SqlParameter("@AddressID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _addressID))
				cmdToExecute.Parameters.Add(New SqlParameter("@PhoneID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _phoneID))
				cmdToExecute.Parameters.Add(New SqlParameter("@EmailID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _emailID))
				cmdToExecute.Parameters.Add(New SqlParameter("@MPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DataType", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _dataType))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnCodeString", SqlDbType.NVarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnCodeString))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReturnCodeDescription", SqlDbType.NVarChar, 1000, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _returnCodeDescription))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.NVarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'CommunicationID.
		''' It will reset the field 'CommunicationID' in
		''' all rows which have as value for this field the value as set in property 'CommunicationIDOld' to 
		''' the value as set in property 'CommunicationID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CommunicationID</LI>
		'''		 <LI>CommunicationIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWCommunicationIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_UpdateAllWCommunicationIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CommunicationID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _communicationID))
				cmdToExecute.Parameters.Add(new SqlParameter("@CommunicationIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _communicationIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_UpdateAllWCommunicationIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::UpdateAllWCommunicationIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>ResultID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@ResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _resultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>ResultID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>ResultID</LI>
		'''		 <LI>CommunicationID</LI>
		'''		 <LI>Caseid</LI>
		'''		 <LI>AddressID</LI>
		'''		 <LI>PhoneID</LI>
		'''		 <LI>EmailID</LI>
		'''		 <LI>MPRID</LI>
		'''		 <LI>DataType</LI>
		'''		 <LI>ReturnCodeString</LI>
		'''		 <LI>ReturnCodeDescription</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblMelissa_Results")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ResultID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _resultID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblMelissa_Results")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'CommunicationID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>CommunicationID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWCommunicationIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblMelissa_Results_SelectAllWCommunicationIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblMelissa_Results")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@CommunicationID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _communicationID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblMelissa_Results_SelectAllWCommunicationIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblMelissa_Results::SelectAllWCommunicationIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ResultID]() As SqlInt32
			Get
				Return _resultID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _resultID.Equals(Value) Then
					If _resultIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _resultID.Equals(_resultIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim resultIDTmp As SqlInt32 = Value
				If resultIDTmp.IsNull Then
					Throw New NullValueException("ResultID", "ResultID can't be NULL")
				End If
				_resultID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CommunicationID]() As SqlInt32
			Get
				Return _communicationID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _communicationID.Equals(Value) Then
					If _communicationIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _communicationID.Equals(_communicationIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim communicationIDTmp As SqlInt32 = Value
				If communicationIDTmp.IsNull Then
					Throw New NullValueException("CommunicationID", "CommunicationID can't be NULL")
				End If
				_communicationID = Value
			End Set
		End Property
		Protected Property [CommunicationIDOld]() As SqlInt32
			Get
				Return _communicationIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim communicationIDOldTmp As SqlInt32 = Value
				If communicationIDOldTmp.IsNull Then
					Throw New NullValueException("CommunicationIDOld", "CommunicationIDOld can't be NULL")
				End If
				_communicationIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Caseid]() As SqlString
			Get
				Return _caseid
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _caseid.IsNull Then
					CurrentValue = _caseid.Value
				End If
				If Not _caseidOld.IsNull Then
					OldValue = _caseidOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_caseid = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AddressID]() As SqlInt32
			Get
				Return _addressID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _addressID.Equals(Value) Then
					If _addressIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _addressID.Equals(_addressIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_addressID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PhoneID]() As SqlInt32
			Get
				Return _phoneID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _phoneID.Equals(Value) Then
					If _phoneIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _phoneID.Equals(_phoneIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_phoneID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [EmailID]() As SqlInt32
			Get
				Return _emailID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _emailID.Equals(Value) Then
					If _emailIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _emailID.Equals(_emailIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_emailID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MPRID]() As SqlString
			Get
				Return _mPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mPRID.IsNull Then
					CurrentValue = _mPRID.Value
				End If
				If Not _mPRIDOld.IsNull Then
					OldValue = _mPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DataType]() As SqlInt32
			Get
				Return _dataType
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _dataType.Equals(Value) Then
					If _dataTypeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dataType.Equals(_dataTypeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dataType = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReturnCodeString]() As SqlString
			Get
				Return _returnCodeString
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _returnCodeString.IsNull Then
					CurrentValue = _returnCodeString.Value
				End If
				If Not _returnCodeStringOld.IsNull Then
					OldValue = _returnCodeStringOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_returnCodeString = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReturnCodeDescription]() As SqlString
			Get
				Return _returnCodeDescription
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _returnCodeDescription.IsNull Then
					CurrentValue = _returnCodeDescription.Value
				End If
				If Not _returnCodeDescriptionOld.IsNull Then
					OldValue = _returnCodeDescriptionOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_returnCodeDescription = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
