' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:34 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblSite.
	''' </summary>

	Public Class TblSite
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _fIPS As SqlString
		Private _fIPSOld As SqlString

		Private _mSA As SqlInt32
		Private _mSAOld As SqlInt32
		Private _stateID As SqlInt32
		Private _stateIDOld As SqlInt32
		Private _region As SqlInt32
		Private _regionOld As SqlInt32
		Private _siteID As SqlInt32
		Private _siteIDOld As SqlInt32

		Private _coordinatorName As SqlString
		Private _coordinatorNameOld As SqlString
		Private _coordinatorPhone As SqlString
		Private _coordinatorPhoneOld As SqlString
		Private _coordinatorEmail As SqlString
		Private _coordinatorEmailOld As SqlString
		Private _mSAName As SqlString
		Private _mSANameOld As SqlString
		Private _name As SqlString
		Private _nameOld As SqlString
		Private _county As SqlString
		Private _countyOld As SqlString
		Private _pSU As SqlString
		Private _pSUOld As SqlString

#End Region

		''' <overloads>
		''' The TblSite constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblSite class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblSite class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblSite class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_siteID = New SqlInt32(CType(objDataRow("SiteID"), Integer))
			
			_siteIDOld = _siteID
			
			If objDataRow("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objDataRow("Name"), String))
			End If
			
			_nameOld = _name
			
			If objDataRow("PSU") Is System.DBNull.Value Then
				_pSU = New SqlString("")
			Else
				_pSU = New SqlString(CType(objDataRow("PSU"), String))
			End If
			
			_pSUOld = _pSU
			
			If objDataRow("FIPS") Is System.DBNull.Value Then
				_fIPS = New SqlString("")
			Else
				_fIPS = New SqlString(CType(objDataRow("FIPS"), String))
			End If
			
			_fIPSOld = _fIPS
			
			If objDataRow("StateID") Is System.DBNull.Value Then
				_stateID = SqlInt32.Null
			Else
				_stateID = New SqlInt32(CType(objDataRow("StateID"), Integer))
			End If
			
			_stateIDOld = _stateID
			
			If objDataRow("Region") Is System.DBNull.Value Then
				_region = SqlInt32.Null
			Else
				_region = New SqlInt32(CType(objDataRow("Region"), Integer))
			End If
			
			_regionOld = _region
			
			If objDataRow("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objDataRow("County"), String))
			End If
			
			_countyOld = _county
			
			If objDataRow("MSA") Is System.DBNull.Value Then
				_mSA = SqlInt32.Null
			Else
				_mSA = New SqlInt32(CType(objDataRow("MSA"), Integer))
			End If
			
			_mSAOld = _mSA
			
			If objDataRow("MSAName") Is System.DBNull.Value Then
				_mSAName = New SqlString("")
			Else
				_mSAName = New SqlString(CType(objDataRow("MSAName"), String))
			End If
			
			_mSANameOld = _mSAName
			
			If objDataRow("CoordinatorName") Is System.DBNull.Value Then
				_coordinatorName = New SqlString("")
			Else
				_coordinatorName = New SqlString(CType(objDataRow("CoordinatorName"), String))
			End If
			
			_coordinatorNameOld = _coordinatorName
			
			If objDataRow("CoordinatorPhone") Is System.DBNull.Value Then
				_coordinatorPhone = New SqlString("")
			Else
				_coordinatorPhone = New SqlString(CType(objDataRow("CoordinatorPhone"), String))
			End If
			
			_coordinatorPhoneOld = _coordinatorPhone
			
			If objDataRow("CoordinatorEmail") Is System.DBNull.Value Then
				_coordinatorEmail = New SqlString("")
			Else
				_coordinatorEmail = New SqlString(CType(objDataRow("CoordinatorEmail"), String))
			End If
			
			_coordinatorEmailOld = _coordinatorEmail
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_siteID = New SqlInt32(CType(objSqlDataReader("SiteID"), Integer))
			
			_siteIDOld = _siteID
			
			If objSqlDataReader("Name") Is System.DBNull.Value Then
				_name = New SqlString("")
			Else
				_name = New SqlString(CType(objSqlDataReader("Name"), String))
			End If
			
			_nameOld = _name
			
			If objSqlDataReader("PSU") Is System.DBNull.Value Then
				_pSU = New SqlString("")
			Else
				_pSU = New SqlString(CType(objSqlDataReader("PSU"), String))
			End If
			
			_pSUOld = _pSU
			
			If objSqlDataReader("FIPS") Is System.DBNull.Value Then
				_fIPS = New SqlString("")
			Else
				_fIPS = New SqlString(CType(objSqlDataReader("FIPS"), String))
			End If
			
			_fIPSOld = _fIPS
			
			If objSqlDataReader("StateID") Is System.DBNull.Value Then
				_stateID = SqlInt32.Null
			Else
				_stateID = New SqlInt32(CType(objSqlDataReader("StateID"), Integer))
			End If
			
			_stateIDOld = _stateID
			
			If objSqlDataReader("Region") Is System.DBNull.Value Then
				_region = SqlInt32.Null
			Else
				_region = New SqlInt32(CType(objSqlDataReader("Region"), Integer))
			End If
			
			_regionOld = _region
			
			If objSqlDataReader("County") Is System.DBNull.Value Then
				_county = New SqlString("")
			Else
				_county = New SqlString(CType(objSqlDataReader("County"), String))
			End If
			
			_countyOld = _county
			
			If objSqlDataReader("MSA") Is System.DBNull.Value Then
				_mSA = SqlInt32.Null
			Else
				_mSA = New SqlInt32(CType(objSqlDataReader("MSA"), Integer))
			End If
			
			_mSAOld = _mSA
			
			If objSqlDataReader("MSAName") Is System.DBNull.Value Then
				_mSAName = New SqlString("")
			Else
				_mSAName = New SqlString(CType(objSqlDataReader("MSAName"), String))
			End If
			
			_mSANameOld = _mSAName
			
			If objSqlDataReader("CoordinatorName") Is System.DBNull.Value Then
				_coordinatorName = New SqlString("")
			Else
				_coordinatorName = New SqlString(CType(objSqlDataReader("CoordinatorName"), String))
			End If
			
			_coordinatorNameOld = _coordinatorName
			
			If objSqlDataReader("CoordinatorPhone") Is System.DBNull.Value Then
				_coordinatorPhone = New SqlString("")
			Else
				_coordinatorPhone = New SqlString(CType(objSqlDataReader("CoordinatorPhone"), String))
			End If
			
			_coordinatorPhoneOld = _coordinatorPhone
			
			If objSqlDataReader("CoordinatorEmail") Is System.DBNull.Value Then
				_coordinatorEmail = New SqlString("")
			Else
				_coordinatorEmail = New SqlString(CType(objSqlDataReader("CoordinatorEmail"), String))
			End If
			
			_coordinatorEmailOld = _coordinatorEmail
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			_name = New SqlString("")
			_nameOld = _name
			
			_pSU = New SqlString("")
			_pSUOld = _pSU
			
			_fIPS = New SqlString("")
			_fIPSOld = _fIPS
			
			
			
			_county = New SqlString("")
			_countyOld = _county
			
			
			_mSAName = New SqlString("")
			_mSANameOld = _mSAName
			
			_coordinatorName = New SqlString("")
			_coordinatorNameOld = _coordinatorName
			
			_coordinatorPhone = New SqlString("")
			_coordinatorPhoneOld = _coordinatorPhone
			
			_coordinatorEmail = New SqlString("")
			_coordinatorEmailOld = _coordinatorEmail
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_siteID = _siteIDOld
			
			_name = _nameOld
			
			_pSU = _pSUOld
			
			_fIPS = _fIPSOld
			
			_stateID = _stateIDOld
			
			_region = _regionOld
			
			_county = _countyOld
			
			_mSA = _mSAOld
			
			_mSAName = _mSANameOld
			
			_coordinatorName = _coordinatorNameOld
			
			_coordinatorPhone = _coordinatorPhoneOld
			
			_coordinatorEmail = _coordinatorEmailOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>Name. May be SqlString.Null</LI>
		'''		 <LI>PSU. May be SqlString.Null</LI>
		'''		 <LI>FIPS. May be SqlString.Null</LI>
		'''		 <LI>StateID. May be SqlInt32.Null</LI>
		'''		 <LI>Region. May be SqlInt32.Null</LI>
		'''		 <LI>County. May be SqlString.Null</LI>
		'''		 <LI>MSA. May be SqlInt32.Null</LI>
		'''		 <LI>MSAName. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorName. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorPhone. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorEmail. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>SiteID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSite_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _name))
				cmdToExecute.Parameters.Add(New SqlParameter("@PSU", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _pSU))
				cmdToExecute.Parameters.Add(New SqlParameter("@FIPS", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _fIPS))
				cmdToExecute.Parameters.Add(New SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stateID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Region", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _region))
				cmdToExecute.Parameters.Add(New SqlParameter("@County", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _county))
				cmdToExecute.Parameters.Add(New SqlParameter("@MSA", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _mSA))
				cmdToExecute.Parameters.Add(New SqlParameter("@MSAName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mSAName))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorName", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorName))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorPhone", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorEmail", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorEmail))
				cmdToExecute.Parameters.Add(new SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_siteID = CType(cmdToExecute.Parameters.Item("@SiteID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSite_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSite::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SiteID</LI>
		'''		 <LI>Name. May be SqlString.Null</LI>
		'''		 <LI>PSU. May be SqlString.Null</LI>
		'''		 <LI>FIPS. May be SqlString.Null</LI>
		'''		 <LI>StateID. May be SqlInt32.Null</LI>
		'''		 <LI>Region. May be SqlInt32.Null</LI>
		'''		 <LI>County. May be SqlString.Null</LI>
		'''		 <LI>MSA. May be SqlInt32.Null</LI>
		'''		 <LI>MSAName. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorName. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorPhone. May be SqlString.Null</LI>
		'''		 <LI>CoordinatorEmail. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSite_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Name", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _name))
				cmdToExecute.Parameters.Add(New SqlParameter("@PSU", SqlDbType.VarChar, 6, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _pSU))
				cmdToExecute.Parameters.Add(New SqlParameter("@FIPS", SqlDbType.Char, 5, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _fIPS))
				cmdToExecute.Parameters.Add(New SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _stateID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Region", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _region))
				cmdToExecute.Parameters.Add(New SqlParameter("@County", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _county))
				cmdToExecute.Parameters.Add(New SqlParameter("@MSA", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _mSA))
				cmdToExecute.Parameters.Add(New SqlParameter("@MSAName", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _mSAName))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorName", SqlDbType.VarChar, 100, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorName))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorPhone", SqlDbType.VarChar, 25, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@CoordinatorEmail", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _coordinatorEmail))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSite_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSite::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SiteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSite_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSite_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSite::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>SiteID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>SiteID</LI>
		'''		 <LI>Name</LI>
		'''		 <LI>PSU</LI>
		'''		 <LI>FIPS</LI>
		'''		 <LI>StateID</LI>
		'''		 <LI>Region</LI>
		'''		 <LI>County</LI>
		'''		 <LI>MSA</LI>
		'''		 <LI>MSAName</LI>
		'''		 <LI>CoordinatorName</LI>
		'''		 <LI>CoordinatorPhone</LI>
		'''		 <LI>CoordinatorEmail</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSite_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSite")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@SiteID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _siteID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSite_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSite::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblSite_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblSite")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblSite_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblSite::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SiteID]() As SqlInt32
			Get
				Return _siteID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _siteID.Equals(Value) Then
					If _siteIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _siteID.Equals(_siteIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim siteIDTmp As SqlInt32 = Value
				If siteIDTmp.IsNull Then
					Throw New NullValueException("SiteID", "SiteID can't be NULL")
				End If
				_siteID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Name]() As SqlString
			Get
				Return _name
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _name.IsNull Then
					CurrentValue = _name.Value
				End If
				If Not _nameOld.IsNull Then
					OldValue = _nameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_name = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [PSU]() As SqlString
			Get
				Return _pSU
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _pSU.IsNull Then
					CurrentValue = _pSU.Value
				End If
				If Not _pSUOld.IsNull Then
					OldValue = _pSUOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_pSU = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [FIPS]() As SqlString
			Get
				Return _fIPS
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _fIPS.IsNull Then
					CurrentValue = _fIPS.Value
				End If
				If Not _fIPSOld.IsNull Then
					OldValue = _fIPSOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_fIPS = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StateID]() As SqlInt32
			Get
				Return _stateID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _stateID.Equals(Value) Then
					If _stateIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _stateID.Equals(_stateIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_stateID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Region]() As SqlInt32
			Get
				Return _region
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _region.Equals(Value) Then
					If _regionOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _region.Equals(_regionOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_region = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [County]() As SqlString
			Get
				Return _county
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _county.IsNull Then
					CurrentValue = _county.Value
				End If
				If Not _countyOld.IsNull Then
					OldValue = _countyOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_county = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MSA]() As SqlInt32
			Get
				Return _mSA
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _mSA.Equals(Value) Then
					If _mSAOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mSA.Equals(_mSAOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mSA = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MSAName]() As SqlString
			Get
				Return _mSAName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _mSAName.IsNull Then
					CurrentValue = _mSAName.Value
				End If
				If Not _mSANameOld.IsNull Then
					OldValue = _mSANameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_mSAName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CoordinatorName]() As SqlString
			Get
				Return _coordinatorName
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _coordinatorName.IsNull Then
					CurrentValue = _coordinatorName.Value
				End If
				If Not _coordinatorNameOld.IsNull Then
					OldValue = _coordinatorNameOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_coordinatorName = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CoordinatorPhone]() As SqlString
			Get
				Return _coordinatorPhone
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _coordinatorPhone.IsNull Then
					CurrentValue = _coordinatorPhone.Value
				End If
				If Not _coordinatorPhoneOld.IsNull Then
					OldValue = _coordinatorPhoneOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_coordinatorPhone = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CoordinatorEmail]() As SqlString
			Get
				Return _coordinatorEmail
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _coordinatorEmail.IsNull Then
					CurrentValue = _coordinatorEmail.Value
				End If
				If Not _coordinatorEmailOld.IsNull Then
					OldValue = _coordinatorEmailOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_coordinatorEmail = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
