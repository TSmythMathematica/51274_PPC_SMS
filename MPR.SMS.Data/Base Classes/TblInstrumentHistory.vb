' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:32 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblInstrumentHistory.
	''' </summary>

	Public Class TblInstrumentHistory
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _logicalStatus As SqlString
		Private _logicalStatusOld As SqlString
		Private _currentStatus As SqlString
		Private _currentStatusOld As SqlString

		Private _dateLastReceivedFromCATI As SqlDateTime
		Private _dateLastReceivedFromCATIOld As SqlDateTime
		Private _respondentDateLastPayment As SqlDateTime
		Private _respondentDateLastPaymentOld As SqlDateTime
		Private _statusChangeDate As SqlDateTime
		Private _statusChangeDateOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime
		Private _dateLastSentToCATI As SqlDateTime
		Private _dateLastSentToCATIOld As SqlDateTime
		Private _surveyorDateLastPayment As SqlDateTime
		Private _surveyorDateLastPaymentOld As SqlDateTime
		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime

		Private _surveyorAddressReviewID As SqlInt32
		Private _surveyorAddressReviewIDOld As SqlInt32
		Private _respondentAddressReviewID As SqlInt32
		Private _respondentAddressReviewIDOld As SqlInt32
		Private _currentPhone As SqlInt32
		Private _currentPhoneOld As SqlInt32
		Private _round As SqlInt32
		Private _roundOld As SqlInt32
		Private _instrumentTypeID As SqlInt32
		Private _instrumentTypeIDOld As SqlInt32
		Private _instrumentID As SqlInt32
		Private _instrumentIDOld As SqlInt32
		Private _caseID As SqlInt32
		Private _caseIDOld As SqlInt32
		Private _instrumentHistoryID As SqlInt32
		Private _instrumentHistoryIDOld As SqlInt32

		Private _releaseDate As SqlDateTime
		Private _releaseDateOld As SqlDateTime

		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _surveyLink As SqlString
		Private _surveyLinkOld As SqlString
		Private _currentRespondentMPRID As SqlString
		Private _currentRespondentMPRIDOld As SqlString
		Private _sampleMemberMPRID As SqlString
		Private _sampleMemberMPRIDOld As SqlString
		Private _statusChangedBy As SqlString
		Private _statusChangedByOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The TblInstrumentHistory constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblInstrumentHistory class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInstrumentHistory class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInstrumentHistory class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_instrumentHistoryID = New SqlInt32(CType(objDataRow("InstrumentHistoryID"), Integer))
			
			_instrumentHistoryIDOld = _instrumentHistoryID
			
			_instrumentID = New SqlInt32(CType(objDataRow("InstrumentID"), Integer))
			
			_instrumentIDOld = _instrumentID
			
			_caseID = New SqlInt32(CType(objDataRow("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objDataRow("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objDataRow("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_instrumentTypeID = New SqlInt32(CType(objDataRow("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objDataRow("SampleMemberMPRID") Is System.DBNull.Value Then
				_sampleMemberMPRID = New SqlString("")
			Else
				_sampleMemberMPRID = New SqlString(CType(objDataRow("SampleMemberMPRID"), String))
			End If
			
			_sampleMemberMPRIDOld = _sampleMemberMPRID
			
			If objDataRow("CurrentRespondentMPRID") Is System.DBNull.Value Then
				_currentRespondentMPRID = New SqlString("")
			Else
				_currentRespondentMPRID = New SqlString(CType(objDataRow("CurrentRespondentMPRID"), String))
			End If
			
			_currentRespondentMPRIDOld = _currentRespondentMPRID
			
			If objDataRow("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objDataRow("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objDataRow("LogicalStatus") Is System.DBNull.Value Then
				_logicalStatus = New SqlString("")
			Else
				_logicalStatus = New SqlString(CType(objDataRow("LogicalStatus"), String))
			End If
			
			_logicalStatusOld = _logicalStatus
			
			If objDataRow("StatusChangeDate") Is System.DBNull.Value Then
				_statusChangeDate = SqlDateTime.Null
			Else
				_statusChangeDate = New SqlDateTime(CType(objDataRow("StatusChangeDate"), Date))
			End If
			
			_statusChangeDateOld = _statusChangeDate
			
			If objDataRow("StatusChangedBy") Is System.DBNull.Value Then
				_statusChangedBy = New SqlString("")
			Else
				_statusChangedBy = New SqlString(CType(objDataRow("StatusChangedBy"), String))
			End If
			
			_statusChangedByOld = _statusChangedBy
			
			If objDataRow("DateLastSentToCATI") Is System.DBNull.Value Then
				_dateLastSentToCATI = SqlDateTime.Null
			Else
				_dateLastSentToCATI = New SqlDateTime(CType(objDataRow("DateLastSentToCATI"), Date))
			End If
			
			_dateLastSentToCATIOld = _dateLastSentToCATI
			
			If objDataRow("DateLastReceivedFromCATI") Is System.DBNull.Value Then
				_dateLastReceivedFromCATI = SqlDateTime.Null
			Else
				_dateLastReceivedFromCATI = New SqlDateTime(CType(objDataRow("DateLastReceivedFromCATI"), Date))
			End If
			
			_dateLastReceivedFromCATIOld = _dateLastReceivedFromCATI
			
			If objDataRow("ReleaseDate") Is System.DBNull.Value Then
				_releaseDate = SqlDateTime.Null
			Else
				_releaseDate = New SqlDateTime(CType(objDataRow("ReleaseDate"), Date))
			End If
			
			_releaseDateOld = _releaseDate
			
			If objDataRow("RespondentAddressReviewID") Is System.DBNull.Value Then
				_respondentAddressReviewID = SqlInt32.Null
			Else
				_respondentAddressReviewID = New SqlInt32(CType(objDataRow("RespondentAddressReviewID"), Integer))
			End If
			
			_respondentAddressReviewIDOld = _respondentAddressReviewID
			
			If objDataRow("RespondentDateLastPayment") Is System.DBNull.Value Then
				_respondentDateLastPayment = SqlDateTime.Null
			Else
				_respondentDateLastPayment = New SqlDateTime(CType(objDataRow("RespondentDateLastPayment"), Date))
			End If
			
			_respondentDateLastPaymentOld = _respondentDateLastPayment
			
			If objDataRow("SurveyorAddressReviewID") Is System.DBNull.Value Then
				_surveyorAddressReviewID = SqlInt32.Null
			Else
				_surveyorAddressReviewID = New SqlInt32(CType(objDataRow("SurveyorAddressReviewID"), Integer))
			End If
			
			_surveyorAddressReviewIDOld = _surveyorAddressReviewID
			
			If objDataRow("SurveyorDateLastPayment") Is System.DBNull.Value Then
				_surveyorDateLastPayment = SqlDateTime.Null
			Else
				_surveyorDateLastPayment = New SqlDateTime(CType(objDataRow("SurveyorDateLastPayment"), Date))
			End If
			
			_surveyorDateLastPaymentOld = _surveyorDateLastPayment
			
			If objDataRow("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objDataRow("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objDataRow("CurrentPhone") Is System.DBNull.Value Then
				_currentPhone = SqlInt32.Null
			Else
				_currentPhone = New SqlInt32(CType(objDataRow("CurrentPhone"), Integer))
			End If
			
			_currentPhoneOld = _currentPhone
			
			If objDataRow("SurveyLink") Is System.DBNull.Value Then
				_surveyLink = New SqlString("")
			Else
				_surveyLink = New SqlString(CType(objDataRow("SurveyLink"), String))
			End If
			
			_surveyLinkOld = _surveyLink
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_instrumentHistoryID = New SqlInt32(CType(objSqlDataReader("InstrumentHistoryID"), Integer))
			
			_instrumentHistoryIDOld = _instrumentHistoryID
			
			_instrumentID = New SqlInt32(CType(objSqlDataReader("InstrumentID"), Integer))
			
			_instrumentIDOld = _instrumentID
			
			_caseID = New SqlInt32(CType(objSqlDataReader("CaseID"), Integer))
			
			_caseIDOld = _caseID
			
			If objSqlDataReader("Round") Is System.DBNull.Value Then
				_round = SqlInt32.Null
			Else
				_round = New SqlInt32(CType(objSqlDataReader("Round"), Integer))
			End If
			
			_roundOld = _round
			
			_instrumentTypeID = New SqlInt32(CType(objSqlDataReader("InstrumentTypeID"), Integer))
			
			_instrumentTypeIDOld = _instrumentTypeID
			
			If objSqlDataReader("SampleMemberMPRID") Is System.DBNull.Value Then
				_sampleMemberMPRID = New SqlString("")
			Else
				_sampleMemberMPRID = New SqlString(CType(objSqlDataReader("SampleMemberMPRID"), String))
			End If
			
			_sampleMemberMPRIDOld = _sampleMemberMPRID
			
			If objSqlDataReader("CurrentRespondentMPRID") Is System.DBNull.Value Then
				_currentRespondentMPRID = New SqlString("")
			Else
				_currentRespondentMPRID = New SqlString(CType(objSqlDataReader("CurrentRespondentMPRID"), String))
			End If
			
			_currentRespondentMPRIDOld = _currentRespondentMPRID
			
			If objSqlDataReader("CurrentStatus") Is System.DBNull.Value Then
				_currentStatus = New SqlString("")
			Else
				_currentStatus = New SqlString(CType(objSqlDataReader("CurrentStatus"), String))
			End If
			
			_currentStatusOld = _currentStatus
			
			If objSqlDataReader("LogicalStatus") Is System.DBNull.Value Then
				_logicalStatus = New SqlString("")
			Else
				_logicalStatus = New SqlString(CType(objSqlDataReader("LogicalStatus"), String))
			End If
			
			_logicalStatusOld = _logicalStatus
			
			If objSqlDataReader("StatusChangeDate") Is System.DBNull.Value Then
				_statusChangeDate = SqlDateTime.Null
			Else
				_statusChangeDate = New SqlDateTime(CType(objSqlDataReader("StatusChangeDate"), Date))
			End If
			
			_statusChangeDateOld = _statusChangeDate
			
			If objSqlDataReader("StatusChangedBy") Is System.DBNull.Value Then
				_statusChangedBy = New SqlString("")
			Else
				_statusChangedBy = New SqlString(CType(objSqlDataReader("StatusChangedBy"), String))
			End If
			
			_statusChangedByOld = _statusChangedBy
			
			If objSqlDataReader("DateLastSentToCATI") Is System.DBNull.Value Then
				_dateLastSentToCATI = SqlDateTime.Null
			Else
				_dateLastSentToCATI = New SqlDateTime(CType(objSqlDataReader("DateLastSentToCATI"), Date))
			End If
			
			_dateLastSentToCATIOld = _dateLastSentToCATI
			
			If objSqlDataReader("DateLastReceivedFromCATI") Is System.DBNull.Value Then
				_dateLastReceivedFromCATI = SqlDateTime.Null
			Else
				_dateLastReceivedFromCATI = New SqlDateTime(CType(objSqlDataReader("DateLastReceivedFromCATI"), Date))
			End If
			
			_dateLastReceivedFromCATIOld = _dateLastReceivedFromCATI
			
			If objSqlDataReader("ReleaseDate") Is System.DBNull.Value Then
				_releaseDate = SqlDateTime.Null
			Else
				_releaseDate = New SqlDateTime(CType(objSqlDataReader("ReleaseDate"), Date))
			End If
			
			_releaseDateOld = _releaseDate
			
			If objSqlDataReader("RespondentAddressReviewID") Is System.DBNull.Value Then
				_respondentAddressReviewID = SqlInt32.Null
			Else
				_respondentAddressReviewID = New SqlInt32(CType(objSqlDataReader("RespondentAddressReviewID"), Integer))
			End If
			
			_respondentAddressReviewIDOld = _respondentAddressReviewID
			
			If objSqlDataReader("RespondentDateLastPayment") Is System.DBNull.Value Then
				_respondentDateLastPayment = SqlDateTime.Null
			Else
				_respondentDateLastPayment = New SqlDateTime(CType(objSqlDataReader("RespondentDateLastPayment"), Date))
			End If
			
			_respondentDateLastPaymentOld = _respondentDateLastPayment
			
			If objSqlDataReader("SurveyorAddressReviewID") Is System.DBNull.Value Then
				_surveyorAddressReviewID = SqlInt32.Null
			Else
				_surveyorAddressReviewID = New SqlInt32(CType(objSqlDataReader("SurveyorAddressReviewID"), Integer))
			End If
			
			_surveyorAddressReviewIDOld = _surveyorAddressReviewID
			
			If objSqlDataReader("SurveyorDateLastPayment") Is System.DBNull.Value Then
				_surveyorDateLastPayment = SqlDateTime.Null
			Else
				_surveyorDateLastPayment = New SqlDateTime(CType(objSqlDataReader("SurveyorDateLastPayment"), Date))
			End If
			
			_surveyorDateLastPaymentOld = _surveyorDateLastPayment
			
			If objSqlDataReader("CreatedBy") Is System.DBNull.Value Then
				_createdBy = New SqlString("")
			Else
				_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			End If
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			If objSqlDataReader("LastModifiedBy") Is System.DBNull.Value Then
				_lastModifiedBy = New SqlString("")
			Else
				_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			End If
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objSqlDataReader("CurrentPhone") Is System.DBNull.Value Then
				_currentPhone = SqlInt32.Null
			Else
				_currentPhone = New SqlInt32(CType(objSqlDataReader("CurrentPhone"), Integer))
			End If
			
			_currentPhoneOld = _currentPhone
			
			If objSqlDataReader("SurveyLink") Is System.DBNull.Value Then
				_surveyLink = New SqlString("")
			Else
				_surveyLink = New SqlString(CType(objSqlDataReader("SurveyLink"), String))
			End If
			
			_surveyLinkOld = _surveyLink
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			
			
			_sampleMemberMPRID = New SqlString("")
			_sampleMemberMPRIDOld = _sampleMemberMPRID
			
			_currentRespondentMPRID = New SqlString("")
			_currentRespondentMPRIDOld = _currentRespondentMPRID
			
			_currentStatus = New SqlString("")
			_currentStatusOld = _currentStatus
			
			_logicalStatus = New SqlString("")
			_logicalStatusOld = _logicalStatus
			
			
			_statusChangedBy = New SqlString("")
			_statusChangedByOld = _statusChangedBy
			
			
			
			
			
			
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			
			_surveyLink = New SqlString("")
			_surveyLinkOld = _surveyLink
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_instrumentHistoryID = _instrumentHistoryIDOld
			
			_instrumentID = _instrumentIDOld
			
			_caseID = _caseIDOld
			
			_round = _roundOld
			
			_instrumentTypeID = _instrumentTypeIDOld
			
			_sampleMemberMPRID = _sampleMemberMPRIDOld
			
			_currentRespondentMPRID = _currentRespondentMPRIDOld
			
			_currentStatus = _currentStatusOld
			
			_logicalStatus = _logicalStatusOld
			
			_statusChangeDate = _statusChangeDateOld
			
			_statusChangedBy = _statusChangedByOld
			
			_dateLastSentToCATI = _dateLastSentToCATIOld
			
			_dateLastReceivedFromCATI = _dateLastReceivedFromCATIOld
			
			_releaseDate = _releaseDateOld
			
			_respondentAddressReviewID = _respondentAddressReviewIDOld
			
			_respondentDateLastPayment = _respondentDateLastPaymentOld
			
			_surveyorAddressReviewID = _surveyorAddressReviewIDOld
			
			_surveyorDateLastPayment = _surveyorDateLastPaymentOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			_currentPhone = _currentPhoneOld
			
			_surveyLink = _surveyLinkOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>SampleMemberMPRID. May be SqlString.Null</LI>
		'''		 <LI>CurrentRespondentMPRID. May be SqlString.Null</LI>
		'''		 <LI>CurrentStatus. May be SqlString.Null</LI>
		'''		 <LI>LogicalStatus. May be SqlString.Null</LI>
		'''		 <LI>StatusChangeDate. May be SqlDateTime.Null</LI>
		'''		 <LI>StatusChangedBy. May be SqlString.Null</LI>
		'''		 <LI>DateLastSentToCATI. May be SqlDateTime.Null</LI>
		'''		 <LI>DateLastReceivedFromCATI. May be SqlDateTime.Null</LI>
		'''		 <LI>ReleaseDate. May be SqlDateTime.Null</LI>
		'''		 <LI>RespondentAddressReviewID. May be SqlInt32.Null</LI>
		'''		 <LI>RespondentDateLastPayment. May be SqlDateTime.Null</LI>
		'''		 <LI>SurveyorAddressReviewID. May be SqlInt32.Null</LI>
		'''		 <LI>SurveyorDateLastPayment. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CurrentPhone. May be SqlInt32.Null</LI>
		'''		 <LI>SurveyLink. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>InstrumentHistoryID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SampleMemberMPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sampleMemberMPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentRespondentMPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentRespondentMPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@LogicalStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _logicalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusChangeDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusChangeDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusChangedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusChangedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateLastSentToCATI", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateLastSentToCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateLastReceivedFromCATI", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateLastReceivedFromCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReleaseDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _releaseDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@RespondentAddressReviewID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _respondentAddressReviewID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RespondentDateLastPayment", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _respondentDateLastPayment))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyorAddressReviewID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _surveyorAddressReviewID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyorDateLastPayment", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyorDateLastPayment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentPhone", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _currentPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyLink", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyLink))
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentHistoryID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _instrumentHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_instrumentHistoryID = CType(cmdToExecute.Parameters.Item("@InstrumentHistoryID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentHistoryID</LI>
		'''		 <LI>InstrumentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round. May be SqlInt32.Null</LI>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>SampleMemberMPRID. May be SqlString.Null</LI>
		'''		 <LI>CurrentRespondentMPRID. May be SqlString.Null</LI>
		'''		 <LI>CurrentStatus. May be SqlString.Null</LI>
		'''		 <LI>LogicalStatus. May be SqlString.Null</LI>
		'''		 <LI>StatusChangeDate. May be SqlDateTime.Null</LI>
		'''		 <LI>StatusChangedBy. May be SqlString.Null</LI>
		'''		 <LI>DateLastSentToCATI. May be SqlDateTime.Null</LI>
		'''		 <LI>DateLastReceivedFromCATI. May be SqlDateTime.Null</LI>
		'''		 <LI>ReleaseDate. May be SqlDateTime.Null</LI>
		'''		 <LI>RespondentAddressReviewID. May be SqlInt32.Null</LI>
		'''		 <LI>RespondentDateLastPayment. May be SqlDateTime.Null</LI>
		'''		 <LI>SurveyorAddressReviewID. May be SqlInt32.Null</LI>
		'''		 <LI>SurveyorDateLastPayment. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy. May be SqlString.Null</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy. May be SqlString.Null</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CurrentPhone. May be SqlInt32.Null</LI>
		'''		 <LI>SurveyLink. May be SqlString.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentHistoryID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CaseID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _caseID))
				cmdToExecute.Parameters.Add(New SqlParameter("@Round", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _round))
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentTypeID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentTypeID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SampleMemberMPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _sampleMemberMPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentRespondentMPRID", SqlDbType.VarChar, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentRespondentMPRID))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _currentStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@LogicalStatus", SqlDbType.Char, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _logicalStatus))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusChangeDate", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusChangeDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@StatusChangedBy", SqlDbType.VarChar, 50, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _statusChangedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateLastSentToCATI", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateLastSentToCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateLastReceivedFromCATI", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateLastReceivedFromCATI))
				cmdToExecute.Parameters.Add(New SqlParameter("@ReleaseDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _releaseDate))
				cmdToExecute.Parameters.Add(New SqlParameter("@RespondentAddressReviewID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _respondentAddressReviewID))
				cmdToExecute.Parameters.Add(New SqlParameter("@RespondentDateLastPayment", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _respondentDateLastPayment))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyorAddressReviewID", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _surveyorAddressReviewID))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyorDateLastPayment", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyorDateLastPayment))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CurrentPhone", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _currentPhone))
				cmdToExecute.Parameters.Add(New SqlParameter("@SurveyLink", SqlDbType.VarChar, 255, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _surveyLink))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InstrumentID.
		''' It will reset the field 'InstrumentID' in
		''' all rows which have as value for this field the value as set in property 'InstrumentIDOld' to 
		''' the value as set in property 'InstrumentID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InstrumentID</LI>
		'''		 <LI>InstrumentIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInstrumentIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_UpdateAllWInstrumentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _instrumentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_UpdateAllWInstrumentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::UpdateAllWInstrumentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentHistoryID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InstrumentHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InstrumentHistoryID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InstrumentHistoryID</LI>
		'''		 <LI>InstrumentID</LI>
		'''		 <LI>CaseID</LI>
		'''		 <LI>Round</LI>
		'''		 <LI>InstrumentTypeID</LI>
		'''		 <LI>SampleMemberMPRID</LI>
		'''		 <LI>CurrentRespondentMPRID</LI>
		'''		 <LI>CurrentStatus</LI>
		'''		 <LI>LogicalStatus</LI>
		'''		 <LI>StatusChangeDate</LI>
		'''		 <LI>StatusChangedBy</LI>
		'''		 <LI>DateLastSentToCATI</LI>
		'''		 <LI>DateLastReceivedFromCATI</LI>
		'''		 <LI>ReleaseDate</LI>
		'''		 <LI>RespondentAddressReviewID</LI>
		'''		 <LI>RespondentDateLastPayment</LI>
		'''		 <LI>SurveyorAddressReviewID</LI>
		'''		 <LI>SurveyorDateLastPayment</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>CurrentPhone</LI>
		'''		 <LI>SurveyLink</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInstrumentHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentHistoryID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentHistoryID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInstrumentHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InstrumentID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InstrumentID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInstrumentIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInstrumentHistory_SelectAllWInstrumentIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInstrumentHistory")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InstrumentID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _instrumentID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInstrumentHistory_SelectAllWInstrumentIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInstrumentHistory::SelectAllWInstrumentIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentHistoryID]() As SqlInt32
			Get
				Return _instrumentHistoryID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentHistoryID.Equals(Value) Then
					If _instrumentHistoryIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentHistoryID.Equals(_instrumentHistoryIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim instrumentHistoryIDTmp As SqlInt32 = Value
				If instrumentHistoryIDTmp.IsNull Then
					Throw New NullValueException("InstrumentHistoryID", "InstrumentHistoryID can't be NULL")
				End If
				_instrumentHistoryID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentID]() As SqlInt32
			Get
				Return _instrumentID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentID.Equals(Value) Then
					If _instrumentIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentID.Equals(_instrumentIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim instrumentIDTmp As SqlInt32 = Value
				If instrumentIDTmp.IsNull Then
					Throw New NullValueException("InstrumentID", "InstrumentID can't be NULL")
				End If
				_instrumentID = Value
			End Set
		End Property
		Protected Property [InstrumentIDOld]() As SqlInt32
			Get
				Return _instrumentIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim instrumentIDOldTmp As SqlInt32 = Value
				If instrumentIDOldTmp.IsNull Then
					Throw New NullValueException("InstrumentIDOld", "InstrumentIDOld can't be NULL")
				End If
				_instrumentIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CaseID]() As SqlInt32
			Get
				Return _caseID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _caseID.Equals(Value) Then
					If _caseIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _caseID.Equals(_caseIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim caseIDTmp As SqlInt32 = Value
				If caseIDTmp.IsNull Then
					Throw New NullValueException("CaseID", "CaseID can't be NULL")
				End If
				_caseID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Round]() As SqlInt32
			Get
				Return _round
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _round.Equals(Value) Then
					If _roundOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _round.Equals(_roundOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_round = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InstrumentTypeID]() As SqlInt32
			Get
				Return _instrumentTypeID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _instrumentTypeID.Equals(Value) Then
					If _instrumentTypeIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _instrumentTypeID.Equals(_instrumentTypeIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim instrumentTypeIDTmp As SqlInt32 = Value
				If instrumentTypeIDTmp.IsNull Then
					Throw New NullValueException("InstrumentTypeID", "InstrumentTypeID can't be NULL")
				End If
				_instrumentTypeID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SampleMemberMPRID]() As SqlString
			Get
				Return _sampleMemberMPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _sampleMemberMPRID.IsNull Then
					CurrentValue = _sampleMemberMPRID.Value
				End If
				If Not _sampleMemberMPRIDOld.IsNull Then
					OldValue = _sampleMemberMPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_sampleMemberMPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentRespondentMPRID]() As SqlString
			Get
				Return _currentRespondentMPRID
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _currentRespondentMPRID.IsNull Then
					CurrentValue = _currentRespondentMPRID.Value
				End If
				If Not _currentRespondentMPRIDOld.IsNull Then
					OldValue = _currentRespondentMPRIDOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_currentRespondentMPRID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentStatus]() As SqlString
			Get
				Return _currentStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _currentStatus.IsNull Then
					CurrentValue = _currentStatus.Value
				End If
				If Not _currentStatusOld.IsNull Then
					OldValue = _currentStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_currentStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LogicalStatus]() As SqlString
			Get
				Return _logicalStatus
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _logicalStatus.IsNull Then
					CurrentValue = _logicalStatus.Value
				End If
				If Not _logicalStatusOld.IsNull Then
					OldValue = _logicalStatusOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_logicalStatus = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusChangeDate]() As SqlDateTime
			Get
				Return _statusChangeDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _statusChangeDate.Equals(Value) Then
					If _statusChangeDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _statusChangeDate.Equals(_statusChangeDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_statusChangeDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [StatusChangedBy]() As SqlString
			Get
				Return _statusChangedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _statusChangedBy.IsNull Then
					CurrentValue = _statusChangedBy.Value
				End If
				If Not _statusChangedByOld.IsNull Then
					OldValue = _statusChangedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_statusChangedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateLastSentToCATI]() As SqlDateTime
			Get
				Return _dateLastSentToCATI
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateLastSentToCATI.Equals(Value) Then
					If _dateLastSentToCATIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateLastSentToCATI.Equals(_dateLastSentToCATIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateLastSentToCATI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateLastReceivedFromCATI]() As SqlDateTime
			Get
				Return _dateLastReceivedFromCATI
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateLastReceivedFromCATI.Equals(Value) Then
					If _dateLastReceivedFromCATIOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateLastReceivedFromCATI.Equals(_dateLastReceivedFromCATIOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateLastReceivedFromCATI = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [ReleaseDate]() As SqlDateTime
			Get
				Return _releaseDate
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _releaseDate.Equals(Value) Then
					If _releaseDateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _releaseDate.Equals(_releaseDateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_releaseDate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RespondentAddressReviewID]() As SqlInt32
			Get
				Return _respondentAddressReviewID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _respondentAddressReviewID.Equals(Value) Then
					If _respondentAddressReviewIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _respondentAddressReviewID.Equals(_respondentAddressReviewIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_respondentAddressReviewID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [RespondentDateLastPayment]() As SqlDateTime
			Get
				Return _respondentDateLastPayment
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _respondentDateLastPayment.Equals(Value) Then
					If _respondentDateLastPaymentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _respondentDateLastPayment.Equals(_respondentDateLastPaymentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_respondentDateLastPayment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SurveyorAddressReviewID]() As SqlInt32
			Get
				Return _surveyorAddressReviewID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _surveyorAddressReviewID.Equals(Value) Then
					If _surveyorAddressReviewIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _surveyorAddressReviewID.Equals(_surveyorAddressReviewIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_surveyorAddressReviewID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SurveyorDateLastPayment]() As SqlDateTime
			Get
				Return _surveyorDateLastPayment
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _surveyorDateLastPayment.Equals(Value) Then
					If _surveyorDateLastPaymentOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _surveyorDateLastPayment.Equals(_surveyorDateLastPaymentOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_surveyorDateLastPayment = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CurrentPhone]() As SqlInt32
			Get
				Return _currentPhone
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _currentPhone.Equals(Value) Then
					If _currentPhoneOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _currentPhone.Equals(_currentPhoneOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_currentPhone = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SurveyLink]() As SqlString
			Get
				Return _surveyLink
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _surveyLink.IsNull Then
					CurrentValue = _surveyLink.Value
				End If
				If Not _surveyLinkOld.IsNull Then
					OldValue = _surveyLinkOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_surveyLink = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
