' Generated by the MPR.Data.Access.Wizard on Friday, April 16, 2021, 11:56:32 AM

Imports System
Imports System.Data
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Data.SqlClient

Namespace BaseClasses

	''' <summary>
	''' Data access class for the table named tblInterviewerTracking.
	''' </summary>

	Public Class TblInterviewerTracking
		Inherits DBInteractionBase

#Region "Private Fields"

		Private _suppliesChecklist As SqlBoolean
		Private _suppliesChecklistOld As SqlBoolean
		Private _suppliesWYWO As SqlBoolean
		Private _suppliesWYWOOld As SqlBoolean
		Private _suppliesExpRep As SqlBoolean
		Private _suppliesExpRepOld As SqlBoolean
		Private _suppliesBrochure As SqlBoolean
		Private _suppliesBrochureOld As SqlBoolean
		Private _suppliesFedEx As SqlBoolean
		Private _suppliesFedExOld As SqlBoolean

		Private _createdOn As SqlDateTime
		Private _createdOnOld As SqlDateTime
		Private _suppliesPrintedOn As SqlDateTime
		Private _suppliesPrintedOnOld As SqlDateTime
		Private _lastModifiedOn As SqlDateTime
		Private _lastModifiedOnOld As SqlDateTime

		Private _giftCards As SqlInt32
		Private _giftCardsOld As SqlInt32
		Private _interviewerTrackingID As SqlInt32
		Private _interviewerTrackingIDOld As SqlInt32
		Private _interviewerID As SqlInt32
		Private _interviewerIDOld As SqlInt32

		Private _airTravel As SqlMoney
		Private _airTravelOld As SqlMoney
		Private _expenses As SqlMoney
		Private _expensesOld As SqlMoney
		Private _carRental As SqlMoney
		Private _carRentalOld As SqlMoney
		Private _mileageExpense As SqlMoney
		Private _mileageExpenseOld As SqlMoney

		Private _hoursAdministrative As SqlSingle
		Private _hoursAdministrativeOld As SqlSingle
		Private _hoursTraveling As SqlSingle
		Private _hoursTravelingOld As SqlSingle
		Private _hours As SqlSingle
		Private _hoursOld As SqlSingle
		Private _hoursLocating As SqlSingle
		Private _hoursLocatingOld As SqlSingle
		Private _mileage As SqlSingle
		Private _mileageOld As SqlSingle
		Private _mileageRate As SqlSingle
		Private _mileageRateOld As SqlSingle
		Private _hoursInterviewing As SqlSingle
		Private _hoursInterviewingOld As SqlSingle
		Private _hoursOther As SqlSingle
		Private _hoursOtherOld As SqlSingle

		Private _dateReported As SqlDateTime
		Private _dateReportedOld As SqlDateTime
		Private _weekEnd As SqlDateTime
		Private _weekEndOld As SqlDateTime
		Private _weekBeg As SqlDateTime
		Private _weekBegOld As SqlDateTime

		Private _notes As SqlString
		Private _notesOld As SqlString
		Private _lastModifiedBy As SqlString
		Private _lastModifiedByOld As SqlString
		Private _suppliesOther As SqlString
		Private _suppliesOtherOld As SqlString
		Private _suppliesPrintedBy As SqlString
		Private _suppliesPrintedByOld As SqlString
		Private _createdBy As SqlString
		Private _createdByOld As SqlString

#End Region

		''' <overloads>
		''' The TblInterviewerTracking constructor has two overloads.
		''' </overloads>
		''' <summary>
		''' Initializes a new instance of the TblInterviewerTracking class.
		''' </summary>

		Public Sub New()

			FillDefaultProperties()

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInterviewerTracking class.
		''' </summary>
		''' <param name="objDataRow">
		''' A DataRow object that contains the values that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objDataRow As DataRow)

			FillProperties(objDataRow)

		End Sub

		''' <summary>
		''' Initializes a new instance of the TblInterviewerTracking class.
		''' </summary>
		''' <param name="objSqlDataReader">
		''' An SqlDataReader object that that will be used to initialize the object.
		''' </param>

		Public Sub New(ByVal objSqlDataReader As SqlDataReader)

			FillProperties(objSqlDataReader)

		End Sub

		Friend Sub ResetModified()

			Dim pi As PropertyInfo

			Dim myType As System.Type = System.Type.GetType(Me.GetType().BaseType.FullName)

			Dim piCollection() As PropertyInfo = myType.GetProperties()

			For Each pi In piCollection
				If myType.BaseType.GetProperty(pi.Name) Is Nothing Then
					Dim strFieldName As String = "_" + pi.Name.SubString(0, 1).ToLower() + pi.Name.SubString(1, pi.Name.Length - 1) + "Old"
					Dim fi As FieldInfo = myType.GetField(strFieldName, BindingFlags.Instance Or BindingFlags.DeclaredOnly Or BindingFlags.NonPublic)
					If Not fi Is Nothing Then
						fi.SetValue(Me, pi.GetValue(Me, Nothing))
					End If
				End If
			Next

			ModifiedColumnCount = 0

		End Sub
			
		Private Sub FillProperties(ByVal objDataRow As DataRow)

			
			_interviewerTrackingID = New SqlInt32(CType(objDataRow("InterviewerTrackingID"), Integer))
			
			_interviewerTrackingIDOld = _interviewerTrackingID
			
			_interviewerID = New SqlInt32(CType(objDataRow("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objDataRow("DateReported") Is System.DBNull.Value Then
				_dateReported = SqlDateTime.Null
			Else
				_dateReported = New SqlDateTime(CType(objDataRow("DateReported"), Date))
			End If
			
			_dateReportedOld = _dateReported
			
			If objDataRow("WeekBeg") Is System.DBNull.Value Then
				_weekBeg = SqlDateTime.Null
			Else
				_weekBeg = New SqlDateTime(CType(objDataRow("WeekBeg"), Date))
			End If
			
			_weekBegOld = _weekBeg
			
			If objDataRow("WeekEnd") Is System.DBNull.Value Then
				_weekEnd = SqlDateTime.Null
			Else
				_weekEnd = New SqlDateTime(CType(objDataRow("WeekEnd"), Date))
			End If
			
			_weekEndOld = _weekEnd
			
			If objDataRow("Hours") Is System.DBNull.Value Then
				_hours = SqlSingle.Null
			Else
				_hours = New SqlSingle(CType(objDataRow("Hours"), Single))
			End If
			
			_hoursOld = _hours
			
			If objDataRow("HoursAdministrative") Is System.DBNull.Value Then
				_hoursAdministrative = SqlSingle.Null
			Else
				_hoursAdministrative = New SqlSingle(CType(objDataRow("HoursAdministrative"), Single))
			End If
			
			_hoursAdministrativeOld = _hoursAdministrative
			
			If objDataRow("HoursLocating") Is System.DBNull.Value Then
				_hoursLocating = SqlSingle.Null
			Else
				_hoursLocating = New SqlSingle(CType(objDataRow("HoursLocating"), Single))
			End If
			
			_hoursLocatingOld = _hoursLocating
			
			If objDataRow("HoursInterviewing") Is System.DBNull.Value Then
				_hoursInterviewing = SqlSingle.Null
			Else
				_hoursInterviewing = New SqlSingle(CType(objDataRow("HoursInterviewing"), Single))
			End If
			
			_hoursInterviewingOld = _hoursInterviewing
			
			If objDataRow("HoursTraveling") Is System.DBNull.Value Then
				_hoursTraveling = SqlSingle.Null
			Else
				_hoursTraveling = New SqlSingle(CType(objDataRow("HoursTraveling"), Single))
			End If
			
			_hoursTravelingOld = _hoursTraveling
			
			If objDataRow("HoursOther") Is System.DBNull.Value Then
				_hoursOther = SqlSingle.Null
			Else
				_hoursOther = New SqlSingle(CType(objDataRow("HoursOther"), Single))
			End If
			
			_hoursOtherOld = _hoursOther
			
			If objDataRow("MileageExpense") Is System.DBNull.Value Then
				_mileageExpense = SqlMoney.Null
			Else
				_mileageExpense = New SqlMoney(CType(objDataRow("MileageExpense"), Decimal))
			End If
			
			_mileageExpenseOld = _mileageExpense
			
			If objDataRow("MileageRate") Is System.DBNull.Value Then
				_mileageRate = SqlSingle.Null
			Else
				_mileageRate = New SqlSingle(CType(objDataRow("MileageRate"), Single))
			End If
			
			_mileageRateOld = _mileageRate
			
			If objDataRow("Mileage") Is System.DBNull.Value Then
				_mileage = SqlSingle.Null
			Else
				_mileage = New SqlSingle(CType(objDataRow("Mileage"), Single))
			End If
			
			_mileageOld = _mileage
			
			If objDataRow("Expenses") Is System.DBNull.Value Then
				_expenses = SqlMoney.Null
			Else
				_expenses = New SqlMoney(CType(objDataRow("Expenses"), Decimal))
			End If
			
			_expensesOld = _expenses
			
			If objDataRow("CarRental") Is System.DBNull.Value Then
				_carRental = SqlMoney.Null
			Else
				_carRental = New SqlMoney(CType(objDataRow("CarRental"), Decimal))
			End If
			
			_carRentalOld = _carRental
			
			If objDataRow("AirTravel") Is System.DBNull.Value Then
				_airTravel = SqlMoney.Null
			Else
				_airTravel = New SqlMoney(CType(objDataRow("AirTravel"), Decimal))
			End If
			
			_airTravelOld = _airTravel
			
			_notes = New SqlString(CType(objDataRow("Notes"), String))
			
			_notesOld = _notes
			
			_suppliesFedEx = New SqlBoolean(CType(objDataRow("SuppliesFedEx"), Boolean))
			
			_suppliesFedExOld = _suppliesFedEx
			
			_suppliesExpRep = New SqlBoolean(CType(objDataRow("SuppliesExpRep"), Boolean))
			
			_suppliesExpRepOld = _suppliesExpRep
			
			_suppliesWYWO = New SqlBoolean(CType(objDataRow("SuppliesWYWO"), Boolean))
			
			_suppliesWYWOOld = _suppliesWYWO
			
			_suppliesBrochure = New SqlBoolean(CType(objDataRow("SuppliesBrochure"), Boolean))
			
			_suppliesBrochureOld = _suppliesBrochure
			
			_suppliesChecklist = New SqlBoolean(CType(objDataRow("SuppliesChecklist"), Boolean))
			
			_suppliesChecklistOld = _suppliesChecklist
			
			_suppliesOther = New SqlString(CType(objDataRow("SuppliesOther"), String))
			
			_suppliesOtherOld = _suppliesOther
			
			_suppliesPrintedBy = New SqlString(CType(objDataRow("SuppliesPrintedBy"), String))
			
			_suppliesPrintedByOld = _suppliesPrintedBy
			
			If objDataRow("SuppliesPrintedOn") Is System.DBNull.Value Then
				_suppliesPrintedOn = SqlDateTime.Null
			Else
				_suppliesPrintedOn = New SqlDateTime(CType(objDataRow("SuppliesPrintedOn"), Date))
			End If
			
			_suppliesPrintedOnOld = _suppliesPrintedOn
			
			_createdBy = New SqlString(CType(objDataRow("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			If objDataRow("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objDataRow("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objDataRow("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objDataRow("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objDataRow("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objDataRow("GiftCards") Is System.DBNull.Value Then
				_giftCards = SqlInt32.Null
			Else
				_giftCards = New SqlInt32(CType(objDataRow("GiftCards"), Integer))
			End If
			
			_giftCardsOld = _giftCards
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillProperties(ByVal objSqlDataReader As SqlDataReader)

			
			_interviewerTrackingID = New SqlInt32(CType(objSqlDataReader("InterviewerTrackingID"), Integer))
			
			_interviewerTrackingIDOld = _interviewerTrackingID
			
			_interviewerID = New SqlInt32(CType(objSqlDataReader("InterviewerID"), Integer))
			
			_interviewerIDOld = _interviewerID
			
			If objSqlDataReader("DateReported") Is System.DBNull.Value Then
				_dateReported = SqlDateTime.Null
			Else
				_dateReported = New SqlDateTime(CType(objSqlDataReader("DateReported"), Date))
			End If
			
			_dateReportedOld = _dateReported
			
			If objSqlDataReader("WeekBeg") Is System.DBNull.Value Then
				_weekBeg = SqlDateTime.Null
			Else
				_weekBeg = New SqlDateTime(CType(objSqlDataReader("WeekBeg"), Date))
			End If
			
			_weekBegOld = _weekBeg
			
			If objSqlDataReader("WeekEnd") Is System.DBNull.Value Then
				_weekEnd = SqlDateTime.Null
			Else
				_weekEnd = New SqlDateTime(CType(objSqlDataReader("WeekEnd"), Date))
			End If
			
			_weekEndOld = _weekEnd
			
			If objSqlDataReader("Hours") Is System.DBNull.Value Then
				_hours = SqlSingle.Null
			Else
				_hours = New SqlSingle(CType(objSqlDataReader("Hours"), Single))
			End If
			
			_hoursOld = _hours
			
			If objSqlDataReader("HoursAdministrative") Is System.DBNull.Value Then
				_hoursAdministrative = SqlSingle.Null
			Else
				_hoursAdministrative = New SqlSingle(CType(objSqlDataReader("HoursAdministrative"), Single))
			End If
			
			_hoursAdministrativeOld = _hoursAdministrative
			
			If objSqlDataReader("HoursLocating") Is System.DBNull.Value Then
				_hoursLocating = SqlSingle.Null
			Else
				_hoursLocating = New SqlSingle(CType(objSqlDataReader("HoursLocating"), Single))
			End If
			
			_hoursLocatingOld = _hoursLocating
			
			If objSqlDataReader("HoursInterviewing") Is System.DBNull.Value Then
				_hoursInterviewing = SqlSingle.Null
			Else
				_hoursInterviewing = New SqlSingle(CType(objSqlDataReader("HoursInterviewing"), Single))
			End If
			
			_hoursInterviewingOld = _hoursInterviewing
			
			If objSqlDataReader("HoursTraveling") Is System.DBNull.Value Then
				_hoursTraveling = SqlSingle.Null
			Else
				_hoursTraveling = New SqlSingle(CType(objSqlDataReader("HoursTraveling"), Single))
			End If
			
			_hoursTravelingOld = _hoursTraveling
			
			If objSqlDataReader("HoursOther") Is System.DBNull.Value Then
				_hoursOther = SqlSingle.Null
			Else
				_hoursOther = New SqlSingle(CType(objSqlDataReader("HoursOther"), Single))
			End If
			
			_hoursOtherOld = _hoursOther
			
			If objSqlDataReader("MileageExpense") Is System.DBNull.Value Then
				_mileageExpense = SqlMoney.Null
			Else
				_mileageExpense = New SqlMoney(CType(objSqlDataReader("MileageExpense"), Decimal))
			End If
			
			_mileageExpenseOld = _mileageExpense
			
			If objSqlDataReader("MileageRate") Is System.DBNull.Value Then
				_mileageRate = SqlSingle.Null
			Else
				_mileageRate = New SqlSingle(CType(objSqlDataReader("MileageRate"), Single))
			End If
			
			_mileageRateOld = _mileageRate
			
			If objSqlDataReader("Mileage") Is System.DBNull.Value Then
				_mileage = SqlSingle.Null
			Else
				_mileage = New SqlSingle(CType(objSqlDataReader("Mileage"), Single))
			End If
			
			_mileageOld = _mileage
			
			If objSqlDataReader("Expenses") Is System.DBNull.Value Then
				_expenses = SqlMoney.Null
			Else
				_expenses = New SqlMoney(CType(objSqlDataReader("Expenses"), Decimal))
			End If
			
			_expensesOld = _expenses
			
			If objSqlDataReader("CarRental") Is System.DBNull.Value Then
				_carRental = SqlMoney.Null
			Else
				_carRental = New SqlMoney(CType(objSqlDataReader("CarRental"), Decimal))
			End If
			
			_carRentalOld = _carRental
			
			If objSqlDataReader("AirTravel") Is System.DBNull.Value Then
				_airTravel = SqlMoney.Null
			Else
				_airTravel = New SqlMoney(CType(objSqlDataReader("AirTravel"), Decimal))
			End If
			
			_airTravelOld = _airTravel
			
			_notes = New SqlString(CType(objSqlDataReader("Notes"), String))
			
			_notesOld = _notes
			
			_suppliesFedEx = New SqlBoolean(CType(objSqlDataReader("SuppliesFedEx"), Boolean))
			
			_suppliesFedExOld = _suppliesFedEx
			
			_suppliesExpRep = New SqlBoolean(CType(objSqlDataReader("SuppliesExpRep"), Boolean))
			
			_suppliesExpRepOld = _suppliesExpRep
			
			_suppliesWYWO = New SqlBoolean(CType(objSqlDataReader("SuppliesWYWO"), Boolean))
			
			_suppliesWYWOOld = _suppliesWYWO
			
			_suppliesBrochure = New SqlBoolean(CType(objSqlDataReader("SuppliesBrochure"), Boolean))
			
			_suppliesBrochureOld = _suppliesBrochure
			
			_suppliesChecklist = New SqlBoolean(CType(objSqlDataReader("SuppliesChecklist"), Boolean))
			
			_suppliesChecklistOld = _suppliesChecklist
			
			_suppliesOther = New SqlString(CType(objSqlDataReader("SuppliesOther"), String))
			
			_suppliesOtherOld = _suppliesOther
			
			_suppliesPrintedBy = New SqlString(CType(objSqlDataReader("SuppliesPrintedBy"), String))
			
			_suppliesPrintedByOld = _suppliesPrintedBy
			
			If objSqlDataReader("SuppliesPrintedOn") Is System.DBNull.Value Then
				_suppliesPrintedOn = SqlDateTime.Null
			Else
				_suppliesPrintedOn = New SqlDateTime(CType(objSqlDataReader("SuppliesPrintedOn"), Date))
			End If
			
			_suppliesPrintedOnOld = _suppliesPrintedOn
			
			_createdBy = New SqlString(CType(objSqlDataReader("CreatedBy"), String))
			
			_createdByOld = _createdBy
			
			If objSqlDataReader("CreatedOn") Is System.DBNull.Value Then
				_createdOn = SqlDateTime.Null
			Else
				_createdOn = New SqlDateTime(CType(objSqlDataReader("CreatedOn"), Date))
			End If
			
			_createdOnOld = _createdOn
			
			_lastModifiedBy = New SqlString(CType(objSqlDataReader("LastModifiedBy"), String))
			
			_lastModifiedByOld = _lastModifiedBy
			
			If objSqlDataReader("LastModifiedOn") Is System.DBNull.Value Then
				_lastModifiedOn = SqlDateTime.Null
			Else
				_lastModifiedOn = New SqlDateTime(CType(objSqlDataReader("LastModifiedOn"), Date))
			End If
			
			_lastModifiedOnOld = _lastModifiedOn
			
			If objSqlDataReader("GiftCards") Is System.DBNull.Value Then
				_giftCards = SqlInt32.Null
			Else
				_giftCards = New SqlInt32(CType(objSqlDataReader("GiftCards"), Integer))
			End If
			
			_giftCardsOld = _giftCards
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Private Sub FillDefaultProperties()

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			_notes = New SqlString("")
			_notesOld = _notes
			
			_suppliesFedEx = New SqlBoolean(False)
			_suppliesFedExOld = _suppliesFedEx
			
			_suppliesExpRep = New SqlBoolean(False)
			_suppliesExpRepOld = _suppliesExpRep
			
			_suppliesWYWO = New SqlBoolean(False)
			_suppliesWYWOOld = _suppliesWYWO
			
			_suppliesBrochure = New SqlBoolean(False)
			_suppliesBrochureOld = _suppliesBrochure
			
			_suppliesChecklist = New SqlBoolean(False)
			_suppliesChecklistOld = _suppliesChecklist
			
			_suppliesOther = New SqlString("")
			_suppliesOtherOld = _suppliesOther
			
			_suppliesPrintedBy = New SqlString("")
			_suppliesPrintedByOld = _suppliesPrintedBy
			
			
			_createdBy = New SqlString("")
			_createdByOld = _createdBy
			
			
			_lastModifiedBy = New SqlString("")
			_lastModifiedByOld = _lastModifiedBy
			
			
			
			ModifiedColumnCount = 0
			
		End Sub

			
		Friend Sub RestoreModified()

			
			_interviewerTrackingID = _interviewerTrackingIDOld
			
			_interviewerID = _interviewerIDOld
			
			_dateReported = _dateReportedOld
			
			_weekBeg = _weekBegOld
			
			_weekEnd = _weekEndOld
			
			_hours = _hoursOld
			
			_hoursAdministrative = _hoursAdministrativeOld
			
			_hoursLocating = _hoursLocatingOld
			
			_hoursInterviewing = _hoursInterviewingOld
			
			_hoursTraveling = _hoursTravelingOld
			
			_hoursOther = _hoursOtherOld
			
			_mileageExpense = _mileageExpenseOld
			
			_mileageRate = _mileageRateOld
			
			_mileage = _mileageOld
			
			_expenses = _expensesOld
			
			_carRental = _carRentalOld
			
			_airTravel = _airTravelOld
			
			_notes = _notesOld
			
			_suppliesFedEx = _suppliesFedExOld
			
			_suppliesExpRep = _suppliesExpRepOld
			
			_suppliesWYWO = _suppliesWYWOOld
			
			_suppliesBrochure = _suppliesBrochureOld
			
			_suppliesChecklist = _suppliesChecklistOld
			
			_suppliesOther = _suppliesOtherOld
			
			_suppliesPrintedBy = _suppliesPrintedByOld
			
			_suppliesPrintedOn = _suppliesPrintedOnOld
			
			_createdBy = _createdByOld
			
			_createdOn = _createdOnOld
			
			_lastModifiedBy = _lastModifiedByOld
			
			_lastModifiedOn = _lastModifiedOnOld
			
			_giftCards = _giftCardsOld
			
			ModifiedColumnCount = 0
			
		End Sub


		''' <summary>
		''' Inserts a new row into the database.
		''' </summary>
		''' <returns>True if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported. May be SqlDateTime.Null</LI>
		'''		 <LI>WeekBeg. May be SqlDateTime.Null</LI>
		'''		 <LI>WeekEnd. May be SqlDateTime.Null</LI>
		'''		 <LI>Hours. May be SqlSingle.Null</LI>
		'''		 <LI>HoursAdministrative. May be SqlSingle.Null</LI>
		'''		 <LI>HoursLocating. May be SqlSingle.Null</LI>
		'''		 <LI>HoursInterviewing. May be SqlSingle.Null</LI>
		'''		 <LI>HoursTraveling. May be SqlSingle.Null</LI>
		'''		 <LI>HoursOther. May be SqlSingle.Null</LI>
		'''		 <LI>MileageExpense. May be SqlMoney.Null</LI>
		'''		 <LI>MileageRate. May be SqlSingle.Null</LI>
		'''		 <LI>Mileage. May be SqlSingle.Null</LI>
		'''		 <LI>Expenses. May be SqlMoney.Null</LI>
		'''		 <LI>CarRental. May be SqlMoney.Null</LI>
		'''		 <LI>AirTravel. May be SqlMoney.Null</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>SuppliesFedEx</LI>
		'''		 <LI>SuppliesExpRep</LI>
		'''		 <LI>SuppliesWYWO</LI>
		'''		 <LI>SuppliesBrochure</LI>
		'''		 <LI>SuppliesChecklist</LI>
		'''		 <LI>SuppliesOther</LI>
		'''		 <LI>SuppliesPrintedBy</LI>
		'''		 <LI>SuppliesPrintedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>GiftCards. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>InterviewerTrackingID</LI>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>

		Overrides Public Function Insert() As Boolean

			If mConnectionProvider Is Nothing Then
				_createdBy = New SqlString("Unknown")
			Else
				_createdBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_createdOn = New SqlDateTime(Now())
			_lastModifiedBy = CreatedBy
			_lastModifiedOn = CreatedOn
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_Insert]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateReported", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateReported))
				cmdToExecute.Parameters.Add(New SqlParameter("@WeekBeg", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _weekBeg))
				cmdToExecute.Parameters.Add(New SqlParameter("@WeekEnd", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _weekEnd))
				cmdToExecute.Parameters.Add(New SqlParameter("@Hours", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hours))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursAdministrative", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursAdministrative))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursLocating", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursInterviewing", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursInterviewing))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursTraveling", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursTraveling))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursOther", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageExpense", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _mileageExpense))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageRate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileageRate))
				cmdToExecute.Parameters.Add(New SqlParameter("@Mileage", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileage))
				cmdToExecute.Parameters.Add(New SqlParameter("@Expenses", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _expenses))
				cmdToExecute.Parameters.Add(New SqlParameter("@CarRental", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _carRental))
				cmdToExecute.Parameters.Add(New SqlParameter("@AirTravel", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _airTravel))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 500, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesFedEx", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesFedEx))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesExpRep", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesExpRep))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesWYWO", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesWYWO))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesBrochure))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesChecklist", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesChecklist))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesOther", SqlDbType.VarChar, 50, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesPrintedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesPrintedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesPrintedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _suppliesPrintedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@GiftCards", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _giftCards))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerTrackingID", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, _interviewerTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				_interviewerTrackingID = CType(cmdToExecute.Parameters.Item("@InterviewerTrackingID").Value, SqlInt32)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_Insert' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::Insert::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Updates an existing row in the table.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerTrackingID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported. May be SqlDateTime.Null</LI>
		'''		 <LI>WeekBeg. May be SqlDateTime.Null</LI>
		'''		 <LI>WeekEnd. May be SqlDateTime.Null</LI>
		'''		 <LI>Hours. May be SqlSingle.Null</LI>
		'''		 <LI>HoursAdministrative. May be SqlSingle.Null</LI>
		'''		 <LI>HoursLocating. May be SqlSingle.Null</LI>
		'''		 <LI>HoursInterviewing. May be SqlSingle.Null</LI>
		'''		 <LI>HoursTraveling. May be SqlSingle.Null</LI>
		'''		 <LI>HoursOther. May be SqlSingle.Null</LI>
		'''		 <LI>MileageExpense. May be SqlMoney.Null</LI>
		'''		 <LI>MileageRate. May be SqlSingle.Null</LI>
		'''		 <LI>Mileage. May be SqlSingle.Null</LI>
		'''		 <LI>Expenses. May be SqlMoney.Null</LI>
		'''		 <LI>CarRental. May be SqlMoney.Null</LI>
		'''		 <LI>AirTravel. May be SqlMoney.Null</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>SuppliesFedEx</LI>
		'''		 <LI>SuppliesExpRep</LI>
		'''		 <LI>SuppliesWYWO</LI>
		'''		 <LI>SuppliesBrochure</LI>
		'''		 <LI>SuppliesChecklist</LI>
		'''		 <LI>SuppliesOther</LI>
		'''		 <LI>SuppliesPrintedBy</LI>
		'''		 <LI>SuppliesPrintedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn. May be SqlDateTime.Null</LI>
		'''		 <LI>GiftCards. May be SqlInt32.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Update() As Boolean

			If mConnectionProvider Is Nothing Then
				_lastModifiedBy = New SqlString("Unknown")
			Else
				_lastModifiedBy = New SqlString(mConnectionProvider.CurrentUser)
			End If
			_lastModifiedOn = New SqlDateTime(Now())
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_Update]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerTrackingID))
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(New SqlParameter("@DateReported", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _dateReported))
				cmdToExecute.Parameters.Add(New SqlParameter("@WeekBeg", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _weekBeg))
				cmdToExecute.Parameters.Add(New SqlParameter("@WeekEnd", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _weekEnd))
				cmdToExecute.Parameters.Add(New SqlParameter("@Hours", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hours))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursAdministrative", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursAdministrative))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursLocating", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursLocating))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursInterviewing", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursInterviewing))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursTraveling", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursTraveling))
				cmdToExecute.Parameters.Add(New SqlParameter("@HoursOther", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _hoursOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageExpense", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _mileageExpense))
				cmdToExecute.Parameters.Add(New SqlParameter("@MileageRate", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileageRate))
				cmdToExecute.Parameters.Add(New SqlParameter("@Mileage", SqlDbType.Real, 4, ParameterDirection.Input, True, 24, 0, "", DataRowVersion.Proposed, _mileage))
				cmdToExecute.Parameters.Add(New SqlParameter("@Expenses", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _expenses))
				cmdToExecute.Parameters.Add(New SqlParameter("@CarRental", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _carRental))
				cmdToExecute.Parameters.Add(New SqlParameter("@AirTravel", SqlDbType.Money, 8, ParameterDirection.Input, True, 19, 4, "", DataRowVersion.Proposed, _airTravel))
				cmdToExecute.Parameters.Add(New SqlParameter("@Notes", SqlDbType.VarChar, 500, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _notes))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesFedEx", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesFedEx))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesExpRep", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesExpRep))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesWYWO", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesWYWO))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesBrochure", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesBrochure))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesChecklist", SqlDbType.Bit, 1, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesChecklist))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesOther", SqlDbType.VarChar, 50, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesOther))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesPrintedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _suppliesPrintedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@SuppliesPrintedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _suppliesPrintedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _createdBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@CreatedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _createdOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedBy", SqlDbType.VarChar, 32, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _lastModifiedBy))
				cmdToExecute.Parameters.Add(New SqlParameter("@LastModifiedOn", SqlDbType.DateTime, 8, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _lastModifiedOn))
				cmdToExecute.Parameters.Add(New SqlParameter("@GiftCards", SqlDbType.Int, 4, ParameterDirection.Input, True, 10, 0, "", DataRowVersion.Proposed, _giftCards))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_Update' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::Update::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function

		''' <summary>
		''' Update method for updating one or more rows using the Foreign Key 'InterviewerID.
		''' It will reset the field 'InterviewerID' in
		''' all rows which have as value for this field the value as set in property 'InterviewerIDOld' to 
		''' the value as set in property 'InterviewerID'.
		''' </summary>
		''' <returns>True if succeeded, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>InterviewerIDOld</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function UpdateAllWInterviewerIDLogic() As Boolean
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_UpdateAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class' connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerIDOld", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerIDOld))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_UpdateAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::UpdateAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function
 
		''' <summary>
		''' Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		''' </summary>
		''' <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerTrackingID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function Delete() As Boolean

			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_Delete]"
			cmdToExecute.CommandType = CommandType.StoredProcedure

			' Use base class connection object

			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(New SqlParameter("@InterviewerTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				cmdToExecute.ExecuteNonQuery()
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_Delete' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return True
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::Delete::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select an existing row from the database based on the Primary Key.
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method:
		''' <UL>
		'''		 <LI>InterviewerTrackingID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InterviewerTrackingID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported</LI>
		'''		 <LI>WeekBeg</LI>
		'''		 <LI>WeekEnd</LI>
		'''		 <LI>Hours</LI>
		'''		 <LI>HoursAdministrative</LI>
		'''		 <LI>HoursLocating</LI>
		'''		 <LI>HoursInterviewing</LI>
		'''		 <LI>HoursTraveling</LI>
		'''		 <LI>HoursOther</LI>
		'''		 <LI>MileageExpense</LI>
		'''		 <LI>MileageRate</LI>
		'''		 <LI>Mileage</LI>
		'''		 <LI>Expenses</LI>
		'''		 <LI>CarRental</LI>
		'''		 <LI>AirTravel</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>SuppliesFedEx</LI>
		'''		 <LI>SuppliesExpRep</LI>
		'''		 <LI>SuppliesWYWO</LI>
		'''		 <LI>SuppliesBrochure</LI>
		'''		 <LI>SuppliesChecklist</LI>
		'''		 <LI>SuppliesOther</LI>
		'''		 <LI>SuppliesPrintedBy</LI>
		'''		 <LI>SuppliesPrintedOn</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>GiftCards</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>

		Overrides Public Function SelectOne() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_SelectOne]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerTrackingID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerTrackingID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_SelectOne' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::SelectOne::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select a row from the database based on the unique field 'InterviewerID'
		''' </summary>
		''' <returns>A DataTable object if successful, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InterviewerTrackingID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported</LI>
		'''		 <LI>WeekBeg</LI>
		'''		 <LI>WeekEnd</LI>
		'''		 <LI>Hours</LI>
		'''		 <LI>HoursAdministrative</LI>
		'''		 <LI>HoursLocating</LI>
		'''		 <LI>HoursInterviewing</LI>
		'''		 <LI>HoursTraveling</LI>
		'''		 <LI>HoursOther</LI>
		'''		 <LI>MileageExpense</LI>
		'''		 <LI>MileageRate</LI>
		'''		 <LI>Mileage</LI>
		'''		 <LI>Expenses</LI>
		'''		 <LI>CarRental</LI>
		'''		 <LI>AirTravel</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>SuppliesFedEx</LI>
		'''		 <LI>SuppliesExpRep</LI>
		'''		 <LI>SuppliesWYWO</LI>
		'''		 <LI>SuppliesBrochure</LI>
		'''		 <LI>SuppliesChecklist</LI>
		'''		 <LI>SuppliesOther</LI>
		'''		 <LI>SuppliesPrintedBy</LI>
		'''		 <LI>SuppliesPrintedOn</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>GiftCards</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>
		Public Function SelectOneWInterviewerIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_SelectOneWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_SelectOneWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::SelectOneWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Select a row from the database based on the unique field 'WeekEnd'
		''' </summary>
		''' <returns>A DataTable object if successful, otherwise an exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>WeekEnd. May be SqlDateTime.Null</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		'''		 <LI>InterviewerTrackingID</LI>
		'''		 <LI>InterviewerID</LI>
		'''		 <LI>DateReported</LI>
		'''		 <LI>WeekBeg</LI>
		'''		 <LI>WeekEnd</LI>
		'''		 <LI>Hours</LI>
		'''		 <LI>HoursAdministrative</LI>
		'''		 <LI>HoursLocating</LI>
		'''		 <LI>HoursInterviewing</LI>
		'''		 <LI>HoursTraveling</LI>
		'''		 <LI>HoursOther</LI>
		'''		 <LI>MileageExpense</LI>
		'''		 <LI>MileageRate</LI>
		'''		 <LI>Mileage</LI>
		'''		 <LI>Expenses</LI>
		'''		 <LI>CarRental</LI>
		'''		 <LI>AirTravel</LI>
		'''		 <LI>Notes</LI>
		'''		 <LI>SuppliesFedEx</LI>
		'''		 <LI>SuppliesExpRep</LI>
		'''		 <LI>SuppliesWYWO</LI>
		'''		 <LI>SuppliesBrochure</LI>
		'''		 <LI>SuppliesChecklist</LI>
		'''		 <LI>SuppliesOther</LI>
		'''		 <LI>SuppliesPrintedBy</LI>
		'''		 <LI>SuppliesPrintedOn</LI>
		'''		 <LI>CreatedBy</LI>
		'''		 <LI>CreatedOn</LI>
		'''		 <LI>LastModifiedBy</LI>
		'''		 <LI>LastModifiedOn</LI>
		'''		 <LI>GiftCards</LI>
		''' </UL>
		''' Sets all properties corresponding with a field in the table with the value of the row selected.
		''' </remarks>
		Public Function SelectOneWWeekEndLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_SelectOneWWeekEndLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@WeekEnd", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, True, 0, 0, "", DataRowVersion.Proposed, _weekEnd))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_SelectOneWWeekEndLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				If toReturn.Rows.Count > 0 Then
					FillProperties(toReturn.Rows(0))

				End If
				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::SelectOneWWeekEndLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects all rows from the table.
		''' </summary>
		''' <returns>A DataTable if successful, otherwise an exception is thrown.</returns>
		''' <remarks>
		''' Properties set after a succesful call of this method:
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Overrides Public Function SelectAll() As DataTable
			Dim cmdToExecute As SqlCommand = New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_SelectAll]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_SelectAll' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::SelectAll::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Selects one or more rows from the database based on the Foreign Key 'InterviewerID'
		''' </summary>
		''' <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		''' <remarks>
		''' Properties needed for this method: 
		''' <UL>
		'''		 <LI>InterviewerID</LI>
		''' </UL>
		''' Properties set after a succesful call of this method: 
		''' <UL>
		'''		 <LI>ErrorCode</LI>
		''' </UL>
		''' </remarks>
		Public Function SelectAllWInterviewerIDLogic() As DataTable
			Dim cmdToExecute As SqlCommand	= New SqlCommand()
			cmdToExecute.CommandText = "dbo.[wiz_tblInterviewerTracking_SelectAllWInterviewerIDLogic]"
			cmdToExecute.CommandType = CommandType.StoredProcedure
			Dim toReturn As DataTable = new DataTable("tblInterviewerTracking")
			Dim adapter As SqlDataAdapter = new SqlDataAdapter(cmdToExecute)

			' Use base class connection object
			cmdToExecute.Connection = mobjSqlConnection

			Try
				cmdToExecute.Parameters.Add(new SqlParameter("@InterviewerID", SqlDbType.Int, 4, ParameterDirection.Input, False, 10, 0, "", DataRowVersion.Proposed, _interviewerID))
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, True, 10, 0, "", DataRowVersion.Proposed, mErrorCode))

				If mblnConnectionIsLocal Then
					' Open connection.
					mobjSqlConnection.ConnectionString = Me.ConnectionString
					mobjSqlConnection.Open()
				Else
					If mConnectionProvider.IsTransactionPending Then
						cmdToExecute.Transaction = mConnectionProvider.CurrentTransaction
					End If
				End If

				' Execute query.
				adapter.Fill(toReturn)
				mErrorCode = CType(cmdToExecute.Parameters.Item("@ErrorCode").Value, SqlInt32)

				If Not mErrorCode.Equals(New SqlInt32(DataAccessError.OK)) Then
					' Throw error.
					Throw New Exception("Stored Procedure 'wiz_tblInterviewerTracking_SelectAllWInterviewerIDLogic' reported the ErrorCode: " & mErrorCode.ToString())
				End If

				Return toReturn
			Catch ex As Exception
				' Some error occured. Bubble it to caller and encapsulate Exception object
				Throw New Exception("TblInterviewerTracking::SelectAllWInterviewerIDLogic::Error occured." + Environment.Newline + Environment.NewLine + ex.Message, ex)
			Finally
				If mblnConnectionIsLocal Then
					' Close connection.
					mobjSqlConnection.Close()
				End If
				cmdToExecute.Dispose()
				adapter.Dispose()
			End Try
		End Function


#Region "Public Properties"

		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=True, _
		IsNullable:=False, _
		IsPrimaryKey:=True, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerTrackingID]() As SqlInt32
			Get
				Return _interviewerTrackingID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerTrackingID.Equals(Value) Then
					If _interviewerTrackingIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerTrackingID.Equals(_interviewerTrackingIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerTrackingIDTmp As SqlInt32 = Value
				If interviewerTrackingIDTmp.IsNull Then
					Throw New NullValueException("InterviewerTrackingID", "InterviewerTrackingID can't be NULL")
				End If
				_interviewerTrackingID = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=True, _
		IsComputed:=False, _
		IsForeignKey:=True, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [InterviewerID]() As SqlInt32
			Get
				Return _interviewerID
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _interviewerID.Equals(Value) Then
					If _interviewerIDOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _interviewerID.Equals(_interviewerIDOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				Dim interviewerIDTmp As SqlInt32 = Value
				If interviewerIDTmp.IsNull Then
					Throw New NullValueException("InterviewerID", "InterviewerID can't be NULL")
				End If
				_interviewerID = Value
			End Set
		End Property
		Protected Property [InterviewerIDOld]() As SqlInt32
			Get
				Return _interviewerIDOld
			End Get
			Set(ByVal Value As SqlInt32)
				Dim interviewerIDOldTmp As SqlInt32 = Value
				If interviewerIDOldTmp.IsNull Then
					Throw New NullValueException("InterviewerIDOld", "InterviewerIDOld can't be NULL")
				End If
				_interviewerIDOld = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [DateReported]() As SqlDateTime
			Get
				Return _dateReported
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _dateReported.Equals(Value) Then
					If _dateReportedOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _dateReported.Equals(_dateReportedOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_dateReported = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [WeekBeg]() As SqlDateTime
			Get
				Return _weekBeg
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _weekBeg.Equals(Value) Then
					If _weekBegOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _weekBeg.Equals(_weekBegOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_weekBeg = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=True, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [WeekEnd]() As SqlDateTime
			Get
				Return _weekEnd
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _weekEnd.Equals(Value) Then
					If _weekEndOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _weekEnd.Equals(_weekEndOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_weekEnd = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Hours]() As SqlSingle
			Get
				Return _hours
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hours.Equals(Value) Then
					If _hoursOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hours.Equals(_hoursOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hours = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [HoursAdministrative]() As SqlSingle
			Get
				Return _hoursAdministrative
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hoursAdministrative.Equals(Value) Then
					If _hoursAdministrativeOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hoursAdministrative.Equals(_hoursAdministrativeOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hoursAdministrative = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [HoursLocating]() As SqlSingle
			Get
				Return _hoursLocating
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hoursLocating.Equals(Value) Then
					If _hoursLocatingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hoursLocating.Equals(_hoursLocatingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hoursLocating = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [HoursInterviewing]() As SqlSingle
			Get
				Return _hoursInterviewing
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hoursInterviewing.Equals(Value) Then
					If _hoursInterviewingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hoursInterviewing.Equals(_hoursInterviewingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hoursInterviewing = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [HoursTraveling]() As SqlSingle
			Get
				Return _hoursTraveling
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hoursTraveling.Equals(Value) Then
					If _hoursTravelingOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hoursTraveling.Equals(_hoursTravelingOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hoursTraveling = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [HoursOther]() As SqlSingle
			Get
				Return _hoursOther
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _hoursOther.Equals(Value) Then
					If _hoursOtherOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _hoursOther.Equals(_hoursOtherOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_hoursOther = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MileageExpense]() As SqlMoney
			Get
				Return _mileageExpense
			End Get
			Set(ByVal Value As SqlMoney)
				If Not _mileageExpense.Equals(Value) Then
					If _mileageExpenseOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mileageExpense.Equals(_mileageExpenseOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mileageExpense = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [MileageRate]() As SqlSingle
			Get
				Return _mileageRate
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _mileageRate.Equals(Value) Then
					If _mileageRateOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mileageRate.Equals(_mileageRateOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mileageRate = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Mileage]() As SqlSingle
			Get
				Return _mileage
			End Get
			Set(ByVal Value As SqlSingle)
				If Not _mileage.Equals(Value) Then
					If _mileageOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _mileage.Equals(_mileageOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_mileage = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [Expenses]() As SqlMoney
			Get
				Return _expenses
			End Get
			Set(ByVal Value As SqlMoney)
				If Not _expenses.Equals(Value) Then
					If _expensesOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _expenses.Equals(_expensesOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_expenses = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CarRental]() As SqlMoney
			Get
				Return _carRental
			End Get
			Set(ByVal Value As SqlMoney)
				If Not _carRental.Equals(Value) Then
					If _carRentalOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _carRental.Equals(_carRentalOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_carRental = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [AirTravel]() As SqlMoney
			Get
				Return _airTravel
			End Get
			Set(ByVal Value As SqlMoney)
				If Not _airTravel.Equals(Value) Then
					If _airTravelOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _airTravel.Equals(_airTravelOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_airTravel = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [Notes]() As SqlString
			Get
				Return _notes
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _notes.IsNull Then
					CurrentValue = _notes.Value
				End If
				If Not _notesOld.IsNull Then
					OldValue = _notesOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_notes = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesFedEx]() As SqlBoolean
			Get
				Return _suppliesFedEx
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _suppliesFedEx.Equals(Value) Then
					If _suppliesFedExOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesFedEx.Equals(_suppliesFedExOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesFedEx = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesExpRep]() As SqlBoolean
			Get
				Return _suppliesExpRep
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _suppliesExpRep.Equals(Value) Then
					If _suppliesExpRepOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesExpRep.Equals(_suppliesExpRepOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesExpRep = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesWYWO]() As SqlBoolean
			Get
				Return _suppliesWYWO
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _suppliesWYWO.Equals(Value) Then
					If _suppliesWYWOOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesWYWO.Equals(_suppliesWYWOOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesWYWO = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesBrochure]() As SqlBoolean
			Get
				Return _suppliesBrochure
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _suppliesBrochure.Equals(Value) Then
					If _suppliesBrochureOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesBrochure.Equals(_suppliesBrochureOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesBrochure = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="((0))", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesChecklist]() As SqlBoolean
			Get
				Return _suppliesChecklist
			End Get
			Set(ByVal Value As SqlBoolean)
				If Not _suppliesChecklist.Equals(Value) Then
					If _suppliesChecklistOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesChecklist.Equals(_suppliesChecklistOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesChecklist = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesOther]() As SqlString
			Get
				Return _suppliesOther
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _suppliesOther.IsNull Then
					CurrentValue = _suppliesOther.Value
				End If
				If Not _suppliesOtherOld.IsNull Then
					OldValue = _suppliesOtherOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_suppliesOther = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesPrintedBy]() As SqlString
			Get
				Return _suppliesPrintedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _suppliesPrintedBy.IsNull Then
					CurrentValue = _suppliesPrintedBy.Value
				End If
				If Not _suppliesPrintedByOld.IsNull Then
					OldValue = _suppliesPrintedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_suppliesPrintedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [SuppliesPrintedOn]() As SqlDateTime
			Get
				Return _suppliesPrintedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _suppliesPrintedOn.Equals(Value) Then
					If _suppliesPrintedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _suppliesPrintedOn.Equals(_suppliesPrintedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_suppliesPrintedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [CreatedBy]() As SqlString
			Get
				Return _createdBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _createdBy.IsNull Then
					CurrentValue = _createdBy.Value
				End If
				If Not _createdByOld.IsNull Then
					OldValue = _createdByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_createdBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [CreatedOn]() As SqlDateTime
			Get
				Return _createdOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _createdOn.Equals(Value) Then
					If _createdOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _createdOn.Equals(_createdOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_createdOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=False, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="('')", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedBy]() As SqlString
			Get
				Return _lastModifiedBy
			End Get
			Set(ByVal Value As SqlString)
				Dim NewValue As String = Nothing
				Dim CurrentValue As String = Nothing
				Dim OldValue As String = Nothing
				If Not Value.IsNull Then
					NewValue = Value.Value
				End If
				If Not _lastModifiedBy.IsNull Then
					CurrentValue = _lastModifiedBy.Value
				End If
				If Not _lastModifiedByOld.IsNull Then
					OldValue = _lastModifiedByOld.Value
				End If
				If String.Compare(CurrentValue, NewValue) <> 0 Then
					If String.Compare(OldValue, NewValue) = 0 Then
						ModifiedColumnCount -= 1
					ElseIf String.Compare(CurrentValue, OldValue) = 0 Then
						ModifiedColumnCount += 1
					End If
				End If
				_lastModifiedBy = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [LastModifiedOn]() As SqlDateTime
			Get
				Return _lastModifiedOn
			End Get
			Set(ByVal Value As SqlDateTime)
				If Not _lastModifiedOn.Equals(Value) Then
					If _lastModifiedOnOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _lastModifiedOn.Equals(_lastModifiedOnOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_lastModifiedOn = Value
			End Set
		End Property


		<DatabaseAttribute(HasUniqueConstraint:=False, _
		IsComputed:=False, _
		IsForeignKey:=False, _
		IsIdentity:=False, _
		IsNullable:=True, _
		IsPrimaryKey:=False, _
		IsRowGUIDColumn:=False, _
		DefaultValue:="", _
		IsTimeStamp:=False)> _
		Public Property [GiftCards]() As SqlInt32
			Get
				Return _giftCards
			End Get
			Set(ByVal Value As SqlInt32)
				If Not _giftCards.Equals(Value) Then
					If _giftCardsOld.Equals(Value) Then
						ModifiedColumnCount -= 1
					ElseIf _giftCards.Equals(_giftCardsOld) Then
						ModifiedColumnCount += 1
					End If
				End If 
				_giftCards = Value
			End Set
		End Property

#End Region

	End Class
End Namespace
