'******************************************************************************
' Copyright © Mathematica Policy Research, Inc. 
' This code cannot be copied, distributed or used without the express written permission
' of Mathematica Policy Research, Inc. 
'******************************************************************************

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SMSBaseV5")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttlkpMelissaResultCode(instance As tlkpMelissaResultCode)
    End Sub
  Partial Private Sub UpdatetlkpMelissaResultCode(instance As tlkpMelissaResultCode)
    End Sub
  Partial Private Sub DeletetlkpMelissaResultCode(instance As tlkpMelissaResultCode)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.MPR.SMS.DataQuality.My.MySettings.Default.SMSBaseV5ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tlkpMelissaResultCodes() As System.Data.Linq.Table(Of tlkpMelissaResultCode)
		Get
			Return Me.GetTable(Of tlkpMelissaResultCode)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tlkpMelissaResultCode")>  _
Partial Public Class tlkpMelissaResultCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResultCodeID As Integer
	
	Private _ResultCode As String
	
	Private _ShortDescription As String
	
	Private _Description As String
	
	Private _ResultCodeTypeID As Integer
	
	Private _Notes As String
	
	Private _isClean As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResultCodeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultCodeIDChanged()
    End Sub
    Partial Private Sub OnResultCodeChanging(value As String)
    End Sub
    Partial Private Sub OnResultCodeChanged()
    End Sub
    Partial Private Sub OnShortDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnShortDescriptionChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnResultCodeTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultCodeTypeIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnisCleanChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnisCleanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultCodeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ResultCodeID() As Integer
		Get
			Return Me._ResultCodeID
		End Get
		Set
			If ((Me._ResultCodeID = value)  _
						= false) Then
				Me.OnResultCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._ResultCodeID = value
				Me.SendPropertyChanged("ResultCodeID")
				Me.OnResultCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultCode", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property ResultCode() As String
		Get
			Return Me._ResultCode
		End Get
		Set
			If (String.Equals(Me._ResultCode, value) = false) Then
				Me.OnResultCodeChanging(value)
				Me.SendPropertyChanging
				Me._ResultCode = value
				Me.SendPropertyChanged("ResultCode")
				Me.OnResultCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShortDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ShortDescription() As String
		Get
			Return Me._ShortDescription
		End Get
		Set
			If (String.Equals(Me._ShortDescription, value) = false) Then
				Me.OnShortDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ShortDescription = value
				Me.SendPropertyChanged("ShortDescription")
				Me.OnShortDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultCodeTypeID", DbType:="Int NOT NULL")>  _
	Public Property ResultCodeTypeID() As Integer
		Get
			Return Me._ResultCodeTypeID
		End Get
		Set
			If ((Me._ResultCodeTypeID = value)  _
						= false) Then
				Me.OnResultCodeTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ResultCodeTypeID = value
				Me.SendPropertyChanged("ResultCodeTypeID")
				Me.OnResultCodeTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(200)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isClean", DbType:="Int")>  _
	Public Property isClean() As System.Nullable(Of Integer)
		Get
			Return Me._isClean
		End Get
		Set
			If (Me._isClean.Equals(value) = false) Then
				Me.OnisCleanChanging(value)
				Me.SendPropertyChanging
				Me._isClean = value
				Me.SendPropertyChanged("isClean")
				Me.OnisCleanChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
